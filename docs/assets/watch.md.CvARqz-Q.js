import{_ as a,c as e,o as s,a2 as t}from"./chunks/framework.CuyP2U0e.js";const m=JSON.parse('{"title":"Watch","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"watch.md","filePath":"watch.md","lastUpdated":1709319225000}'),i={name:"watch.md"},o=t(`<h1 id="watch" tabindex="-1">Watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;Watch&quot;">​</a></h1><p>The more things change, the more they stay the same. Or, as they say in France, &quot;Omelette Du Fromage&quot;.</p><h2 id="watch-1" tabindex="-1">watch() <a class="header-anchor" href="#watch-1" aria-label="Permalink to &quot;watch()&quot;">​</a></h2><p>The <code>watch()</code> function implements a command line program for running another program while watching one or more files or directories. If any of the watched files change then it restarts the program.</p><p>It&#39;s implemented as a wrapper around <a href="https://www.npmjs.com/package/chokidar" target="_blank" rel="noreferrer">chokidar</a> with some additional command line processing.</p><p>You can create a simple script like this and run it with the <code>-h</code> command line option for help.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { watch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@abw/badger&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>But you don&#39;t need to do that because we&#39;ve done it for you. There&#39;s a <code>badger-watch</code> script provide as part of this distribution.</p><p>You can run <code>badger-watch</code> as a script from your <code>package.json</code> file. For example, something like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;watch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;badger-watch -v -r -w lib -w config my-program.js arg1 arg2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>In this example, running the command <code>npm watch</code> will run <code>my-program.js arg1 arg2</code> and if any of the files in the <code>lib</code> or <code>config</code> directories change the program will be restarted.</p><p>The <code>-v</code> or <code>--verbose</code> option enables verbose mode. The <code>-r</code> or <code>--restart</code> option will restart the program whenever it exits. The <code>-w &lt;path&gt;</code> or <code>--watch &lt;path&gt;</code> option watches a path (e.g. a file or directory) for changes. The <code>-h</code> or <code>--help</code> option displays the help.</p><p>You can pass additional arguments to your program (e.g. <code>arg1</code> and <code>arg2</code> as shown above). These can include arguments with dashes (e.g. <code>-foo</code>, <code>--bar</code>, etc). If any of the arguments you want to pass to your program are those accepted by the watch command (e.g. <code>-v</code>, <code>--verbose</code>, etc.) then you should use the <code>--</code> option just before your program so that they don&#39;t conflict.</p><p>For example, if your program accepts a <code>-v</code> option then you should invoke it like this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">badger-watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-program.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arg1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arg2&quot;</span></span></code></pre></div>`,15),h=[o];function n(r,c,p,d,l,g){return s(),e("div",null,h)}const u=a(i,[["render",n]]);export{m as __pageData,u as default};
