import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.RZGn37fl.js";const n="/badger-js/assets/progress.BZJhiDQf.png",E=JSON.parse('{"title":"Progress","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"progress.md","filePath":"progress.md","lastUpdated":null}'),t={name:"progress.md"},r=e(`<h1 id="progress" tabindex="-1">Progress <a class="header-anchor" href="#progress" aria-label="Permalink to &quot;Progress&quot;">​</a></h1><p>If you&#39;re hanging around waiting for a long running process to finish then it can be useful to have some kind of visual indication of the progress.</p><h2 id="progress-1" tabindex="-1">progress() <a class="header-anchor" href="#progress-1" aria-label="Permalink to &quot;progress()&quot;">​</a></h2><p>The <code>progress()</code> function returns an object which can be used to give a visual display of the progress of a long running process. It is intended to be used in cases where you know in advance how many actions you need to complete (e.g. importing 1000 records into a database).</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { progress } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@abw/badger&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> records</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // lots of records</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (record </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> records) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // do something with record</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The <code>printProgress()</code> method accepts an argument which is the number of items you have processed in that loop (i.e. it&#39;s the delta, not the total number processed so far). It defaults to 1.</p><p>As the method is called it will print a few more &quot;pixels&quot; to the screen to display a nice colourful image of an hourglass.</p><p><img src="`+n+'" alt="Progress"></p><p>You can change the colours or use your own picture. See the <a href="https://github.com/abw/badger-js/blob/master/examples/progress.js" target="_blank" rel="noreferrer">examples/progress.js</a> file for examples.</p>',9),p=[r];function o(h,l,d,k,c,g){return i(),a("div",null,p)}const y=s(t,[["render",o]]);export{E as __pageData,y as default};
