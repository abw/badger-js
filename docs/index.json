[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Badger/Codecs/Json.js",
    "content": "/**\n * Function to encode JSON\n * @param {Object} data - The data to encode as JSON text\n * @return {String} a JSON encoded string\n * @example\n * encode({ message: 'Hello World' })\n */\nconst encode = data => JSON.stringify(data);\n\n/**\n * Function to decode JSON\n * @param {String} text - The JSON text to decode\n * @return {Object|Array} the decoded object or array\n * @example\n * decode(\"{ message: 'Hello World' }\")\n */\nconst decode = text => JSON.parse(text);\n\n/**\n * An object containing the JSON `encode` and `decode` functions\n */\nexport const jsonCodec = { encode, decode };\n\nexport default jsonCodec\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Codecs/Json.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "encode",
    "memberof": "src/Badger/Codecs/Json.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/Json.js~encode",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Function to encode JSON",
    "examples": [
      "encode({ message: 'Hello World' })"
    ],
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to encode as JSON text"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a JSON encoded string"
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "decode",
    "memberof": "src/Badger/Codecs/Json.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/Json.js~decode",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Function to decode JSON",
    "examples": [
      "decode(\"{ message: 'Hello World' }\")"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The JSON text to decode"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array"
      ],
      "spread": false,
      "description": "the decoded object or array"
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "jsonCodec",
    "memberof": "src/Badger/Codecs/Json.js",
    "static": true,
    "longname": "src/Badger/Codecs/Json.js~jsonCodec",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{jsonCodec}",
    "description": "An object containing the JSON `encode` and `decode` functions",
    "lineNumber": 22,
    "type": {
      "types": [
        "{\"encode\": *, \"decode\": *}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/Badger/Codecs/Yaml.js",
    "content": "// simple wrapper around JSON load/dump\nimport yaml from 'js-yaml';\n\n/**\n * Function to encode YAML\n * @param {Object} data - The data to encode as YAML text\n * @return {String} a YAML encoded string\n * @example\n * encode({ message: 'Hello World' })\n */\nconst encode = data => yaml.dump(data);\n\n/**\n * Function to decode YAML\n * @param {String} text - The YAML text to decode\n * @return {Object|Array} the decoded object or array\n * @example\n * decode(\"message: Hello World\")\n */\nconst decode = text => yaml.load(text);\n\n/**\n * An object containing the YAML `encode` and `decode` functions\n */\nexport const yamlCodec = { encode, decode };\n\nexport default yamlCodec\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Codecs/Yaml.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "encode",
    "memberof": "src/Badger/Codecs/Yaml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/Yaml.js~encode",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Function to encode YAML",
    "examples": [
      "encode({ message: 'Hello World' })"
    ],
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to encode as YAML text"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a YAML encoded string"
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "decode",
    "memberof": "src/Badger/Codecs/Yaml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/Yaml.js~decode",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Function to decode YAML",
    "examples": [
      "decode(\"message: Hello World\")"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The YAML text to decode"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array"
      ],
      "spread": false,
      "description": "the decoded object or array"
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "yamlCodec",
    "memberof": "src/Badger/Codecs/Yaml.js",
    "static": true,
    "longname": "src/Badger/Codecs/Yaml.js~yamlCodec",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{yamlCodec}",
    "description": "An object containing the YAML `encode` and `decode` functions",
    "lineNumber": 25,
    "type": {
      "types": [
        "{\"encode\": *, \"decode\": *}"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/Badger/Codecs/index.js",
    "content": "import json from './Json.js'\nimport yaml from './Yaml.js'\n\n/**\n * Codecs provide a consistent encode()/decode() interface for serialising\n * and de-serialising data.  This standard naming convention makes it possible\n * for the ../Filesystem/File.js module to support a \"codec\" option for\n * files. When this option is set the file.read() and file.write() methods\n * automatically handle the translation to and from the serialised format\n * using a codec object returned by the codec() function below.  The codec\n * name can be specified in any case, e.g. \"Yaml\", \"YAML\", \"yaml\", \"YaML\",\n * etc., and it will be converted to lower case.\n */\n\n/**\n * Lookup table for codecs\n */\nexport const codecs = {\n  json, yaml\n};\n\n/**\n * Function to fetch a codec\n * @param {string} name - The title of the code, in any case, e.g. \"yaml\", \"YAML\", \"Yaml\"\n */\nexport const codec = name => codecs[\n  name.toLowerCase()\n];\n\nexport default codecs\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Codecs/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "codecs",
    "memberof": "src/Badger/Codecs/index.js",
    "static": true,
    "longname": "src/Badger/Codecs/index.js~codecs",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{codecs}",
    "description": "Lookup table for codecs",
    "lineNumber": 18,
    "type": {
      "types": [
        "{\"json\": *, \"yaml\": *}"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "codec",
    "memberof": "src/Badger/Codecs/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/index.js~codec",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{codec}",
    "description": "Function to fetch a codec",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The title of the code, in any case, e.g. \"yaml\", \"YAML\", \"Yaml\""
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/Badger/Component.js",
    "content": "import { addDebug } from \"./Utils/Debug.js\";\n\nexport class Component {\n  constructor(workspace, props={}) {\n    this.workspace = workspace;\n    this.props = props;\n    addDebug(this, props.debug, props.debugPrefix, props.debugColor);\n    this.initComponent(props);\n  }\n  initComponent() {\n    // stub for subclasses\n  }\n}\n\nexport default Component",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Component.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "Component",
    "memberof": "src/Badger/Component.js",
    "static": true,
    "longname": "src/Badger/Component.js~Component",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Component}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 61,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Component.js~Component#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "workspace",
    "memberof": "src/Badger/Component.js~Component",
    "static": false,
    "longname": "src/Badger/Component.js~Component#workspace",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "props",
    "memberof": "src/Badger/Component.js~Component",
    "static": false,
    "longname": "src/Badger/Component.js~Component#props",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "initComponent",
    "memberof": "src/Badger/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Component.js~Component#initComponent",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/Badger/Config.js",
    "content": "import { DirPath } from './Filesystem/DirPath.js';\nimport { addDebug } from './Utils/Debug.js';\nimport { dataPath } from '../Badger/Utils/DataPath.js';\nimport { doNothing, fail, splitList } from '@abw/badger-utils';\n\n/**\n * Default configuration options.\n */\nconst defaults = {\n  codec: ['yaml', 'json'],\n  jsExt: ['js', 'mjs'],\n};\n\n/**\n * The Config class implements an object which can load configuration\n * files from a configuration directory.  Files can be Javascript files\n * (with `.js` or `.mjs` extensions by default) or data files using any\n * of the standard codecs (`.yaml` or `.json` by default).\n */\nexport class Config extends DirPath {\n  /**\n   * Constructor for Config object.\n   * @param {String} dir - one or more directories that contain configuration files\n   * @param {Object} [options] - configuration options\n   * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n   * @param {Array|String} [options.codec='yaml json'] - Array or comma/whitespace delimited string of codec names\n   * @return {Object} the Config object\n   */\n  constructor(dir, options={}) {\n    super(dir);\n    const params = { ...defaults, ...options };\n    this.state.codec = splitList(params.codec),\n    this.state.jsExt = splitList(params.jsExt),\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n  }\n\n  /**\n   * Internal method to locate the first config file with one of a number of file extensions.\n   * @param {String} uri - base part of filename\n   * @param {Array} [exts] - array of possible extensions\n   * @param {Function} [makeOptions] - optional function to generate options for a {@link File} object\n   * @return {Object} the {@link File} object if it exists or `undefined` if not\n   */\n  async firstFileWithExt(uri, exts, makeOptions=doNothing) {\n    const dirs = await this.dirs();\n\n    for (let dir of dirs) {\n      for (let ext of exts) {\n        const path = uri + '.' + ext;\n        const file = dir.file(path, makeOptions(uri, ext));\n        this.debug('looking for config file: ', file.path());\n        if (await file.exists()) {\n          this.debug('config file exists: ', file.path());\n          return file;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Internal method to locate a Javascript configuration file with one of the `jsExt` extensions (`.js` or `.mjs` by default)\n   * @param {String} uri - base part of filename\n   * @return {Object} the {@link File} object if it exists or `undefined` if not\n   */\n  async jsFile(uri) {\n    return await this.firstFileWithExt(uri, this.state.jsExt);\n  }\n\n  /**\n   * Internal method to locate a configuration file with one of the `codec` extensions (`.yaml` or `.json` by default)\n   * @param {String} uri - base part of filename\n   * @return {Object} the {@link File} object if it exists or `undefined` if not\n   */\n  async file(uri) {\n    return await this.firstFileWithExt(uri, this.state.codec, (uri, codec) => ({ codec }));\n  }\n\n  /**\n   * Method to fetch configuration data from a file.  The file can be a Javascript file which should\n   * return the configuration data as the default export, or a YAML (`.yaml`) or JSON (`.json`) file.\n   * If the file isn't found then the method returns the `defaults` data if provided, or throws an\n   * error if not.\n   * @param {String} uri - base part of filename\n   * @param {Object} [defaults] - default configuration options to be used if a file isn't found\n   * @return {Object} the configuration data loaded from the file\n   */\n  async config(uri, defaults) {\n    const [base, fragment] = uri.split('#', 2);\n    let jsFile, file, data;\n\n    // first look for a JS file, e.g. <uri>.js, <uri>.mjs\n    if ((jsFile = await this.jsFile(base))) {\n      data = await import(jsFile.path());\n    }\n    // then for a config file with a codec extension, e.g. <uri>.yaml, <uri>.yaml\n    else if ((file = await this.file(base))) {\n      data = await file.read();\n    }\n    // failing that use any default value\n    else if (defaults) {\n      data = defaults;\n    }\n    // anything else is a big pile of fail\n    else {\n      return fail(\"No configuration file for \" + base);\n    }\n    // resolve any data path in a #fragment\n    return fragment\n      ? dataPath(data, fragment)\n      : data;\n  }\n}\n\n/**\n * Function to create a new Config object\n * @param {String} dir - directory or directories containing configuration files\n * @param {Object} [options] - configuration options\n * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n * @param {Array|String} [options.codec='yaml json'] - Array or comma/whitespace delimited string of codec names\n * @return {Object} the Config object\n */\nexport const config = (dir, options) => new Config(dir, options)\n\nexport default Config\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Config.js",
    "static": true,
    "longname": "src/Badger/Config.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Default configuration options.",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"codec\": *, \"jsExt\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "Config",
    "memberof": "src/Badger/Config.js",
    "static": true,
    "longname": "src/Badger/Config.js~Config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Config}",
    "description": "The Config class implements an object which can load configuration\nfiles from a configuration directory.  Files can be Javascript files\n(with `.js` or `.mjs` extensions by default) or data files using any\nof the standard codecs (`.yaml` or `.json` by default).",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "src/Badger/Filesystem/DirPath.js~DirPath"
    ]
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Config.js~Config#constructor",
    "access": "public",
    "description": "Constructor for Config object.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yaml json'",
        "defaultRaw": "'yaml json'",
        "name": "options.codec",
        "description": "Array or comma/whitespace delimited string of codec names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Config object"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "firstFileWithExt",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#firstFileWithExt",
    "access": "public",
    "description": "Internal method to locate the first config file with one of a number of file extensions.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "exts",
        "description": "array of possible extensions"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "makeOptions",
        "description": "optional function to generate options for a {@link File} object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "jsFile",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#jsFile",
    "access": "public",
    "description": "Internal method to locate a Javascript configuration file with one of the `jsExt` extensions (`.js` or `.mjs` by default)",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#file",
    "access": "public",
    "description": "Internal method to locate a configuration file with one of the `codec` extensions (`.yaml` or `.json` by default)",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#config",
    "access": "public",
    "description": "Method to fetch configuration data from a file.  The file can be a Javascript file which should\nreturn the configuration data as the default export, or a YAML (`.yaml`) or JSON (`.json`) file.\nIf the file isn't found then the method returns the `defaults` data if provided, or throws an\nerror if not.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options to be used if a file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the configuration data loaded from the file"
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "config",
    "memberof": "src/Badger/Config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Config.js~config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{config}",
    "description": "Function to create a new Config object",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "directory or directories containing configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yaml json'",
        "defaultRaw": "'yaml json'",
        "name": "options.codec",
        "description": "Array or comma/whitespace delimited string of codec names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Config object"
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/Badger/Filesystem/DirPath.js",
    "content": "import { splitList } from \"@abw/badger-utils\";\nimport { dir as fsDir } from \"./Directory.js\";\n\n/**\n * The DirPath class implements a base class for objects that\n * can search one or more directories.\n */\nexport class DirPath {\n  /**\n   * Constructor for filesystem paths.\n   * @param {String|Array} dir - comma/whitespace delimited string containing directories, or a {@link Directory} object or Array of {@link Directory} objects\n   * @return {Object} the {@link DirPath} object\n   */\n  constructor(dir) {\n    const dirs = this.initDirs(dir);\n    this.state = {\n      dirs\n    }\n  }\n\n  /**\n   * Internal method to initialise the directories.  If the `dir` argument is a string then it will be split on\n   * commas and/or whitespace and converted to an array of {@link Directory} objects.  If the `dir` is a\n   * {@link Directory} object then it will be wrapped in an array.  If the `dir` argument is already an array\n   * (presumably of {@link Directory} objects) then no further processing is required.\n   * @param {String|Array} dir - comma/whitespace delimited string containing directories, or a {@link Directory} object or Array of {@link Directory} objects\n   * @return {Array} an array of {@link Directory} objects\n   */\n  initDirs(dir) {\n    return splitList(dir).map( dir => fsDir(dir) );\n  }\n\n  /**\n   * Internal method to return an array of the directories in the `dirs` argument passed to the constructor that\n   * actually exist in the filesystem.  The checks to determine if the directories exists are only carried\n   * out the first time the method is called.  Subsequent calls will return the cached value stored in\n   * `this.state.dirsExist`.\n   * @return {Array} an array of {@link Directory} objects that exist\n   */\n  async dirs() {\n    return this.state.dirsExist\n      || ( this.state.dirsExist = await this.dirsExist() );\n  }\n\n  /**\n   * Internal method to determine which of the directories in the `dirs` argument passed to the constructor\n   * actually exist in the filesystem.\n   * @return {Array} an array of {@link Directory} objects that exist\n   */\n  async dirsExist() {\n    const dirs = this.state.dirs;\n    const exists = await Promise.all(\n      dirs.map( d => d.exists() )\n    );\n    return dirs.filter((value, index) => exists[index]);\n  }\n}\n\nexport default DirPath",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Filesystem/DirPath.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "class",
    "name": "DirPath",
    "memberof": "src/Badger/Filesystem/DirPath.js",
    "static": true,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{DirPath}",
    "description": "The DirPath class implements a base class for objects that\ncan search one or more directories.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 76,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#constructor",
    "access": "public",
    "description": "Constructor for filesystem paths.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "comma/whitespace delimited string containing directories, or a {@link Directory} object or Array of {@link Directory} objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link DirPath} object"
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#state",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"dirs\": *}"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "initDirs",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#initDirs",
    "access": "public",
    "description": "Internal method to initialise the directories.  If the `dir` argument is a string then it will be split on\ncommas and/or whitespace and converted to an array of {@link Directory} objects.  If the `dir` is a\n{@link Directory} object then it will be wrapped in an array.  If the `dir` argument is already an array\n(presumably of {@link Directory} objects) then no further processing is required.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "comma/whitespace delimited string containing directories, or a {@link Directory} object or Array of {@link Directory} objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "an array of {@link Directory} objects"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "dirs",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#dirs",
    "access": "public",
    "description": "Internal method to return an array of the directories in the `dirs` argument passed to the constructor that\nactually exist in the filesystem.  The checks to determine if the directories exists are only carried\nout the first time the method is called.  Subsequent calls will return the cached value stored in\n`this.state.dirsExist`.",
    "lineNumber": 40,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "an array of {@link Directory} objects that exist"
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "dirsExist",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#dirsExist",
    "access": "public",
    "description": "Internal method to determine which of the directories in the `dirs` argument passed to the constructor\nactually exist in the filesystem.",
    "lineNumber": 50,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "an array of {@link Directory} objects that exist"
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/Badger/Filesystem/Directory.js",
    "content": "import process from 'node:process';\nimport path from 'node:path';\nimport Path from './Path.js'\nimport { file } from './File.js'\nimport { fail } from '@abw/badger-utils';\nimport { rm, mkdir, rmdir, readdir } from 'node:fs/promises'\n\n/**\n * The Directory class implements a wrapper around a filesystem\n * directory.\n */\nexport class Directory extends Path {\n  /**\n   * Fetch a new {@link File} object for a file in the directory.\n   * @param {string} path - file path\n   * @param {Object} [options] - file configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @param {String} [options.encoding=utf8] - character encoding\n   * @return {Object} the {@link File} object\n   */\n  file(path, options) {\n    this.debug(\"file(%s, %o)\", path, options);\n    return file(this.relativePath(path), this.options(options));\n  }\n\n  /**\n   * Fetch a new {@link Directory} object for a sub-directory in the directory.\n   * @param {string} path - directory path\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - default codec for encoding/decoding files\n   * @param {String} [options.encoding=utf8] - default character encoding for files\n   * @return {Object} the {@link Directory} object\n   */\n  directory(path, options) {\n    this.debug(\"directory(%s, %o)\", path, options);\n    return dir(this.relativePath(path), this.options(options));\n  }\n\n  /**\n   * An alias for the {@link directory} method for lazy people\n   * @return {Object} the {@link Directory} object\n   */\n  dir(path, options) {\n    this.debug(\"dir(%s, %o)\", path, options);\n    return this.directory(path, options);\n  }\n\n  /**\n   * Returns a new {@link Directory} object for the parent directory\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - default codec for encoding/decoding files\n   * @param {String} [options.encoding=utf8] - default character encoding for files\n   * @return {Object} a {@link Directory} object for the parent\n   */\n  parent(options) {\n    this.debug(\"parent()\");\n    return this.directory('..', options);\n  }\n\n  /**\n   * Returns the names of the files and sub-directories in the directory\n   * @return {Promise} fulfills with an array of the file and directory names\n   */\n  async read() {\n    this.debug(\"read()\");\n    return await readdir(this.path());\n  }\n\n  /**\n   * Determines if the directory is empty.\n   * @return {Promise} fulfills with a boolean value true (empty) or false (not empty).\n   */\n  async isEmpty() {\n    this.debug(\"isEmpty()\");\n    const entries = await this.read();\n    return entries.length === 0;\n  }\n\n  /**\n   * Determines if the directory is not empty.\n   * @return {Promise} fulfills with a boolean value true (not empty) or false (empty).\n   */\n  async notEmpty() {\n    this.debug(\"notEmpty()\");\n    const empty = await this.isEmpty();\n    return !empty;\n  }\n\n  /**\n   * Empty the directory.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.force] - force removal of files and directories\n   * @param {Boolean} [options.recursive] - recursively empty and delete sub-directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  async empty(options={}) {\n    this.debug(\"empty(%o)\", options);\n    if (await this.exists() && await this.notEmpty()) {\n      await rm(this.path(), options);\n    }\n    return this;\n  }\n\n  /**\n   * Make the directory.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.recursive] - create intermediate directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  async mkdir(options={}) {\n    this.debug(\"mkdir(%o)\", options);\n    const exists = await this.exists();\n    if (! exists) {\n      await mkdir(this.path(), options);\n    }\n    return this;\n  }\n\n  /**\n   * Remove the directory.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.empty] - delete items in directory\n   * @param {Boolean} [options.force] - force delete files and directories\n   * @param {Boolean} [options.recursive] - recursively delete sub-directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  async rmdir(options={}) {\n    this.debug(\"rmdir(%o)\", options);\n    if (options.empty) {\n      await this.empty(options);\n    }\n    if (await this.exists()) {\n      await rmdir(this.path());\n    }\n    return this;\n  }\n\n  /**\n   * Create the directory and any intermediate directories.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.recursive=true] - recursively create intermediate directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  create(options={ recursive: true }) {\n    this.debug(\"create(%o)\", options);\n    return this.mkdir(options);\n  }\n\n  /**\n   * Empty and delete the directory.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.empty=true] - empty directory of any files and sub-directories\n   * @param {Boolean} [options.recursive=true] - recursively delete sub-directories\n   * @param {Boolean} [options.force=true] - force deletion of files and sub-directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  destroy(options={ empty: true, recursive: true, force: true }) {\n    this.debug(\"destroy(%o)\", options);\n    return this.rmdir(options);\n  }\n\n  /**\n   * Assert that a directory exists and optionally create it\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.create] - create the directory and any intermediate directories if it doesn't exist - equivalent to adding `mkdir` and `recursive` options or calling {@link create}\n   * @param {Boolean} [options.mkdir] - create the directory, add the `recursive` option to create intermediate directories - equivalent to calling {@link mkdir}\n   * @param {Boolean} [options.recursive] - when used with `mkdir`, creates any intermediate directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  async mustExist(options={}) {\n    this.debug(\"mustExist(%o)\", options);\n    if (await this.exists()) {\n      return this;\n    }\n    if (options.mkdir) {\n      return this.mkdir(options);\n    }\n    if (options.create) {\n      return this.create();\n    }\n    fail(\"Directory does not exist: \", this.path());\n  }\n}\n\n/**\n * Function to create a new {@link Directory} object\n * @param {string} path - directory path\n * @param {Object} [options] - configuration options\n * @param {Boolean} [options.codec] - a codec for encoding/decoding files\n * @return {Object} the {@link Directory} object\n */\nexport const dir = (path, options) => {\n  return new Directory(path, options);\n}\n\n/**\n * Function to create a new {@link Directory} object for the current working directory\n * @param {Object} [options] - configuration options\n * @param {Boolean} [options.codec] - a codec for encoding/decoding files\n * @return {Object} the {@link Directory} object\n */\nexport const cwd = options => {\n  return dir(process.cwd(), options);\n}\n\n/**\n * Function to create a new {@link Directory} object for the directory of a JS source file\n * @param {string} url - module url - from `import.meta.url`\n * @param {Object} [options] - configuration options\n * @param {Boolean} [options.codec] - a codec for encoding/decoding files\n * @return {Object} the {@link Directory} object\n */\nexport const bin = (url=process.argv[1], options) => {\n  return dir(\n    path.dirname(url.replace(/^file:\\/\\//, '')),\n    options\n  );\n}\n\nexport default Directory\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Filesystem/Directory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "Directory",
    "memberof": "src/Badger/Filesystem/Directory.js",
    "static": true,
    "longname": "src/Badger/Filesystem/Directory.js~Directory",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Directory}",
    "description": "The Directory class implements a wrapper around a filesystem\ndirectory.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/Badger/Filesystem/Path.js~Path"
    ]
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#file",
    "access": "public",
    "description": "Fetch a new {@link File} object for a file in the directory.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "file configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "directory",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#directory",
    "access": "public",
    "description": "Fetch a new {@link Directory} object for a sub-directory in the directory.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "default codec for encoding/decoding files"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "default character encoding for files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#dir",
    "access": "public",
    "description": "An alias for the {@link directory} method for lazy people",
    "lineNumber": 43,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    },
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "parent",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#parent",
    "access": "public",
    "description": "Returns a new {@link Directory} object for the parent directory",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "default codec for encoding/decoding files"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "default character encoding for files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object for the parent"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#read",
    "access": "public",
    "description": "Returns the names of the files and sub-directories in the directory",
    "lineNumber": 64,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with an array of the file and directory names"
    },
    "params": []
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#isEmpty",
    "access": "public",
    "description": "Determines if the directory is empty.",
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with a boolean value true (empty) or false (not empty)."
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "notEmpty",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#notEmpty",
    "access": "public",
    "description": "Determines if the directory is not empty.",
    "lineNumber": 83,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with a boolean value true (not empty) or false (empty)."
    },
    "params": []
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "empty",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#empty",
    "access": "public",
    "description": "Empty the directory.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.force",
        "description": "force removal of files and directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "recursively empty and delete sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "mkdir",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#mkdir",
    "access": "public",
    "description": "Make the directory.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "create intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "rmdir",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#rmdir",
    "access": "public",
    "description": "Remove the directory.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.empty",
        "description": "delete items in directory"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.force",
        "description": "force delete files and directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "recursively delete sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "create",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#create",
    "access": "public",
    "description": "Create the directory and any intermediate directories.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "recursively create intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#destroy",
    "access": "public",
    "description": "Empty and delete the directory.",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.empty",
        "description": "empty directory of any files and sub-directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "recursively delete sub-directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.force",
        "description": "force deletion of files and sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "mustExist",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#mustExist",
    "access": "public",
    "description": "Assert that a directory exists and optionally create it",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.create",
        "description": "create the directory and any intermediate directories if it doesn't exist - equivalent to adding `mkdir` and `recursive` options or calling {@link create}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.mkdir",
        "description": "create the directory, add the `recursive` option to create intermediate directories - equivalent to calling {@link mkdir}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "when used with `mkdir`, creates any intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "dir",
    "memberof": "src/Badger/Filesystem/Directory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Filesystem/Directory.js~dir",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dir}",
    "description": "Function to create a new {@link Directory} object",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "a codec for encoding/decoding files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "cwd",
    "memberof": "src/Badger/Filesystem/Directory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Filesystem/Directory.js~cwd",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cwd}",
    "description": "Function to create a new {@link Directory} object for the current working directory",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "a codec for encoding/decoding files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "bin",
    "memberof": "src/Badger/Filesystem/Directory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Filesystem/Directory.js~bin",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{bin}",
    "description": "Function to create a new {@link Directory} object for the directory of a JS source file",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "module url - from `import.meta.url`"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "a codec for encoding/decoding files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/Badger/Filesystem/File.js",
    "content": "import path from 'node:path'\nimport Path from './Path.js'\nimport { dir } from './Directory.js'\nimport { codec } from '../Codecs/index.js'\nimport { readFile, writeFile, rm } from 'node:fs/promises'\n\n/**\n * The File class implements a wrapper around a filesystem\n * file.\n */\nexport class File extends Path {\n  /**\n   * Returns a new {@link Directory} object for the parent directory of the file\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @param {String} [options.encoding=utf8] - character encoding\n   * @return {Object} a {@link Directory} object for the parent\n   */\n  directory(options) {\n    return dir(path.dirname(this.state.path), options);\n  }\n\n  /**\n   * An alias for the {@link directory} method for lazy people\n   * @return {Object} the parent {@link Directory} object\n   */\n  dir(...args) {\n    return this.directory(...args);\n  }\n\n  /**\n   * Reads the file content.  If a `codec` has been specified then the content is decoded.\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @param {String} [options.encoding=utf8] - character encoding\n   * @return {Promise} fulfills with the file content\n   * @example\n   * file('myfile.txt').read().then( text => console.log(text) );\n   * @example\n   * file('myfile.json', { codec: 'json' }).read().( data => console.log(data) );\n   * @example\n   * file('myfile.json').read({ codec: 'json' }).then( data => console.log(data) );\n   */\n  async read(options) {\n    const opts = this.options(options);\n    const text = await readFile(this.state.path, opts);\n    return opts.codec\n      ? codec(opts.codec).decode(text)\n      : text;\n  }\n\n  /**\n   * Writes the file content.  If a `codec` has been specified then the content will be encoded.\n   * @param {String|Object} data - directory configuration options\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @param {String} [options.encoding=utf8] - character encoding\n   * @return {Promise} fulfills with the file object\n   * @example\n   * file('myfile.txt').write('Hello World');\n   * @example\n   * file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });\n   * @example\n   * file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });\n   */\n  async write(data, options) {\n    const opts = this.options(options);\n    const text = opts.codec\n      ? codec(opts.codec).encode(data)\n      : data;\n    await writeFile(this.state.path, text, opts);\n    return this;\n  }\n\n  /**\n   * Delete the file content.\n   * @param {Object} [options] - directory configuration options\n   * @param {Boolean} [options.force=false] - when true, exceptions will be ignored if path does not exist\n   * @return {Promise} fulfills with the file object\n   */\n  async delete(options) {\n    await rm(this.state.path, options);\n    return this;\n  }\n}\n\n/**\n * Function to create a new {@link File} object for a file\n * @param {String} path - file path\n * @param {Object} [options] - configuration options\n * @param {Boolean} [options.codec] - a codec for encoding/decoding files\n * @param {String} [options.encoding=utf8] - character encoding\n * @return {Object} the {@link File} object\n */\nexport const file = (path, options) => {\n  return new File(path, options);\n}\n\nexport default File\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Filesystem/File.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "File",
    "memberof": "src/Badger/Filesystem/File.js",
    "static": true,
    "longname": "src/Badger/Filesystem/File.js~File",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{File}",
    "description": "The File class implements a wrapper around a filesystem\nfile.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/Badger/Filesystem/Path.js~Path"
    ]
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "directory",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#directory",
    "access": "public",
    "description": "Returns a new {@link Directory} object for the parent directory of the file",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object for the parent"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#dir",
    "access": "public",
    "description": "An alias for the {@link directory} method for lazy people",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the parent {@link Directory} object"
    },
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ]
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#read",
    "access": "public",
    "description": "Reads the file content.  If a `codec` has been specified then the content is decoded.",
    "examples": [
      "file('myfile.txt').read().then( text => console.log(text) );",
      "file('myfile.json', { codec: 'json' }).read().( data => console.log(data) );",
      "file('myfile.json').read({ codec: 'json' }).then( data => console.log(data) );"
    ],
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file content"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#write",
    "access": "public",
    "description": "Writes the file content.  If a `codec` has been specified then the content will be encoded.",
    "examples": [
      "file('myfile.txt').write('Hello World');",
      "file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });",
      "file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });"
    ],
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file object"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#delete",
    "access": "public",
    "description": "Delete the file content.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.force",
        "description": "when true, exceptions will be ignored if path does not exist"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file object"
    }
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "file",
    "memberof": "src/Badger/Filesystem/File.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Filesystem/File.js~file",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{file}",
    "description": "Function to create a new {@link File} object for a file",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "a codec for encoding/decoding files"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object"
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/Badger/Filesystem/Path.js",
    "content": "import path from 'node:path';\nimport { stat } from 'node:fs/promises'\nimport { rethrow } from '@abw/badger-utils';\nimport { addDebug } from '../Utils/Debug.js';\n\n/**\n * Default configuration options.\n */\nconst defaults = {\n  encoding: 'utf8'\n}\n\n/**\n * The Path class implements a base class for the {@link File} and {@link Directory}\n * classes.  It implements the common functionality for representing a filesystem path.\n */\nexport class Path {\n  /**\n   * Constructor for filesystem paths.\n   * @param {string} path - file path\n   * @param {Object} [options] - configuration options\n   * @param {String} [options.encoding=utf8] - file encoding\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @return {Object} the {@link Path} object\n   */\n  constructor(path, options={}) {\n    // allow path/file/directory to be constructed from an existing object\n    if (path instanceof Path) {\n      path = path.path();\n    }\n    this.state = { path, options: { ...defaults, ...options } };\n    addDebug(this, options.debug, options.debugPrefix || 'Path', options.debugColor);\n  }\n\n  /**\n   * Accessor method to return the filesystem path.\n   * @return {String} the filesystem path\n   */\n  path() {\n    return this.state.path;\n  }\n\n  /**\n   * Create a path relative to the current path.\n   * @param {String[]} parts - part(s) of the filesystem path\n   * @return {String} the new path\n   * @example\n   * const p = new Path('/path/to/here')\n   * const q = p.relativePath('there')          // -> /path/to/here/there\n   * const r = p.relativePath('and', 'there')   // -> /path/to/here/and/there\n   */\n  relativePath(...parts) {\n    return path.join(this.state.path, ...parts);\n  }\n\n  /**\n   * Internal method to merge any options with the pre-defined options passed to the\n   * constructor.  Options passed as arguments will take precedence.\n   * @param {Object} options - new options\n   * @return {Object} the merged options\n   * @example\n   * const p = new Path('/path/to/here', { option1: 'hello' })\n   * const q = p.options({ option2: 'world' })  // -> { option1: 'hello', options2: 'world' }\n   */\n  options(options={}) {\n    return { ...this.state.options, ...options };\n  }\n\n  /**\n   * Method to assert that the path exists.\n   * @return {Promise} fulfills with `true` if the path exists or rejects if the path doesn't\n   * @example\n   * const p = new Path('/path/to/here')\n   * p.exists()\n   *   .then( console.log('path exists') )\n   *   .catch( console.log('path does not exist') )\n   */\n  async exists() {\n    try {\n      await this.stat();\n      return true;\n    }\n    catch (error) {\n      return error.code === 'ENOENT'\n        ? false\n        : rethrow(error);\n    }\n  }\n\n  /**\n   * Method to fetch stats for the path.  Uses the `stat` function from `node:fs/promises`.\n   * Stats are cached internally (subject to change)\n   * @return {Promise} fulfills with path stats returned from the `stat` function\n   * @example\n   * const p = new Path('/path/to/here')\n   * p.stat()\n   *   .then( stats => console.log('path stats:', stats) )\n   *   .catch( console.log('path does not exist') )\n   */\n  async stat() {\n    const stats = await stat(this.state.path);\n    return this.state.stats = stats;\n  }\n\n  /**\n   * Method to clear internal cache of path stats (subject to change)\n   */\n  unstat() {\n    this.state.stats = undefined;\n    return this;\n  }\n}\n\nexport default Path\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Filesystem/Path.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Filesystem/Path.js",
    "static": true,
    "longname": "src/Badger/Filesystem/Path.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Default configuration options.",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"encoding\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "class",
    "name": "Path",
    "memberof": "src/Badger/Filesystem/Path.js",
    "static": true,
    "longname": "src/Badger/Filesystem/Path.js~Path",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Path}",
    "description": "The Path class implements a base class for the {@link File} and {@link Directory}\nclasses.  It implements the common functionality for representing a filesystem path.",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 110,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#constructor",
    "access": "public",
    "description": "Constructor for filesystem paths.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "file encoding"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Path} object"
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#state",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{\"path\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "path",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#path",
    "access": "public",
    "description": "Accessor method to return the filesystem path.",
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the filesystem path"
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "relativePath",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#relativePath",
    "access": "public",
    "description": "Create a path relative to the current path.",
    "examples": [
      "const p = new Path('/path/to/here')\nconst q = p.relativePath('there')          // -> /path/to/here/there\nconst r = p.relativePath('and', 'there')   // -> /path/to/here/and/there"
    ],
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "parts",
        "description": "part(s) of the filesystem path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the new path"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "options",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#options",
    "access": "public",
    "description": "Internal method to merge any options with the pre-defined options passed to the\nconstructor.  Options passed as arguments will take precedence.",
    "examples": [
      "const p = new Path('/path/to/here', { option1: 'hello' })\nconst q = p.options({ option2: 'world' })  // -> { option1: 'hello', options2: 'world' }"
    ],
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "new options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the merged options"
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "exists",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#exists",
    "access": "public",
    "description": "Method to assert that the path exists.",
    "examples": [
      "const p = new Path('/path/to/here')\np.exists()\n  .then( console.log('path exists') )\n  .catch( console.log('path does not exist') )"
    ],
    "lineNumber": 78,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with `true` if the path exists or rejects if the path doesn't"
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "stat",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#stat",
    "access": "public",
    "description": "Method to fetch stats for the path.  Uses the `stat` function from `node:fs/promises`.\nStats are cached internally (subject to change)",
    "examples": [
      "const p = new Path('/path/to/here')\np.stat()\n  .then( stats => console.log('path stats:', stats) )\n  .catch( console.log('path does not exist') )"
    ],
    "lineNumber": 100,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with path stats returned from the `stat` function"
    },
    "params": []
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "unstat",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#unstat",
    "access": "public",
    "description": "Method to clear internal cache of path stats (subject to change)",
    "lineNumber": 108,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/Badger/Library.js",
    "content": "import { DirPath } from \"./Filesystem/DirPath.js\";\nimport { addDebug } from \"./Utils/Debug.js\";\nimport { dataPath } from \"./Utils/DataPath.js\";\nimport { fail, splitList } from \"@abw/badger-utils\";\n\n/**\n * Default configuration options.\n */\nconst defaults = {\n  jsExt: 'js mjs',\n}\n\n/**\n * The Library class implements an object which can load Javascript files\n * from one or more library directories.  Files can be Javascript files\n * (with `.js` or `.mjs` extensions by default)\n */\nexport class Library extends DirPath {\n  /**\n   * Constructor for Library object.\n   * @param {String} dir - one or more directories that contain Javascript libraries\n   * @param {Object} [options] - configuration options\n   * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n   * @return {Object} the Library object\n   */\n  constructor(dir, options={}) {\n    super(dir);\n    const params = { ...defaults, ...options };\n    const exts = splitList(params.jsExt).map( ext => ext.replace(/^\\./, '') ); // remove leading '.'\n    this.state.exts = exts;\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n    this.debug(\"state: \", this.state)\n  }\n\n  /**\n   * Method to load a Javascript library in one of the library directories and with one of the `jsExt` extensions (`.js` or `.mjs` by default).\n   * Returns the exports from the library if found or throws an error if not.\n   * @param {String} uri - base part of filename\n   * @return {Object} the exports from the loaded libary\n   */\n  async library(uri) {\n    const [base, fragment] = uri.split('#', 2);\n    const dirs = await this.dirs();\n    const exts = this.state.exts;\n    for (let dir of dirs) {\n      for (let ext of exts) {\n        const file = dir.file(base + '.' + ext);\n        this.debug('looking for module %s as', base, file.path());\n        const exists = await file.exists();\n        if (exists) {\n          const load = await import(file.path());\n          this.debug('loaded %s as', file.path());\n          return fragment\n            ? dataPath(load, fragment)\n            : load;\n        }\n      }\n    }\n    fail(\"Library not found: \", uri);\n  }\n}\n\n/**\n * Function to create a new Library object\n * @param {String} dir - directory or directories containing configuration files\n * @param {Object} [options] - configuration options\n * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n * @return {Object} the Library object\n */\nexport const library = (dir, options) => new Library(dir, options);\n\nexport default library;",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Library.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Library.js",
    "static": true,
    "longname": "src/Badger/Library.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Default configuration options.",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"jsExt\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "Library",
    "memberof": "src/Badger/Library.js",
    "static": true,
    "longname": "src/Badger/Library.js~Library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Library}",
    "description": "The Library class implements an object which can load Javascript files\nfrom one or more library directories.  Files can be Javascript files\n(with `.js` or `.mjs` extensions by default)",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "src/Badger/Filesystem/DirPath.js~DirPath"
    ]
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Library.js~Library",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Library.js~Library#constructor",
    "access": "public",
    "description": "Constructor for Library object.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain Javascript libraries"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Library object"
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger/Library.js~Library",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Library.js~Library#library",
    "access": "public",
    "description": "Method to load a Javascript library in one of the library directories and with one of the `jsExt` extensions (`.js` or `.mjs` by default).\nReturns the exports from the library if found or throws an error if not.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the exports from the loaded libary"
    }
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "library",
    "memberof": "src/Badger/Library.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Library.js~library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{library}",
    "description": "Function to create a new Library object",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "directory or directories containing configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Library object"
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/Badger/Utils/Color.js",
    "content": "import { isObject } from \"@abw/badger-utils\";\n\nconst ANSIStart  = '\\u001B[';\nconst ANSIEnd    = 'm';\nconst ANSIColors = {\n  reset:    0,\n  bold:     1,\n  bright:   1,\n  dark:     2,\n  black:    0,\n  red:      1,\n  green:    2,\n  yellow:   3,\n  blue:     4,\n  magenta:  5,\n  cyan:     6,\n  grey:     7,\n  white:    8,\n  fg:      30,\n  bg:      40,\n};\n\n/**\n * Returns an ANSI escape code for a color string.  This can be a single color\n * name, e.g. `red`, `green`, etc., or a color prefixed with `bright` or `dark`,\n * e.g. `bright red`, `dark green`, etc.  An optional section argument can be\n * set to `fg` (default) to set a foreground color or `bg` for a background color.\n * @param {String} color - color name with optional modifier prefix\n * @param {String} [base='fg'] - `fg` or `bg` to set foreground or background color respectively\n * @return {String} ANSI escape code string\n * @example\n * const str = escapeCode('red')\n * @example\n * const str = escapeCode('bright red')\n * @example\n * const str = escapeCode('bright red', 'bg')\n */\nexport const ANSIescapeCode = (color, base='fg') => {\n  let   codes = [ ];\n  let   pair  = color.split(/ /, 2);\n  const hue   = pair.pop();\n  const code  = (base ? ANSIColors[base] : 0) + ANSIColors[hue];\n  codes.push(code);\n  if (pair.length) {\n    const shade = pair.length ? pair.shift() : 'dark';\n    codes.push(ANSIColors[shade])\n  }\n  // console.log('escapeCode(%s, %s) => ', color, base, codes.join(';'));\n  return ANSIStart + codes.join(';') + ANSIEnd;\n}\n\n/**\n * Returns an ANSI escape code for a color string or combination of foreground and\n * background colors.\n * @param {String|Object} colors - either a simple color name or object contain foreground and background colors\n * @param {String} [colors.fg] - foreground color\n * @param {String} [colors.fg] - background color\n * @return {String} ANSI escape code string\n * @example\n * const str = escape('red')\n * @example\n * const str = escape('bright red')\n * @example\n * const str = escape({ fg: 'bright yellow', bg: 'blue' })\n */\nexport const ANSIescape = (colors={}) => {\n  const col = isObject(colors) ? colors : { fg: colors };\n  let escapes = [ ];\n  if (col.bg) {\n    escapes.push(ANSIescapeCode(col.bg, 'bg'));\n  }\n  if (col.fg) {\n    escapes.push(ANSIescapeCode(col.fg, 'fg'));\n  }\n  return escapes.join('');\n}\n\n/**\n * Returns an ANSI escape code to reset all colors.\n * @return {String} ANSI escape reset string\n */\nexport const ANSIreset = () => ANSIescapeCode('reset', false)\n\n/**\n * Returns a function to display strings in a particular color.\n * @param {String} colors - color(s) to display string\n * @return {Function} function to display strings in the pre-defined color(s)\n */\nexport const color = (colors) =>\n  text => ANSIescape(colors) + text + ANSIreset();",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Color.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "ANSIStart",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIStart",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "ANSIEnd",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIEnd",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "ANSIColors",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIColors",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"reset\": *, \"bold\": number, \"bright\": number, \"dark\": number, \"black\": *, \"red\": number, \"green\": number, \"yellow\": number, \"blue\": number, \"magenta\": number, \"cyan\": number, \"grey\": number, \"white\": number, \"fg\": number, \"bg\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "ANSIescapeCode",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIescapeCode",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescapeCode}",
    "description": "Returns an ANSI escape code for a color string.  This can be a single color\nname, e.g. `red`, `green`, etc., or a color prefixed with `bright` or `dark`,\ne.g. `bright red`, `dark green`, etc.  An optional section argument can be\nset to `fg` (default) to set a foreground color or `bg` for a background color.",
    "examples": [
      "const str = escapeCode('red')",
      "const str = escapeCode('bright red')",
      "const str = escapeCode('bright red', 'bg')"
    ],
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "color name with optional modifier prefix"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'fg'",
        "defaultRaw": "'fg'",
        "name": "base",
        "description": "`fg` or `bg` to set foreground or background color respectively"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "ANSI escape code string"
    }
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "ANSIescape",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIescape",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescape}",
    "description": "Returns an ANSI escape code for a color string or combination of foreground and\nbackground colors.",
    "examples": [
      "const str = escape('red')",
      "const str = escape('bright red')",
      "const str = escape({ fg: 'bright yellow', bg: 'blue' })"
    ],
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": "either a simple color name or object contain foreground and background colors"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "colors.fg",
        "description": "foreground color"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "colors.fg",
        "description": "background color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "ANSI escape code string"
    }
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "ANSIreset",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIreset",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIreset}",
    "description": "Returns an ANSI escape code to reset all colors.",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "ANSI escape reset string"
    },
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "color",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~color",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{color}",
    "description": "Returns a function to display strings in a particular color.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": "color(s) to display string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "function to display strings in the pre-defined color(s)"
    }
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "src/Badger/Utils/DataPath.js",
    "content": "import { fail, hasValue, isArray, noValue } from \"@abw/badger-utils\";\n\n/**\n * Characters that can be escaped in quoted strings.\n */\nconst quotedEscapes = {\n  b: \"\\b\",\n  f: \"\\f\",\n  n: \"\\n\",\n  r: \"\\r\",\n  t: \"\\t\",\n  v: \"\\v\",\n  '\"': '\"',\n  \"'\": \"'\",\n  '\\\\': '\\\\',\n}\n\n/**\n * Match a double quoted string and expand escaped characters\n * @param {String} [string] - the string to match\n */\nexport const matchDoubleQuotedString = string => {\n  const regex = /^\"((?:\\\\[\\\\\"nrt]|.)*?)\"$/\n  const match = string.match(regex);\n  return match\n    ? match[1].replace(/\\\\([\\\\\"bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`)\n    : null;\n}\n\n/**\n * Match a single quoted string and expand escaped characters\n * @param {String} [string] - the string to match\n */\nexport const matchSingleQuotedString = string => {\n  const regex = /^'((?:\\\\[\\\\']|.)*?)'$/\n  const match = string.match(regex);\n  return match\n    ? match[1].replace(/\\\\([\\\\'bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`)\n    : null;\n}\n\n/**\n * Split a data path into component parts\n * @param {String} [path] - the path to split\n */\nexport const splitDataPath = path => {\n  // * match a slash: \\/\n  // * match a single quoted string: '...'\n  // * match a double quoted string: \"...\"\n  // * match anything else: hello world!\n  let parts = [ ];\n  const regex = /(?:(\\/)|'((?:\\\\[\\\\']|.)*?)'|\"((?:\\\\[\\\\\"nrt]|.)*?)\"|([^/?]+))(\\??)/g;\n  const matches = [...path.matchAll(regex)];\n\n  matches.map(\n    ([ , , single, double, other, optional]) => {\n      let part;\n      // console.log('match [slash:%s] [single:%s] [double:%s] [other:%s]', slash, single, double, other);\n\n      if (single) {\n        part = single.replace(/\\\\([\\\\'bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`);\n      }\n      else if (double) {\n        part = double.replace(/\\\\([\\\\\"bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`);\n      }\n      else if (other) {\n        part = other\n      }\n      if (hasValue(part)) {\n        parts.push(optional ? [part, {optional:true}] : part);\n      }\n    }\n  )\n  // console.log('MATCHED ', parts);\n\n  return parts;\n}\n\n/**\n * Traverse a data structure using a path.\n * @param {Object} [data] - the data to traverse\n * @param {String} [path] - the data path\n */\nexport const dataPath = (data, path) => {\n  let root  = data;\n  let parts = splitDataPath(path);\n  let done  = [ ];\n  // console.log('parts: ', parts);\n\n  for (let part of parts) {\n    const [word, opts] = isArray(part) ? part : [part, {}];\n    root = root[word];\n    done.push(word);\n    if (noValue(root)) {\n      if (opts.optional) {\n        return root;\n      }\n      else {\n        fail(\"No value for data at path: \", done.join('/'));\n      }\n    }\n  }\n  return root;\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/DataPath.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "quotedEscapes",
    "memberof": "src/Badger/Utils/DataPath.js",
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~quotedEscapes",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Characters that can be escaped in quoted strings.",
    "lineNumber": 6,
    "type": {
      "types": [
        "{\"b\": string, \"f\": string, \"n\": string, \"r\": string, \"t\": string, \"v\": string, \"\"\": string, \"'\": string, \"\\\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "matchDoubleQuotedString",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~matchDoubleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchDoubleQuotedString}",
    "description": "Match a double quoted string and expand escaped characters",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "string",
        "description": "the string to match"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "matchSingleQuotedString",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~matchSingleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchSingleQuotedString}",
    "description": "Match a single quoted string and expand escaped characters",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "string",
        "description": "the string to match"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "splitDataPath",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~splitDataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{splitDataPath}",
    "description": "Split a data path into component parts",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "the path to split"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "dataPath",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~dataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dataPath}",
    "description": "Traverse a data structure using a path.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to traverse"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "the data path"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/Badger/Utils/Debug.js",
    "content": "import { ANSIescape, ANSIreset } from './Color.js'\nimport { doNothing } from '@abw/badger-utils';\n\n/**\n * Returns a debugging function which is enabled by the first `enabled` argument.\n * If this is `false` then it returns a function which does nothing.  If it is\n * true then it returns a function that forwards all arguments to `console.log`.\n * An optional `prefix` be be specified to prefix each debugging line.  The\n * optional third argument `color` can be used to specify a color for the prefix.\n * @param {Boolean} enabled - is debugging enabled?\n * @param {String} [prefix] - optional prefix for debugging messages\n * @param {String|Object} [color] - a color name or object (see {@link Badger/Utils/Color})\n * @param {String} [color.fg] - foreground color\n * @param {String} [color.bg] - background color\n * @return {Function} a debugging function\n * @example\n * const debug = Debugger(true)\n * @example\n * const debug = Debugger(true, 'Debug > ')\n * @example\n * const debug = Debugger(true, 'Debug > ', 'blue')\n * @example\n * const debug = Debugger(true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })\n */\nexport function Debugger(enabled, prefix='', color) {\n  return enabled\n    ? prefix\n      ? (format, ...args) =>\n        console.log(\n          '%s' + prefix + '%s' + format,\n          color ? ANSIescape(color) : '',\n          ANSIreset(),\n          ...args,\n        )\n      : console.log.bind(console)\n    : doNothing;\n}\n\n/**\n * Creates a debugging function via {@link Debugger} and attaches it to the object\n * passed as the first argument as the `debug` function.\n * @param {Object} obj - the object to receive the `debug` function\n * @param {Boolean} enabled - is debugging enabled?\n * @param {String} [prefix] - optional prefix for debugging messages\n * @param {String|Object} [color] - a color name or object (see {@link Badger/Utils/Color})\n * @param {String} [color.fg] - foreground color\n * @param {String} [color.bg] - background color\n * @example\n * const debug = addDebug(myObject, true)\n * @example\n * const debug = addDebug(myObject, true, 'Debug > ')\n * @example\n * const debug = addDebug(myObject, true, 'Debug > ', 'blue')\n * @example\n * const debug = addDebug(myObject, true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })\n */\nexport function addDebug(obj, enabled, prefix='', color) {\n  obj.debug = Debugger(enabled, prefix, color);\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Debug.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "Debugger",
    "memberof": "src/Badger/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Debug.js~Debugger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Debugger}",
    "description": "Returns a debugging function which is enabled by the first `enabled` argument.\nIf this is `false` then it returns a function which does nothing.  If it is\ntrue then it returns a function that forwards all arguments to `console.log`.\nAn optional `prefix` be be specified to prefix each debugging line.  The\noptional third argument `color` can be used to specify a color for the prefix.",
    "examples": [
      "const debug = Debugger(true)",
      "const debug = Debugger(true, 'Debug > ')",
      "const debug = Debugger(true, 'Debug > ', 'blue')",
      "const debug = Debugger(true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })"
    ],
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "is debugging enabled?"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "prefix",
        "description": "optional prefix for debugging messages"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "color",
        "description": "a color name or object (see {@link Badger/Utils/Color})"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.fg",
        "description": "foreground color"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.bg",
        "description": "background color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "a debugging function"
    }
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "addDebug",
    "memberof": "src/Badger/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Debug.js~addDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{addDebug}",
    "description": "Creates a debugging function via {@link Debugger} and attaches it to the object\npassed as the first argument as the `debug` function.",
    "examples": [
      "const debug = addDebug(myObject, true)",
      "const debug = addDebug(myObject, true, 'Debug > ')",
      "const debug = addDebug(myObject, true, 'Debug > ', 'blue')",
      "const debug = addDebug(myObject, true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })"
    ],
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to receive the `debug` function"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "is debugging enabled?"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "prefix",
        "description": "optional prefix for debugging messages"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "color",
        "description": "a color name or object (see {@link Badger/Utils/Color})"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.fg",
        "description": "foreground color"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.bg",
        "description": "background color"
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/Badger/Utils/Misc.js",
    "content": "import process from \"node:process\"\n\n/**\n * Returns an array of the `process.argv` array from offset 2 onwards,\n * i.e. removing the node path and script name.\n * @param {Array} argv - list of arguments, defaults to `process.argv`\n * @return {Array} array of arguments excluding the first two\n */\nexport function args(argv=process.argv) {\n  return argv.slice(2);\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Misc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "args",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~args",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{args}",
    "description": "Returns an array of the `process.argv` array from offset 2 onwards,\ni.e. removing the node path and script name.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "list of arguments, defaults to `process.argv`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of arguments excluding the first two"
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/Badger/Utils/Options.js",
    "content": "import process from 'node:process';\nimport prompter from 'prompts'\nimport { Command } from 'commander';\nimport { color } from './Color.js';\nimport { hasValue } from '@abw/badger-utils';\n\nexport const defaults = {\n  verboseColor:     'magenta',\n  titleColor:       'bright yellow',\n  underlineColor:   'dark yellow',\n  infoColor:        'cyan',\n  tickColor:        'green',\n  questionColor:    'bright white',\n  answerColor:      'bright green',\n  sectionNewlines:  true\n};\n\nexport const options = async config => {\n  const vcol = color(options.verboseColor || defaults.verboseColor);\n  const command = new Command;\n\n  // set command name, description and version\n  if (config.name) {\n    command.name(config.name);\n  }\n  if (config.description) {\n    command.description(config.description);\n  }\n  if (config.version) {\n    command.version(config.version);\n  }\n\n  // define the -y / -yes and -v / --verbose options\n  if (config.yes) {\n    command.option('-y, --yes', 'Accept default answers')\n  }\n  if (config.verbose) {\n    command.option('-v, --verbose', 'Verbose output')\n  }\n  if (config.quiet) {\n    command.option('-q, --quiet', 'Quiet output')\n  }\n\n  // add in other command line options\n  config.options\n    .filter(\n      option => {\n        if (hasValue(option.arg) && ! option.arg) {\n          // allow arg: false to indicate no command line argument\n          return false;\n        }\n        if (option.title) {\n          // section break\n          return;\n        }\n        return hasValue(option.name);\n      }\n    )\n    .map(\n      option => {\n        const name    = option.name;\n        const about   = option.about;\n        const deflt   = option.default;\n        const short   = option.short;\n        const type    = option.type;\n        const pattern = option.pattern || (hasValue(type) ? `<${type}>` : undefined);\n        let string    = `--${name}`;\n        let args      = [];\n        if (hasValue(short)) {\n          string = `-${short}, ${string}`;\n        }\n        if (hasValue(pattern)) {\n          string = `${string} ${pattern}`;\n        }\n        args.push(string);\n        if (hasValue(about)) {\n          args.push(about);\n        }\n        if (hasValue(deflt)) {\n          args.push(deflt);\n        }\n        command.option(...args)\n      }\n    )\n\n  // parse the command line arguments\n  command.parse();\n  const cmdline = command.opts();\n\n  // if the -y / --yes option has been specified then accept all\n  // default answers automatically\n  const yes     = config.yes && cmdline.yes;\n  const verbose = config.verbose && cmdline.verbose;\n  const quiet   = config.quiet && cmdline.quiet;\n\n  if (yes) {\n    if (verbose && ! quiet) {\n      process.stdout.write(vcol('Accepting default answers (-y option is set)\\n'))\n    }\n    prompter.override(cmdline);\n  }\n\n  // build up the list of prompts for interactive questions\n  let prompts = [ ];\n  config.options.map(\n    option => {\n      const type     = option.type || 'text';\n      const name     = option.name;\n      const prompt   = option.prompt;\n      const noArg    = hasValue(option.arg) && ! option.arg;\n      const validate = option.validate ||\n        (option.required\n          ? value => (hasValue(value) && value.toString().length)\n            ? true\n            : (options.invalid || `You must enter a value for ${name}`)\n          : undefined\n        )\n\n      // special process for initial\n      // - use cmdline[name]\n      // - or if noArg, use option.default\n      // - if a select list and not a number, find the index\n      let initial = noArg ? option.default : cmdline[name];\n      if (type === 'select' && hasValue(initial)) {\n        if (! Number.isInteger(initial)) {\n          // console.log('looking up select option for [%s]', initial);\n          initial = option.choices?.findIndex( i => i.value === initial );\n          if (initial < 0) {\n            initial = 0;\n          }\n        }\n      }\n\n      if (hasValue(prompt)) {\n        prompts.push(\n          {\n            ...option,\n            type: (\n              hasValue(initial)\n                ? () => {\n                  yes && (quiet || answer({ question: prompt, answer: initial }));\n                  return type;\n                }\n                : type\n            ),\n            name,\n            message: prompt,\n            initial: initial,\n            validate: validate,\n          },\n        )\n      }\n      else if (option.title || option.info) {\n        prompts.push(\n          {\n            type: () => {\n              quiet || section(option);\n              return false;\n            }\n          }\n        );\n      }\n    }\n  );\n\n  // prompt the user to answer/confirm questions\n  const answers = await prompter(prompts);\n\n  return {\n    ...cmdline, ...answers\n  }\n}\n\nexport const section = option => {\n  const title = option.title;\n  const tcol  = color(option.titleColor || defaults.titleColor);\n  const ucol  = color(option.underlineColor || defaults.underlineColor);\n  const icol  = color(option.infoColor || defaults.infoColor);\n  const nl    = (hasValue(option.newlines) ? option.newlines : defaults.sectionNewlines) ? \"\\n\" : \"\";\n\n  if (title) {\n    const uline = '-'.repeat(title.length);\n    process.stdout.write(nl + tcol(title) + \"\\n\" + ucol(uline) + \"\\n\" + nl);\n  }\n\n  if (option.info) {\n    process.stdout.write(icol(option.info) + \"\\n\" + nl);\n  }\n}\n\nexport const answer = option => {\n  const tcol  = color(option.tickColor || defaults.tickColor);\n  const qcol  = color(option.questionColor || defaults.questionColor);\n  const acol  = color(option.answerColor || defaults.answerColor);\n  process.stdout.write(tcol(\"✔ \") + qcol(option.question) + \" \" + acol(option.answer) + \"\\n\");\n}\n\nexport default options",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Utils/Options.js",
    "static": true,
    "longname": "src/Badger/Utils/Options.js~defaults",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{defaults}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"verboseColor\": string, \"titleColor\": string, \"underlineColor\": string, \"infoColor\": string, \"tickColor\": string, \"questionColor\": string, \"answerColor\": string, \"sectionNewlines\": boolean}"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "options",
    "memberof": "src/Badger/Utils/Options.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Options.js~options",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{options}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{...cmdline: Object, ...answers: Object}"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "section",
    "memberof": "src/Badger/Utils/Options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Options.js~section",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{section}",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "answer",
    "memberof": "src/Badger/Utils/Options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Options.js~answer",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{answer}",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/Badger/Utils/Params.js",
    "content": "import { joinListOr, splitList, hasValue, fail } from \"@abw/badger-utils\";\n\n/**\n * Assert that a parameter object contains an item with a defined/non-null value\n * @param {Object} params={} - parameters object\n * @param {String} name - parameter that must be included\n * @return {any} the parameter value\n * @throws {Error} if the parameter is not defined or null\n * @example\n * const foo = requiredParam({ foo: 10 }, 'foo');\n */\nexport function requiredParam(params={}, name) {\n  const value = params[name];\n  if (hasValue(value)) {\n    return value;\n  }\n  else {\n    fail(\"Missing value for required parameter: \", name);\n  }\n}\n\n/**\n * Assert that a parameter object contains all specified item with a defined/non-null value\n * @param {Object} params={} - parameters object\n * @param {Array|String} names - parameters that must be included, as an Array or whitespace/comma delimited string (see {@link splitList})\n * @return {Array} the parameter values\n * @throws {Error} if any parameter is not defined or null\n * @example\n * const [foo, bar] = requiredParams({ foo: 10, bar: 20 }, 'foo bar');\n */\nexport function requiredParams(params={}, names) {\n  return splitList(names).map( name => requiredParam(params, name) );\n}\n\n/**\n * An alias for {@link requiredParams} for people who don't like typing long names (and for symmetry with {@link anyParams}))\n */\nexport const allParams=requiredParams;\n\n/**\n * Assert that a parameter object contains any of the specified items with a defined/non-null value\n * @param {Object} params={} - parameters object\n * @param {Array|String} names - parameters of which at least one must be included, as an Array or whitespace/comma delimited string (see {@link splitList})\n * @return {Array} the parameter values\n * @throws {Error} if any parameter is not defined or null\n * @example\n * const [foo, bar] = anyParams({ foo: 10, wiz: 99 }, 'foo bar');\n */\nexport function anyParams(params, names) {\n  let found = false;\n  const nlist  = splitList(names);\n  const values = nlist.map(\n    name => {\n      const value = params[name];\n      if (hasValue(value)) {\n        found = true;\n      }\n      return value;\n    }\n  );\n  return found\n    ? values\n    : fail(\"Missing value for one of: \", joinListOr(nlist));\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Params.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "requiredParam",
    "memberof": "src/Badger/Utils/Params.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Params.js~requiredParam",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParam}",
    "description": "Assert that a parameter object contains an item with a defined/non-null value",
    "examples": [
      "const foo = requiredParam({ foo: 10 }, 'foo');"
    ],
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "parameters object"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "parameter that must be included"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "the parameter value"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the parameter is not defined or null"
      }
    ]
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "requiredParams",
    "memberof": "src/Badger/Utils/Params.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Params.js~requiredParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParams}",
    "description": "Assert that a parameter object contains all specified item with a defined/non-null value",
    "examples": [
      "const [foo, bar] = requiredParams({ foo: 10, bar: 20 }, 'foo bar');"
    ],
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "parameters object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "parameters that must be included, as an Array or whitespace/comma delimited string (see {@link splitList})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the parameter values"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if any parameter is not defined or null"
      }
    ]
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "allParams",
    "memberof": "src/Badger/Utils/Params.js",
    "static": true,
    "longname": "src/Badger/Utils/Params.js~allParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{allParams}",
    "description": "An alias for {@link requiredParams} for people who don't like typing long names (and for symmetry with {@link anyParams}))",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "anyParams",
    "memberof": "src/Badger/Utils/Params.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Params.js~anyParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{anyParams}",
    "description": "Assert that a parameter object contains any of the specified items with a defined/non-null value",
    "examples": [
      "const [foo, bar] = anyParams({ foo: 10, wiz: 99 }, 'foo bar');"
    ],
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "parameters object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "parameters of which at least one must be included, as an Array or whitespace/comma delimited string (see {@link splitList})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the parameter values"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if any parameter is not defined or null"
      }
    ]
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/Badger/Utils/Prompt.js",
    "content": "import prompts from 'prompts'\n\n/**\n * Prompt user to enter a value.\n * @param {String} question - question to prompt user to answer\n * @param {Object} [options] - optional options\n * @param {String} [options.default] - default value returned if user presses RETURN\n * @return {Promise} fulfills with response to question or default value\n * @example\n * prompt(\"What is your name?\")\n *   .then( name => console.log(`Hello ${name}`) );\n * @example\n * prompt(\"What is your name?\", { default: 'Mr.Badger' })\n *   .then( name => console.log(`Hello ${name}`) );\n */\nexport const prompt = async (question, options={}) => {\n  const name = options.name || 'answer';\n  const answers = await prompts([\n    {\n      name,\n      type: options.type || 'text',\n      message: question,\n      initial: options.default,\n    },\n  ]);\n  return answers[name];\n}\n\n/**\n * Prompt user to confirm a choice.\n * @param {String} question - question to prompt user to answer\n * @param {Object} [options] - optional options\n * @param {String} [options.default] - default value returned if user presses RETURN\n * @return {Promise} fulfills with response to question or default value\n * @example\n * confirm(\"Are you sure?\")\n *   .then( yes => console.log('You said \"%s\"', yes ? 'YES' : 'NO') );\n */\nexport const confirm = async (question, options={}) =>\n  prompt(question, { ...options, type: 'confirm' });\n\nexport default prompt",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Prompt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "prompt",
    "memberof": "src/Badger/Utils/Prompt.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Prompt.js~prompt",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{prompt}",
    "description": "Prompt user to enter a value.",
    "examples": [
      "prompt(\"What is your name?\")\n  .then( name => console.log(`Hello ${name}`) );",
      "prompt(\"What is your name?\", { default: 'Mr.Badger' })\n  .then( name => console.log(`Hello ${name}`) );"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": "question to prompt user to answer"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "optional options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.default",
        "description": "default value returned if user presses RETURN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with response to question or default value"
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "confirm",
    "memberof": "src/Badger/Utils/Prompt.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Prompt.js~confirm",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{confirm}",
    "description": "Prompt user to confirm a choice.",
    "examples": [
      "confirm(\"Are you sure?\")\n  .then( yes => console.log('You said \"%s\"', yes ? 'YES' : 'NO') );"
    ],
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": "question to prompt user to answer"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "optional options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.default",
        "description": "default value returned if user presses RETURN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with response to question or default value"
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/Badger/Workspace.js",
    "content": "import { dir as fsDir } from \"./Filesystem/Directory.js\";\nimport { addDebug } from \"./Utils/Debug.js\";\nimport { Config } from \"./Config.js\";\nimport { Library } from \"./Library.js\";\nimport { fail, hasValue, splitList } from \"@abw/badger-utils\";\n\n/**\n * Default configuration options.\n */\nconst defaults = {\n  config: {\n    dir: 'config',\n  },\n  library: {\n    dir: 'lib library src components',\n  }\n}\n\n/**\n * The Workspace class implements an object which acts as a central repository\n * for your project, providing access to directories, files, configuration files,\n * Javascript libraries and components.\n */\nexport class Workspace {\n  /**\n   * Constructor for Workspace object.\n   * @param {String} dir - root directory for the workspace\n   * @param {Object} [options] - configuration options\n   * @param {Object} [options.config] - configuration options for a {@link Config} object\n   * @param {Array|String} [options.config.dir] - configuration directory or directories relative to the workspace directory\n   * @param {Object} [options.library] - configuration options for a {@link Config} object\n   * @param {Array|String} [options.library.dir] - library directory or directories relative to the workspace directory\n   * @return {Object} the Workspace object\n   */\n  constructor(dir, options={}) {\n    const rootDir = fsDir(dir);\n    const cfgDir  = splitList(options.config?.dir || defaults.config.dir).map( dir => rootDir.dir(dir) );\n    const cfgOpts = { ...defaults.config, ...(options.config||{}) };\n    const config  = new Config(cfgDir, cfgOpts);\n    const libDirs = splitList(options.library?.dir || defaults.library.dir).map( dir => rootDir.dir(dir) );\n    const libOpts = { ...defaults.library, ...(options.library||{}) };\n    const library = new Library(libDirs, libOpts);\n\n    this.state = {\n      rootDir,\n      config,\n      library\n    }\n\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n    this.debug('root dir: ', rootDir.path());\n    this.debug('config dir: ', cfgDir.map( d => d.path() ));\n    this.debug('libDirs: ', libDirs);\n    this.debug('libOpts: ', libOpts);\n  }\n\n  /**\n   * Fetch a new {@link Directory} object for a sub-directory of the workspace directory.\n   * @param {string} path - directory path relative to the workspace directory\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @return {Object} a {@link Directory} object\n   */\n  dir(path, options) {\n    this.debug(\"dir(%s, %o)\", path, options);\n    return hasValue(path)\n      ? this.state.rootDir.dir(path, options)\n      : this.state.rootDir;\n  }\n\n  /**\n   * Fetch a new {@link File} object for a file in the workspace.\n   * @param {string} path - file path relative to the workspace directory\n   * @param {Object} [options] - file configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @param {Boolean} [options.encoding=utf8] - character encoding for the file\n   * @return {Object} a {@link File} object\n   */\n  file(path, options) {\n    this.debug(\"file(%s, %o)\", path, options);\n    return this.state.rootDir.file(path, options)\n  }\n\n  /**\n   * Read the content of a file in the workspace.\n   * @param {string} path - file path relative to the workspace directory\n   * @param {Object} [options] - directory configuration options\n   * @param {Boolean} [options.codec] - codec for encoding/decoding file data\n   * @param {Boolean} [options.encoding=utf8] - character encoding for the file\n   * @return {Promise} fulfills with the file content\n   * @example\n   * file('myfile.txt').read().then( text => console.log(text) );\n   * @example\n   * file('myfile.json', { codec: 'json' }).read().then( data => console.log(data) );\n   * @example\n   * file('myfile.json').read({ codec: 'json' }).then( data => console.log(data) );\n   */\n  read(path, options) {\n    this.debug(\"read(%s, %o)\", path, options);\n    return this.file(path, options).read();\n  }\n\n  /**\n   * Writes content to a file.  If a `codec` has been specified then the content will be encoded.\n   * @param {string} path - file path relative to the workspace directory\n   * @param {String|Object} data - directory configuration options\n   * @param {Object} [options] - directory configuration options\n   * @param {Boolean} [options.codec] - codec for encoding/decoding file data\n   * @param {Boolean} [options.encoding=utf8] - codec for encoding/decoding file data\n   * @return {Promise} fulfills with the file object\n   * @example\n   * file('myfile.txt').write('Hello World');\n   * @example\n   * file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });\n   * @example\n   * file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });\n   */\n  write(path, data, options) {\n    this.debug(\"write(%s, %o, %o)\", path, data, options);\n    return this.file(path, options).write(data);\n  }\n\n  /**\n   * Fetch the configuration directory or a directory relative to it\n   * @param {string} [path] - file path relative to the configuration directory\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding data for files in the directory\n   * @param {Boolean} [options.encoding=utf8] - character encoding for files in the directory\n   * @return {Object} a {@link Directory} object\n   */\n  configDir(path, options) {\n    this.debug(\"configDir(%s, %o)\", path, options);\n    return hasValue(path)\n      ? this.state.configDir.dir(path, options)\n      : this.state.configDir;\n  }\n\n  /**\n   * Fetches configuration data from a file in the configuration directory or returns the\n   * {@link Config} object itself if no file uri is specified.\n   * @param {string} [uri] - file path relative to the configuration directory\n   * @param {Object} [defaults] - default configuration options if file isn't found\n   * @return {Promise} fulfills to the configuration data read from the file\n   * @example\n   * workspace.config('myfile').then(\n   *   config => console.log(\"Loaded myfile config: \", config)\n   * );\n   */\n  async config(uri, defaults) {\n    this.debug(\"config(%s, %o)\", uri, defaults);\n    return hasValue(uri)\n      ? this.state.config.config(uri, defaults)\n      : this.state.config;\n  }\n\n  /**\n   * Loads a Javscript library from the library directory or returns the\n   * {@link Library} object itself if no file uri is specified.\n   * @param {string} [uri] - file path relative to the library directory\n   * @return {Promise} fulfills to the configuration data read from the file\n   * @example\n   * workspace.library('mylib').then(\n   *   exports => console.log(\"Loaded mylib exports: \", exports)\n   * );\n   */\n  async library(uri) {\n    this.debug(\"library(%s, %o)\", uri);\n    return hasValue(uri)\n      ? this.state.library.library(uri)\n      : this.state.library;\n  }\n\n  /**\n   * Loads a Javscript library from the library directory and instantiates a\n   * component.\n   * @param {String} uri - component base name\n   * @param {Object} [props] - optional configuration properties\n   * @return {Promise} fulfills to a newly instantiated component\n   * @example\n   * workspace.component(mycomp').then(\n   *   component => console.log(\"Created component: \", component)\n   * );\n   */\n  async component(uri, props) {\n    const [base, fragment] = uri.split('#', 2);\n    const config  = await this.config(base, {});\n    const lib     = await this.library(config.component?.library || base);\n    const exp     = fragment || config.component?.export || 'default';\n    const compcls = lib[exp] || fail(\"No '\", exp, \"' export from component library: \", uri);\n    const comp    = new compcls(this, { ...config, ...props });\n    return comp;\n  }\n}\n\nexport const workspace = (dir, options) => new Workspace(dir, options);\n\nexport default Workspace;",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Workspace.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Workspace.js",
    "static": true,
    "longname": "src/Badger/Workspace.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Default configuration options.",
    "lineNumber": 10,
    "type": {
      "types": [
        "{\"config\": *, \"library\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "Workspace",
    "memberof": "src/Badger/Workspace.js",
    "static": true,
    "longname": "src/Badger/Workspace.js~Workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Workspace}",
    "description": "The Workspace class implements an object which acts as a central repository\nfor your project, providing access to directories, files, configuration files,\nJavascript libraries and components.",
    "lineNumber": 24,
    "interface": false
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#constructor",
    "access": "public",
    "description": "Constructor for Workspace object.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "root directory for the workspace"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.config",
        "description": "configuration options for a {@link Config} object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.config.dir",
        "description": "configuration directory or directories relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.library",
        "description": "configuration options for a {@link Config} object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.library.dir",
        "description": "library directory or directories relative to the workspace directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Workspace object"
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#state",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "{\"rootDir\": *, \"config\": *, \"library\": *}"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#dir",
    "access": "public",
    "description": "Fetch a new {@link Directory} object for a sub-directory of the workspace directory.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object"
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#file",
    "access": "public",
    "description": "Fetch a new {@link File} object for a file in the workspace.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "file configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for the file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link File} object"
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#read",
    "access": "public",
    "description": "Read the content of a file in the workspace.",
    "examples": [
      "file('myfile.txt').read().then( text => console.log(text) );",
      "file('myfile.json', { codec: 'json' }).read().then( data => console.log(data) );",
      "file('myfile.json').read({ codec: 'json' }).then( data => console.log(data) );"
    ],
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for the file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file content"
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#write",
    "access": "public",
    "description": "Writes content to a file.  If a `codec` has been specified then the content will be encoded.",
    "examples": [
      "file('myfile.txt').write('Hello World');",
      "file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });",
      "file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });"
    ],
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file object"
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "configDir",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#configDir",
    "access": "public",
    "description": "Fetch the configuration directory or a directory relative to it",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "file path relative to the configuration directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding data for files in the directory"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for files in the directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object"
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#config",
    "access": "public",
    "description": "Fetches configuration data from a file in the configuration directory or returns the\n{@link Config} object itself if no file uri is specified.",
    "examples": [
      "workspace.config('myfile').then(\n  config => console.log(\"Loaded myfile config: \", config)\n);"
    ],
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "uri",
        "description": "file path relative to the configuration directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options if file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the configuration data read from the file"
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#library",
    "access": "public",
    "description": "Loads a Javscript library from the library directory or returns the\n{@link Library} object itself if no file uri is specified.",
    "examples": [
      "workspace.library('mylib').then(\n  exports => console.log(\"Loaded mylib exports: \", exports)\n);"
    ],
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "uri",
        "description": "file path relative to the library directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the configuration data read from the file"
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "component",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#component",
    "access": "public",
    "description": "Loads a Javscript library from the library directory and instantiates a\ncomponent.",
    "examples": [
      "workspace.component(mycomp').then(\n  component => console.log(\"Created component: \", component)\n);"
    ],
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "component base name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "props",
        "description": "optional configuration properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to a newly instantiated component"
    }
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "workspace",
    "memberof": "src/Badger/Workspace.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Workspace.js~workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{workspace}",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/Badger.js",
    "content": "export * from './Badger/Component.js';\nexport * from './Badger/Codecs/index.js';\nexport * from './Badger/Config.js';\nexport * from './Badger/Filesystem/Directory.js';\nexport * from './Badger/Filesystem/File.js';\nexport * from './Badger/Filesystem/Path.js';\nexport * from './Badger/Library.js';\nexport * from './Badger/Utils/Color.js';\nexport * from './Badger/Utils/DataPath.js';\nexport * from './Badger/Utils/Debug.js';\nexport * from './Badger/Utils/Misc.js';\nexport * from './Badger/Utils/Options.js';\nexport * from './Badger/Utils/Params.js';\nexport * from './Badger/Utils/Prompt.js';\nexport * from './Badger/Workspace.js';\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "class",
    "name": "Component",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Component",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Component}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 187,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Component#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "workspace",
    "memberof": "src/Badger.js~Component",
    "static": false,
    "longname": "src/Badger.js~Component#workspace",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "props",
    "memberof": "src/Badger.js~Component",
    "static": false,
    "longname": "src/Badger.js~Component#props",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "initComponent",
    "memberof": "src/Badger.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Component#initComponent",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "codecs",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~codecs",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{codecs}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"json\": *, \"yaml\": *}"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "codec",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~codec",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{codec}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "class",
    "name": "Config",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Config}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Filesystem/DirPath.js~DirPath"
    ]
  },
  {
    "__docId__": 194,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Config#constructor",
    "access": "public",
    "description": "Constructor for Config object.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yaml json'",
        "defaultRaw": "'yaml json'",
        "name": "options.codec",
        "description": "Array or comma/whitespace delimited string of codec names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Config object"
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "firstFileWithExt",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#firstFileWithExt",
    "access": "public",
    "description": "Internal method to locate the first config file with one of a number of file extensions.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "exts",
        "description": "array of possible extensions"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "makeOptions",
        "description": "optional function to generate options for a {@link File} object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "jsFile",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#jsFile",
    "access": "public",
    "description": "Internal method to locate a Javascript configuration file with one of the `jsExt` extensions (`.js` or `.mjs` by default)",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#file",
    "access": "public",
    "description": "Internal method to locate a configuration file with one of the `codec` extensions (`.yaml` or `.json` by default)",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#config",
    "access": "public",
    "description": "Method to fetch configuration data from a file.  The file can be a Javascript file which should\nreturn the configuration data as the default export, or a YAML (`.yaml`) or JSON (`.json`) file.\nIf the file isn't found then the method returns the `defaults` data if provided, or throws an\nerror if not.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options to be used if a file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the configuration data loaded from the file"
    }
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "config",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{config}",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "class",
    "name": "Directory",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Directory",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Directory}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Path.js~Path"
    ]
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#file",
    "access": "public",
    "description": "Fetch a new {@link File} object for a file in the directory.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "file configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object"
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "directory",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#directory",
    "access": "public",
    "description": "Fetch a new {@link Directory} object for a sub-directory in the directory.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "default codec for encoding/decoding files"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "default character encoding for files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#dir",
    "access": "public",
    "description": "An alias for the {@link directory} method for lazy people",
    "lineNumber": 43,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    },
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "parent",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#parent",
    "access": "public",
    "description": "Returns a new {@link Directory} object for the parent directory",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "default codec for encoding/decoding files"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "default character encoding for files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object for the parent"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#read",
    "access": "public",
    "description": "Returns the names of the files and sub-directories in the directory",
    "lineNumber": 64,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with an array of the file and directory names"
    },
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#isEmpty",
    "access": "public",
    "description": "Determines if the directory is empty.",
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with a boolean value true (empty) or false (not empty)."
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "notEmpty",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#notEmpty",
    "access": "public",
    "description": "Determines if the directory is not empty.",
    "lineNumber": 83,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with a boolean value true (not empty) or false (empty)."
    },
    "params": []
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "empty",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#empty",
    "access": "public",
    "description": "Empty the directory.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.force",
        "description": "force removal of files and directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "recursively empty and delete sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "mkdir",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#mkdir",
    "access": "public",
    "description": "Make the directory.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "create intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "rmdir",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#rmdir",
    "access": "public",
    "description": "Remove the directory.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.empty",
        "description": "delete items in directory"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.force",
        "description": "force delete files and directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "recursively delete sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "create",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#create",
    "access": "public",
    "description": "Create the directory and any intermediate directories.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "recursively create intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#destroy",
    "access": "public",
    "description": "Empty and delete the directory.",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.empty",
        "description": "empty directory of any files and sub-directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "recursively delete sub-directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.force",
        "description": "force deletion of files and sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "mustExist",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#mustExist",
    "access": "public",
    "description": "Assert that a directory exists and optionally create it",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.create",
        "description": "create the directory and any intermediate directories if it doesn't exist - equivalent to adding `mkdir` and `recursive` options or calling {@link create}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.mkdir",
        "description": "create the directory, add the `recursive` option to create intermediate directories - equivalent to calling {@link mkdir}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "when used with `mkdir`, creates any intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "dir",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~dir",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dir}",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "cwd",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~cwd",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cwd}",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "bin",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~bin",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{bin}",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "File",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~File",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{File}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Path.js~Path"
    ]
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "directory",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~File#directory",
    "access": "public",
    "description": "Returns a new {@link Directory} object for the parent directory of the file",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object for the parent"
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~File#dir",
    "access": "public",
    "description": "An alias for the {@link directory} method for lazy people",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the parent {@link Directory} object"
    },
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ]
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~File#read",
    "access": "public",
    "description": "Reads the file content.  If a `codec` has been specified then the content is decoded.",
    "examples": [
      "file('myfile.txt').read().then( text => console.log(text) );",
      "file('myfile.json', { codec: 'json' }).read().( data => console.log(data) );",
      "file('myfile.json').read({ codec: 'json' }).then( data => console.log(data) );"
    ],
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file content"
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~File#write",
    "access": "public",
    "description": "Writes the file content.  If a `codec` has been specified then the content will be encoded.",
    "examples": [
      "file('myfile.txt').write('Hello World');",
      "file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });",
      "file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });"
    ],
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file object"
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~File#delete",
    "access": "public",
    "description": "Delete the file content.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.force",
        "description": "when true, exceptions will be ignored if path does not exist"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file object"
    }
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "file",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~file",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{file}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "class",
    "name": "Path",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Path",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Path}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 225,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#constructor",
    "access": "public",
    "description": "Constructor for filesystem paths.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "file encoding"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Path} object"
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger.js~Path",
    "static": false,
    "longname": "src/Badger.js~Path#state",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{\"path\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "path",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#path",
    "access": "public",
    "description": "Accessor method to return the filesystem path.",
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the filesystem path"
    },
    "params": []
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "relativePath",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#relativePath",
    "access": "public",
    "description": "Create a path relative to the current path.",
    "examples": [
      "const p = new Path('/path/to/here')\nconst q = p.relativePath('there')          // -> /path/to/here/there\nconst r = p.relativePath('and', 'there')   // -> /path/to/here/and/there"
    ],
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "parts",
        "description": "part(s) of the filesystem path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the new path"
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "options",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#options",
    "access": "public",
    "description": "Internal method to merge any options with the pre-defined options passed to the\nconstructor.  Options passed as arguments will take precedence.",
    "examples": [
      "const p = new Path('/path/to/here', { option1: 'hello' })\nconst q = p.options({ option2: 'world' })  // -> { option1: 'hello', options2: 'world' }"
    ],
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "new options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the merged options"
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "exists",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Path#exists",
    "access": "public",
    "description": "Method to assert that the path exists.",
    "examples": [
      "const p = new Path('/path/to/here')\np.exists()\n  .then( console.log('path exists') )\n  .catch( console.log('path does not exist') )"
    ],
    "lineNumber": 78,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with `true` if the path exists or rejects if the path doesn't"
    },
    "params": []
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "stat",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Path#stat",
    "access": "public",
    "description": "Method to fetch stats for the path.  Uses the `stat` function from `node:fs/promises`.\nStats are cached internally (subject to change)",
    "examples": [
      "const p = new Path('/path/to/here')\np.stat()\n  .then( stats => console.log('path stats:', stats) )\n  .catch( console.log('path does not exist') )"
    ],
    "lineNumber": 100,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with path stats returned from the `stat` function"
    },
    "params": []
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "unstat",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#unstat",
    "access": "public",
    "description": "Method to clear internal cache of path stats (subject to change)",
    "lineNumber": 108,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "Library",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Library}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Filesystem/DirPath.js~DirPath"
    ]
  },
  {
    "__docId__": 234,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Library",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Library#constructor",
    "access": "public",
    "description": "Constructor for Library object.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain Javascript libraries"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Library object"
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger.js~Library",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Library#library",
    "access": "public",
    "description": "Method to load a Javascript library in one of the library directories and with one of the `jsExt` extensions (`.js` or `.mjs` by default).\nReturns the exports from the library if found or throws an error if not.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the exports from the loaded libary"
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "library",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{library}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "ANSIescapeCode",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~ANSIescapeCode",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescapeCode}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "base",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "fg",
        "defaultValue": "fg"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "ANSIescape",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~ANSIescape",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescape}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "colors",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "ANSIreset",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~ANSIreset",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIreset}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "color",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~color",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{color}",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "colors",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "matchDoubleQuotedString",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~matchDoubleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchDoubleQuotedString}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "matchSingleQuotedString",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~matchSingleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchSingleQuotedString}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "splitDataPath",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~splitDataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{splitDataPath}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "dataPath",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~dataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dataPath}",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "Debugger",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~Debugger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Debugger}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "addDebug",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~addDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{addDebug}",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "args",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~args",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{args}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "argv",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~defaults",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{defaults}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"verboseColor\": string, \"titleColor\": string, \"underlineColor\": string, \"infoColor\": string, \"tickColor\": string, \"questionColor\": string, \"answerColor\": string, \"sectionNewlines\": boolean}"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "options",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~options",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{options}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{...cmdline: Object, ...answers: Object}"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "section",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~section",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{section}",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "answer",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~answer",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{answer}",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "requiredParam",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~requiredParam",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParam}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "requiredParams",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~requiredParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParams}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "name": "allParams",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~allParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{allParams}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "anyParams",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~anyParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{anyParams}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "prompt",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~prompt",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{prompt}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "question",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "confirm",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~confirm",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{confirm}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "question",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "class",
    "name": "Workspace",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Workspace}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 259,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#constructor",
    "access": "public",
    "description": "Constructor for Workspace object.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "root directory for the workspace"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.config",
        "description": "configuration options for a {@link Config} object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.config.dir",
        "description": "configuration directory or directories relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.library",
        "description": "configuration options for a {@link Config} object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.library.dir",
        "description": "library directory or directories relative to the workspace directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Workspace object"
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger.js~Workspace",
    "static": false,
    "longname": "src/Badger.js~Workspace#state",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "{\"rootDir\": *, \"config\": *, \"library\": *}"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#dir",
    "access": "public",
    "description": "Fetch a new {@link Directory} object for a sub-directory of the workspace directory.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object"
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#file",
    "access": "public",
    "description": "Fetch a new {@link File} object for a file in the workspace.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "file configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for the file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link File} object"
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#read",
    "access": "public",
    "description": "Read the content of a file in the workspace.",
    "examples": [
      "file('myfile.txt').read().then( text => console.log(text) );",
      "file('myfile.json', { codec: 'json' }).read().then( data => console.log(data) );",
      "file('myfile.json').read({ codec: 'json' }).then( data => console.log(data) );"
    ],
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for the file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file content"
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#write",
    "access": "public",
    "description": "Writes content to a file.  If a `codec` has been specified then the content will be encoded.",
    "examples": [
      "file('myfile.txt').write('Hello World');",
      "file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });",
      "file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });"
    ],
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file object"
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "configDir",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#configDir",
    "access": "public",
    "description": "Fetch the configuration directory or a directory relative to it",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "file path relative to the configuration directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding data for files in the directory"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for files in the directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object"
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Workspace#config",
    "access": "public",
    "description": "Fetches configuration data from a file in the configuration directory or returns the\n{@link Config} object itself if no file uri is specified.",
    "examples": [
      "workspace.config('myfile').then(\n  config => console.log(\"Loaded myfile config: \", config)\n);"
    ],
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "uri",
        "description": "file path relative to the configuration directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options if file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the configuration data read from the file"
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Workspace#library",
    "access": "public",
    "description": "Loads a Javscript library from the library directory or returns the\n{@link Library} object itself if no file uri is specified.",
    "examples": [
      "workspace.library('mylib').then(\n  exports => console.log(\"Loaded mylib exports: \", exports)\n);"
    ],
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "uri",
        "description": "file path relative to the library directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the configuration data read from the file"
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "component",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Workspace#component",
    "access": "public",
    "description": "Loads a Javscript library from the library directory and instantiates a\ncomponent.",
    "examples": [
      "workspace.component(mycomp').then(\n  component => console.log(\"Created component: \", component)\n);"
    ],
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "component base name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "props",
        "description": "optional configuration properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to a newly instantiated component"
    }
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "workspace",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{workspace}",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# badger-js\n\nThis is an application toolkit for Javascript projects.  It provides a number of\nclasses and utility functions to make life easier.\n\nIt is loosely based around the [Badger](https://github.com/abw/Badger) toolkit for\nPerl and was written primarily to help migrate some old Perl projects to Javascript.\n\n## Installation\n\nInstall `badger` using your favourite package manager.\n\n### npm\n\n    npm install @abw/badger\n\n### pnpm\n\n    pnpm install @abw/badger\n\n### yarn\n\n    yarn add @abw/badger\n\n## Manual\n\nRead the [Manual](https://abw.github.io/badger-js/docs/manual/) for an introduction to the\ntoolkit and examples of use.\n## API Documentation\n\nRead the [API documentation](https://abw.github.io/badger-js/docs/) for further information\nabout the classes, methods and utility functions provided.\n\n## Author\n\nAndy Wardley <abw@wardley.org>",
    "longname": "/Users/abw/js/badger-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@abw/badger\",\n  \"version\": \"1.0.9\",\n  \"description\": \"Component based framework and utility modules\",\n  \"type\": \"module\",\n  \"main\": \"dist/badger.cjs.js\",\n  \"module\": \"dist/badger.esm.js\",\n  \"exports\": \"./dist/badger.esm.js\",\n  \"author\": \"Andy Wardley\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/abw/badger-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/abw/badger-js/issues\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"lint\": \"eslint 'src/**/*'\",\n    \"docs:build\": \"esdoc\",\n    \"docs:serve\": \"serve docs\",\n    \"test\": \"ava --serial\",\n    \"pretest\": \"pnpm run build\"\n  },\n  \"keywords\": [\n    \"badger\",\n    \"project\",\n    \"framework\",\n    \"utility\"\n  ],\n  \"devDependencies\": {\n    \"@itsjamie/esdoc-cli\": \"^0.5.0\",\n    \"@itsjamie/esdoc-core\": \"^0.5.0\",\n    \"@itsjamie/esdoc-importpath-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-inject-style-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-standard-plugin\": \"^0.5.0\",\n    \"@rollup/plugin-commonjs\": \"^11.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^7.1.3\",\n    \"ava\": \"^4.3.0\",\n    \"eslint\": \"^8.20.0\",\n    \"rollup\": \"^2\",\n    \"rollup-plugin-terser\": \"^7.0.2\"\n  },\n  \"dependencies\": {\n    \"@abw/badger-utils\": \"^1.0.2\",\n    \"commander\": \"^9.4.0\",\n    \"js-yaml\": \"^4.1.0\",\n    \"prompts\": \"^2.4.2\"\n  }\n}\n",
    "longname": "/Users/abw/js/badger-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# badger\n\n<img src=\"./manual/asset/badger2.svg\" width=\"300\"/>\n\nThis is the manual for the `badger` Javascript toolkit.\n\n* [Introduction](manual/introduction.html)\n* [Filesystem Utilities](manual/filesystem.html)\n* [Data Codecs](manual/codecs.html)\n* [Configuration Files](manual/config_files.html)\n* [Library Modules](manual/library_modules.html)\n* [Data Paths](manual/data_paths.html)\n* [Workspace](manual/workspace.html)\n\n# Author\n[Andy Wardley](https://github.com/abw)\n",
    "longname": "/Users/abw/js/badger-js/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/abw/js/badger-js/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/introduction.md",
    "name": "./manual/introduction.md",
    "content": "# Introduction\n\nThe `badger` toolkit provides a range of classes and utility\nfunctions for server-side Javascript using Node.js.\n\nThere is no particular rhyme or reason as to what's included\nor excluded from the toolkit.  It contains the kind of things\nthat I've found to be useful to help build and maintain\nnon-trivial software projects.\n\n## Warning\n\nPlease note that it is *opinionated* and *selfish* software.\n\nIt is *opiniated* because it (generally speaking) only implements one way\nto do something.  It's the way that I think is best (or least bad) and\naims to please one person (me) most of the time, rather than providing\ncountless configuration options to try and please all the people all\nthe time.\n\nIt is *selfish* because I wrote it to make my own life easier and to\nsimplify and expediate the process of writing software for myself and\nmy clients.  You're welcome to use it, but please be warned that after 25+\nyears of writing, maintaining and supporting Open Source software, I no\nlonger have the time or inclination to provide free support for other\npeople.\n\nIf you find a bug or have a suggestion for a way it can be improved\nthen please feel free to raise an issue and/or submit a pull request\nfor a patch to fix the problem or add a new feature.  But don't be\nsurprised if I don't jump to apply it if it doesn't provide something\nthat I personally find useful.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/filesystem.md",
    "name": "./manual/filesystem.md",
    "content": "# Filesystem Utilities\n\nThe filesystem utilities provide a simple and convenient way to\nhandle common  directory and file operations.\n\n- [Directories](#directories)\n- [Reading Files](#reading-files)\n- [Writing Files](#writing-files)\n- [Directory Object](#directory-object)\n- [File Object](#file-object)\n\n## Directories\n\nSay you've got a script in your project which needs to read a file\nfrom a different directory.\n\nLet's assume that the script is `bin/hello.js` and you want\nto read the contents of the file in `data/hello.txt`.\n\nThe [bin](function#static-function-bin) function returns a\n[Directory](class/src/Badger/Filesystem/Directory.js~Directory)\nrepresenting the directory of the script you're running (`process.argv[1]`).\nThis is useful when you want to access files relative to the script\nlocation, regardless of where you run the script from.  The function\nis so named because the traditional location for executable files in\nUnix systems is the `bin` directory.\n\n```js\nimport { bin } from '@abw/badger'\n\n// current directory where the main execution script is located\nconst thisDir = bin();\n```\n\nYou can also use it to access the directory of the current source file,\neven if it's not the main script you're running.  In this case pass\n`import.meta.url` as an argument.\n\n```js\nimport { bin } from '@abw/badger'\n\n// current directory where the current source file is located\nconst thisDir = bin(import.meta.url);\n```\n\nThe `parent()` method returns the parent directory and on that\nyou can call the `directory()` (or `dir()` for short) method to access a\ndirectory beneath that.  In this case, we're going for the `data`\ndirectory.\n\n```js\n// directory where the data file is located\nconst dataDir = thisDir.parent().dir('data');\n```\n\n## Reading Files\n\nOnce you have a directory object you can then access the `hello.txt` file in\nthat directory and read the file content using the `read()` method.  This\nreturns a Promise which will fulfull with the file content.  Add a\n`.then()` handler to do something with the content.\n\n```js\ndataDir.file('hello.txt').read().then(\n  text => console.log(text)\n)\n```\n\nYou can chain all those function/method calls together like so:\n\n```js\nimport { bin } from '@abw/badger'\n\nbin(import.meta.url)\n  .parent()\n  .dir('data')\n  .file('hello.txt')\n  .read()\n  .then( text => console.log(text) )\n```\n\n## Writing Files\nWriting files is just as easy:\n\n```js\nimport { bin } from '@abw/badger'\n\nbin(import.meta.url)\n  .parent()\n  .dir('data')\n  .file('goodbye.txt')\n  .write('K thx bye');\n```\n\nFor further information see the documentation for the\n[Directory](class/src/Badger/Filesystem/Directory.js~Directory) and\n[File](class/src/Badger/Filesystem/File.js~File) modules.\n\n## Directory Object\n\nYou can create a [Directory](class/src/Badger/Filesystem/Directory.js~Directory) object\ndirectly.\n\n```js\nimport { Directory } from '@abw/badger'\n\nconst dir = new Directory('data');\n\ndir\n  .file('goodbye.txt')\n  .write('K thx bye');\n```\n\nOr as a shortcut you can use the [dir](function#static-function-dir) function.\n\n```js\nimport { dir } from '@abw/badger'\n\ndir('data')\n  .file('goodbye.txt')\n  .write('K thx bye');\n```\n\n## File Objects\n\nYou can also create a [File](class/src/Badger/Filesystem/File.js~File) object directly.\n\n```js\nimport { File } from '@abw/badger'\n\nconst file = new File('data/goodbye.txt')\n\nfile\n  .write('K thx bye');\n```\n\nOr as a shortcut you can use the [file](function#static-function-file) function.\n\n```js\nimport { file } from '@abw/badger'\n\nfile('data/goodbye.txt')\n  .write('K thx bye');\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/codecs.md",
    "name": "./manual/codecs.md",
    "content": "# Data Codecs\n\nCodecs are used to encode and decode data to and from serialised text.\nThe badger toolkit comes with two built-in codecs for `json` and `yaml` files.\n\n- [Read Data File](#read-data-files)\n- [Write Data Files](#write-data-files)\n\n## Read Data Files\n\nSuppose that you have a `badger.yaml` file that you want to read.\n\n```yaml\nname:   Brian\nanimal: Badger\n```\n\nAll you have to do is add the `{ codec: 'yaml' }`\noption to the `file()` function.  The `read()`\nmethod will then automatically decode the YAML text.\n\n```js\nimport { file } from '@abw/badger'\n\nfile('badger.yaml', { codec: 'yaml' })\n  .read()\n  .then(\n    data => console.log(data.name, 'is a', data.animal)\n  )\n```\n\nThis prints the string \"Brian is a Badger\" to the console.\n\nYou can also do the same thing using the `file()` method on a directory\nobject.\n\n```js\nimport { dir } from '@abw/badger'\n\ndir('data')\n  .file('badger.yaml', { codec: 'yaml' })\n  .read()\n  .then(\n    data => console.log(data.name, 'is a', data.animal)\n  )\n```\n\n## Write Data Files\n\nThe `codec` option also works when writing data.\n\n```js\nimport { file } from '@abw/badger'\n\nfile('giraffe.yaml', { codec: 'yaml' })\n  .write({\n    name:   \"Gerald\",\n    animal: \"Giraffe\",\n  })\n```\n\nYou should now have a `giraffe.yaml` file containing the following:\n\n```yaml\nname: Gerald\nanimal: Giraffe\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/config_files.md",
    "name": "./manual/config_files.md",
    "content": "# Configuration Files\n\nWe all know (hopefully) that it's considered harmful to hard-code values in code\nthat might conceivably change at some point.  Furthermore, the DRY (Don't\nRepeat Yourself) principle tells us that _\"Every piece of knowledge must\nhave a single, unambiguous, authoritative representation within a system\"_.\n\nSo it's good practice to have a single location where configuration options for your\nproject can be stored.  For a smaller projects this might be a single configuration\nfile (e.g. consider how `package.json` is used for NPM modules). For larger projects\nyou may choose to have several configuration files to achieve a better separation\nof concerns and to make them easier to manage.\n\n- [Config Object](#config-object)\n- [Config Directory](#config-directory)\n- [Multiple Config Directories](#multiple-config-directories)\n- [Loading a Config File](#loading-a-config-file)\n- [Data Path](#data-path)\n- [Configuration Options](#configuration-options)\n- [Benefits](#benefits)\n\n## Config Object\n\nThe [Config](class/src/Badger/Config.js~Config) module simplifies the process\nof reading configuration files stored in a central location.  Tell it where your\nconfiguration files are stored and then it will take care of loading them for you.\n\n```js\nimport { Config } from '@abw/badger'\n\n// look for config files in a `config` directory\nconst configDir = new Config('config')\n\n// load the badger.(js|mjs|yaml|json) file\nconfigDir.config('badger').then(\n  config => console.log(\"loading the badger config: \", config)\n)\n```\n\n## Config Directory\n\nWhen you create a new `Config` object you should specify the name of the\nconfiguration directory relative to your current location.\n\n```js\nconst configDir = new Config('config')\n```\n\nYou can specify it as a string as shown above, or using a\n[Directory](class/src/Badger/Filesystem/Directory.js~Directory) object as\nshown in the earlier examples. For example, if you have a script in the `bin`\ndirectory and you want to load configuration files from the `config` directory\nlocated alongside it then you can do something like this:\n\n```js\nimport { bin, Config } from '@abw/badger'\n\nconst configDir = new Config(\n  bin().parent().dir('config')\n)\n```\n\nOr more succinctly like this:\n\n```js\nimport { bin, Config } from '@abw/badger'\n\nconst configDir = new Config(\n  bin().dir('../config')\n)\n```\n\n## Multiple Config Directories\n\nIf you have multiple locations that you want to read configuration files\nfrom then you can specify them as an array.  The values of the array can be\neither Directory objects or strings, or a mixture of the two.  For example if\nyou want to read configuration files from your project root directory and/or a\n`config` directory then you could do this:\n\n```js\nimport { bin, Config } from '@abw/badger'\n\nconst rootDir = bin().parent()\n\nconst configDir = new Config(\n  [rootDir, rootDir.dir('config')]\n)\n```\n\n## Loading a Config File\n\nThe `config()` method expects the basename (i.e. no file extension) of a file\nin your config directory (or one of them).\n\n```js\n// load the badger.(js|mjs|yaml|json) file\nconfigDir.config('badger').then(\n  config => console.log(\"loaded the badger config: \", config)\n)\n```\n\n### Javascript Files\n\nIt will first look for a Javascript file with a `.js` or `.mjs` extension.\nIf it finds such a file then it will import it and return a Promise that\nfulfills with the exports from that file.  For example, a `config/badger.js`\nfile might look like this:\n\n```js\nexport const name=\"Brian\";\nexport const animal=\"Badger\";\n```\n\n### YAML or JSON Files\n\nIf it doesn't find a Javascript file then it will look for a `yaml` or `json`\nfile.  For example, a `config/badger.yaml` might look like this:\n\n```yaml\nname:   Brian\nanimal: Badger\n```\n\nOr a `config/badger.json` might look like this:\n\n```json\n{\n  \"name\":   \"Brian\",\n  \"animal\": \"Badger\"\n}\n```\n\nIn all the above cases, the same data will be returned in the Promise.\n\n```js\nconfigDir.config('badger').then(\n  // prints \"Brian is a Badger\"\n  config => console.log(config.name, \"is a\", config.animal)\n)\n```\n\n## Data Path\n\nIf you want to access a particular piece of data from the loaded configuration\nthen you can specify it as a data path fragment following the file name.  Separate the\nfile name and data path fragment with a `#`.\n\n```js\n// load the default export from the badger.(js|mjs) file\nconfigDir.config('badger#name').then(\n  name => console.log(\"The badger is called\", name)\n)\n```\n\nSee the [Data Paths](./manual/data_paths) documentation for further information.\n\n## Configuration Options\n\nThe `jsExt` configuration option can be used to change the file extensions\nthat are recognised for Javascript files (`['js', 'mjs']` by default) and\nthe `codec` option can be used to specify which codecs can be used for\ndata files (`['yaml', 'json']` by default).  Note that the names of the\n`codec` correspond to the file extensions, e.g. a file must have a `.yaml`\nextension to be reconised and read using the `yaml` codec.\n\nFor example, if you only want to look for `.js` Javascript files and `.json`\ndata files then you would set the options like this:\n\n```js\nconst configDir = new Config(\n  rootDir.dir('config'),\n  {\n    jsExt: ['js'],\n    codec: ['json'],\n  };\n)\n```\n\nOr, given that you now only have one value for each of `jsExt` and `codecs` you\ncould do it like this:\n\n```js\nconst configDir = new Config(\n  rootDir.dir('config'),\n  {\n    jsExt: 'js',\n    codec: 'json',\n  };\n)\n```\n\n## Benefits\n\nIn case it's not immediately obvious, one key benefit of using the Config module to\nload configuration files is that it allows you to change the format that you're\nusing at any time.  You might start off with a simple `.json` JSON file then later decide\nthat you want to change to a `.yaml` YAML file so that you can add some comments and whitespace\nto make it more readable.  Further down the line you might need to perform some\ncomputation and switch it to a `.js` Javascript file.\n\nOf course you still need to re-write your configuration file but you don't need to worry about\nupdating any code that's loading it.  When you add a `badger.yaml` file to the configuration\ndirectory it will immediately take precedence over the `badger.json` file, or if you add a\n`badger.js` file it will take precedence over both the `badger.yaml` and `badger.json` files.\n\nThis is why you should **NOT** provide the file extension in the name you pass to the\n`config()` method.  Leave it up to the `config()` method to work that out for you\nand do the right thing.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/library_modules.md",
    "name": "./manual/library_modules.md",
    "content": "# Library Modules\n\nThe [Library](class/src/Badger/Library.js~Library) module is similar to the\n[Config](class/src/Badger/Config.js~Config) module except that it's designed to\nwork only with Javascript files.\n\n- [Library Object](#library-object)\n- [Library Directory](#library-directory)\n- [Multiple Library Directories](#multiple-library-directories)\n- [Loading a Library Module](#loading-a-library-module)\n- [Data Path](#data-path)\n- [Configuration Options](#configuration-options)\n\n## Library Object\n\nCreate a library directory specifying one or more directories where your code is located.\nThen call the `library()` method to load a `.js` or `.mjs` module from any of those\ndirectories.\n\n```js\nimport { Library } from '@abw/badger'\n\nconst library = new Library(\n  ['src', 'lib']\n)\n\n// load first of src/Example.js, src/Example.mjs, lib/Example.js or lib/Example.mjs\nlibrary.library('Example').then(\n  exports => {\n    // do something with your code exports here\n  }\n)\n```\n\nThe Promise returned fulfills to an object containing all the exports from your library\nmodule.\n\n## Library Directory\n\nWhen you create a new `Library` object you should specify the name of the\nlibrary directory or directories relative to your current location.\n\n```js\nconst library = new Library('library')\n```\n\nYou can specify it as a string as shown above, or using a\n[Directory](class/src/Badger/Filesystem/Directory.js~Directory) object as\nshown in the earlier examples. For example, if you have a script in the `bin`\ndirectory and you want to load configuration files from the `config` directory\nlocated alongside it then you can do something like this:\n\n```js\nimport { bin, Library } from '@abw/badger'\n\nconst library = new Library(\n  bin(import.meta.url).parent().dir('library')\n)\n```\n\nOr more succinctly like this:\n\n```js\nimport { bin, Library } from '@abw/badger'\n\nconst library = new Library(\n  bin(import.meta.url).dir('../library')\n)\n```\n## Multiple Library Directories\n\nIf you have multiple locations that you want to read library files\nfrom then you can specify them as an array.  The values of the array can be\neither Directory objects or strings, or a mixture of the two.  For example if\nyou want to load modules from the `src` and `lib` directories then you could do this:\n\n```js\nconst rootDir = bin(import.meta.url).parent()\n\nconst library = new Library(\n  [rootDir.dir('src'), rootDir.dir('lib')]\n)\n```\n\n## Loading a Library Module\n\nThe `library()` method expects the basename (i.e. no file extension) of a file\nin your library directory (or one of them).\n\n```js\n// load the badger.(js|mjs) file\nlibrary.library('badger').then(\n  badger => {\n    // do something with whatever badger exports here\n  }\n)\n```\n\nIt returns a Promise which fulfills with all the exports from your module.\n\n## Data Path\n\nIf you want to access a particular export then you can specify it as a data path\nfragment following the file name.  Separate the file name and data path fragment\nwith a `#`.\n\n```js\n// load the default export from the badger.(js|mjs) file\nlibrary.library('badger#default').then(\n  badger => {\n    // do something with the default badger export here\n  }\n)\n```\n\nSee the [Data Paths](./manual/data_paths) documentation for further information.\n\n## Configuration Options\n\nThe `jsExt` configuration option can be used to change the file extensions\nthat are recognised for Javascript files (`['js', 'mjs']` by default).\n\nFor example, if you only want to look for `.js` Javascript files and `.json`\ndata files then you would set the options like this:\n\n```js\nconst libary = new Library(\n  rootDir.dir('lib'),\n  {\n    jsExt:  ['js'],\n  };\n)\n```\n\nOr, given that you now only have one value for `jsExt` you\ncould do it like this:\n\n```js\nconst library = new Library(\n  rootDir.dir('lib'),\n  {\n    jsExt:  'js',\n  };\n)\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/data_paths.md",
    "name": "./manual/data_paths.md",
    "content": "# Data Paths\n\nBoth the [Config](class/src/Badger/Config.js~Config) and\n[Library](class/src/Badger/Library.js~Library) modules provide a\nconvenient way to drill down into the data returned to fetch a particular item.\n\nThis uses the [dataPath()](function#static-function-dataPath) function which\nnagivates data using a URL-like path.  The data path syntax is intentionally simple and\nlimited.  If you want to do anything more complicated then you should consider using JSON\nPath instead.\n\n- [Config Files](#config-files)\n- [Optional Items](#optional-items)\n- [Quoted Path Segments](#quoted-path-segments)\n- [Javascript Library Exports](#javascript-library-exports)\n- [Navigating Your Own Data](#navigating-your-own-data)\n\n## Config Files\n\nSuppose you have the following configuration file in `config/zoo.yaml`.\n\n```yaml\nanimals:\n  aardvark:\n    name: Alan\n  badger:\n    name: Brian\n  cat:\n    name: Colin\n```\n\nIf you have a Config object setup to read files from the `config` directory then\nyou can read the whole of the `zoo` data set like this:\n\n```js\nuse { Config } from '@abw/badger'\n\nconst configDir = new Config('config');\n\nconfigDir.config('zoo').then(\n  zoo => console.log(\"The badger is called \", zoo.animals.badger.name) // The badger is called Brian\n)\n```\n\nIf you're only looking for a particular item, in this case the name of the badger,\nthen you can add a data path fragment to the file name, like this:\n\n```js\nconfigDir.config('zoo#animals/badger/name').then(\n  name => console.log(\"The badger is called \", name) // The badger is called Brian\n)\n```\n\nEach element of the data path should be separated by a slash.  You can specify\ntext elements to access items in an object (as shown above) or numerical elements to\naccess items in an array.\n\nFor example, if you have some data that looks like this:\n\n```json\n{\n  \"numbers\": [\"zero\", \"one\", \"two\", \"forty-two\"],\n  \"friends\": [\n    { \"name\": \"Ford Prefect\" },\n    { \"name\": \"Zaphod Beeblebrox\" },\n    { \"name\": \"Trillian\" },\n  ]\n}\n```\n\nThen a data path of `numbers/3` would return \"forty-two\", or `friends/0/name` would return\n\"Ford Prefect\".\n\n## Optional Items\n\nIf an item specified in the path is `undefined` or `null` then an error is thrown.  Using the\nabove data this would happen if you tried to access `friends/12/name` or `friends/0/birthday`\n\nYou can add an question mark to the end of a path segment to make it silently return `undefined`\ninstead, e.g. `friends/12?/name` or `friends/0/birthday?`.  Note that the question mark can only\nappear at the end of a segment.  If it appears anywhere else then it is assumed to be the same\nthing as `?/`.  e.g. `foo?bar` is the same as `foo?/bar`.\n\n## Quoted Path Segments\n\nYou can enclose any segment in single or double quotes if you happen to have data keys that include\n`/` or `?` characters in them.  For example, `question/\"What is the answer?\"` to access the value\n\"42\" in the following data:\n\n```json\n{\n  \"question\": {\n    \"What is the answer?\": 42\n  }\n}\n```\n\nIf you want to make a quoted part optional then add the question mark after the closing quote, e.g.\n`question/\"What is the question?\"` would throw an error because it is not defined, but can be specified\nas `question/\"What is the question?\"?` to instead return `undefined`.\n\nNote that the usual Javascript rules for quoted strings apply.  e.g. use `\\n` to encode a newline,\n`\\\"` to escape a double quote inside a double quoted string, and so on.\n\n## Javascript Library Exports\n\nAll of the above applies to the data returned by the Config and Library modules when loaded\nJavascript files.  By default they will return an object containing all exported values from the\nJavascript file.  If you want to access the `default` export, for example, then you can add a `#default` suffix\nto the file basename when loading it.\n\n```js\nlibraryDir.library('Example#default').then(\n  default => {\n    // do something with the default export here\n  }\n)\n```\n\nAny other named export can be accessed in the same way.\n\n```js\nlibraryDir.library('Example#anotherExport').then(\n  anotherExport => {\n    // do something with anotherExport here\n  }\n)\n```\n\n## Navigating Your Own Data\n\nYou can use the `dataPath()` function to navigate your own data.\n\n```js\nimport { dataPath } from '@abw/badger'\n\nconst animals = {\n  aardvark: {\n    name: \"Alan\"\n  }\n  badger: {\n    name: \"Brian\"\n  },\n  cat: {\n    name: \"Colin\"\n  }\n}\n\nconst badgerName = dataPath(data, 'badger/name');\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/workspace.md",
    "name": "./manual/workspace.md",
    "content": "# Workspace\n\nThe [Workspace](class/src/Badger/Workspace.js~Workspace) module provides a\nconvenient \"hub\" for accessing directories, files, configuration files,\nlibraries and other resources for your project.\n\n- [Workspace Directory](#workspace-directory)\n- [Directories](#directories)\n- [Files](#files)\n- [Configuration Files](#configuration-files)\n- [Javscript Libraries](#javascript-libraries)\n- [Configuration Options](#configuration-options)\n\n## Workspace Directory\n\nCreate a new Workspace object and provide it with the workspace directory.\nThis is usually the top-level directory of your project.\n\n```js\nimport { Workspace } from '@abw/badger'\n\nconst workspace = new Workspace('/path/to/project')\n```\n\nYou can specify an absolute directory path, the path of a directory relative to\nyour current location, or a [Directory](class/src/Badger/Directory.js~Directory)\ndirectory object.  The [bin](function#static-function-bin) function can be used to\ndetermine the directory in which a script is located.\n\nFor example, if you have a `bin/myscript.js` file, you can create a workspace\nfor the parent directory like so:\n\n```js\nimport { bin, Workspace } from '@abw/badger'\n\nconst workspace = new Workspace(\n  bin().parent()\n)\n```\n\n## Directories\n\nThe [dir()](class/src/Badger.js~Workspace#instance-method-dir) method is a shortcut\nto fetch a [Directory](class/src/Badger/Filesystem/Directory.js~Directory) object for any\ndirectory relative to the workspace directory.\n\n```js\nconst tmpdir = workspace.dir('tmp');\n```\n\n## Files\n\nThe [file()](class/src/Badger.js~Workspace#instance-method-file) method is a shortcut\nto fetch a [File](class/src/Badger/Filesystem/File.js~File) object for any\nfile relative to the workspace directory.\n\n```js\nconst wibble = workspace.file('tmp/wibble.log');\n```\n\n## Configuration Files\n\nThe [config()](class/src/Badger.js~Workspace#instance-method-config) method is a shortcut\nto load data from a configuration file using the [Config](class/src/Badger/Config.js~Config)\nmodule.\n\nThe default location for configuration files is the `config` directory relative to the workspace\ndirectory.  See [configuration options](#config-options) below for details on how to change this.\n\n```js\nworkspace.config('animals').then(\n  data => console.log(\"Data from the config/animals(.js|.mjs|.yaml|.json) file\", data)\n)\n```\n\n## Javascript Libraries\n\nThe [library()](class/src/Badger.js~Workspace#instance-method-library) method is a shortcut\nto load a Javascript library from one of the library directories using the\n[Library](class/src/Badger/Library.js~Library) module.\n\nThe default search path for libary files is any of the `lib`, `library`, `src` or `components`\ndirectories relative to the workspace directory.  See [configuration options](#config-options)\nbelow for details on how to change this.\n\n```js\nworkspace.config('animals').then(\n  data => console.log(\"Data from the config/animals(.js|.mjs|.yaml|.json) file\", data)\n)\n```\n\n## Javascript Components\n\nThe [component(uri, props)](class/src/Badger.js~Workspace#instance-method-component) method can\nbe called to create a new component object.  The `uri` argument should be the base name of the\ncomponent.\n\nIf there is a configuration file matching the `uri` in the configuration directory\nthen it will be loaded (via the\n[config(uri)](class/src/Badger.js~Workspace#instance-method-config) method) and used as\nthe default configuration for the object.  The optional `props` can be defined\nto refine this configuration.\n\nThe corresponding library file will then be loaded from the library directory\n(via the [library(uri)](class/src/Badger.js~Workspace#instance-method-library) method).\nThis should have a default export which is the component class, implemented as a subclass\nof the [Component](class/src/Badger/Component.js~Component) base class.\n\nAn instance of the component class is then instantiated, passing a reference to the\nworkspace and the configuration options.\n\n```js\nworkspace.component('Hello').then(\n  hello => console.log('loaded hello component: ', hello)\n)\n```\n\nThe above example is roughly equivalent to:\n\n```js\nworkspace.config('Hello').then(\n  config => workspace.library('Hello')\n    .then( library => new library.default(workspace, config) )\n    .then( hello => console.log('loaded Hello component: ', hello) )\n)\n```\n\n## Configuration Options\n\nThe `config` option can be provided to configure the [Config](class/src/Badger/Config.js~Config)\nobject that the workspace used to load configuration files.\n\n```js\nconst workspace = new Workspace(\n  '/path/to/workspace',\n  {\n    config: {\n        dir:   'cfg',\n        codec: 'json',\n        jsExt: 'js',\n    }\n  }\n)\n```\n\nYou can specify multiple directories to search for configuration files.\n\n```js\nconst workspace = new Workspace(\n  '/path/to/workspace',\n  {\n    config: {\n      dir:   ['cfg', 'config'],\n    }\n  }\n)\n```\n\nThe `library` option can be provided to configure the [Library](class/src/Badger/Library.js~Library)\nobject that the workspace used to load Javascript libraries.\n\n```js\nconst workspace = new Workspace(\n  '/path/to/workspace',\n  {\n    library: {\n      dir:   'lib',\n      jsExt: 'js',\n    }\n  }\n)\n```\n\nYou can specify multiple directories to search for Javascript libraries.\n\n```js\nconst workspace = new Workspace(\n  '/path/to/workspace',\n  {\n    library: {\n      dir: ['src', 'lib'],\n    }\n  }\n)\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/command_line.md",
    "name": "./manual/command_line.md",
    "content": "# Command Line Options\n\nThe [options](function#static-function-options) function provides an\nintegrated way to process command line arguments (using [commander](https://www.npmjs.com/package/commander))\nand prompt the user for any missing configuration options (using [prompts](https://www.npmjs.com/package/prompts)).\n\n- [Simple Example](#simple-example)\n- [Special Options](#special-options)\n- [Sections](#sections)\n- [Generated Configuration](#generated-configuration)\n\n## Simple Example\n\nThis simple example shows how options are specified.\n\n```js\nconst config = await options({\n  name: 'options.js',\n  version: '0.0.1',\n  description: 'Example showing command line options and prompting',\n  options: [\n    {\n      name:     'database',\n      short:    'd',\n      about:    'Database',\n      type:     'text',\n      prompt:   'What is the name of the database?',\n      required: true,\n    },\n    {\n      name:     'username',\n      short:    'u',\n      about:    'Username',\n      type:     'text',\n      prompt:   'What is the database username?',\n    },\n    {\n      name:     'password',\n      short:    'p',\n      about:    'Password',\n      type:     'password',\n      prompt:   'What is the database password?',\n    },\n  ]\n});\nconsole.log('config: ', config);\n```\n\nRun the script with the `-h` option to view the help.\n\n```sh\nUsage: options.js [options]\n\nExample showing command line options and prompting\n\nOptions:\n  -V, --version              output the version number\n  -d, --database &lt;text&gt;      Database\n  -u, --username &lt;text&gt;      Username\n  -p, --password &lt;password&gt;  Password\n  -h, --help                 display help for command\n```\n\nThe `name`, `version` and `description` are optional items that will be displayed in\nthe help.\n\nThe `options` array defines the valid options.  Each can have a `name` which is\naccessible as the \"long option\", e.g. `--database`, `--username` and `--password`,\nand a `short` option, e.g. `-d`, `-u` and `-p`.  The `about` item provides information\nabout the option.\n\nAfter processing the command line arguments, the function will prompt the user to\nconfirm any values specified as arguments, and enter any missing values.  The `prompt`\nitem is used to prompt the user.  If this is omitted then the user will not be prompted\nto enter a value.  The `type` can be set to one of the [types provided by the prompts\npackage](https://www.npmjs.com/package/prompts#-types).  The `required` option can be\nset `true` to force the user to enter a value.\n\n```sh\n$ node examples/options.js -d wibble\n✔ What is the name of the database? … wibble\n✔ What is the database username? …\n✔ What is the database password? …\n```\n\n## Special Options\n\nThe `yes` configuration item can be specified to have the `-y` / `--yes`\noptional automatically added.  When this is specifed on the command line the\nfunction will automatically accept the default answer.\n\nThe `verbose` configuration item can be specified to have the `-v` / `--verbose`\noptional automatically added.  When this is specifed on the command line the\nfunction will print additional output.\n\nThe `quiet` configuration item can be specified to have the `-q` / `--quiet`\noptional automatically added.  When this is specifed on the command line the\nfunction will suppress any optional output.\n\n```js\nconst config = await options({\n  name: 'options.js',\n  description: 'CLI to test command line options and prompting',\n  version: '0.0.1',\n  yes: true,\n  verbose: true,\n  quiet: true,\n  options: [\n    ...\n  ]\n})\n```\n\n```sh\n$ node examples/options.js -h\nUsage: options.js [options]\n\nExample showing command line options and prompting\n\nOptions:\n  -V, --version              output the version number\n  -y, --yes                  Accept default answers\n  -v, --verbose              Verbose output\n  -q, --quiet                Quiet output\n  -d, --database <text>      Database\n  -u, --username <text>      Username\n  -p, --password <password>  Password\n  -h, --help                 display help for command\n```\n\n## Sections\n\nIf you have lots of questions then you might want to break them up\ninto sections.  Add an item to the `options` array like the following\nto print a section title and information.  Both `title` and `info` are\noptional, so you can omit either one.\n\n```js\noptions: [\n  {\n    title: \"Configuration Options\",\n    info:  \"Please answer the following questions.\\nPress RETURN to accept defaults.\"\n  },\n  ...\n]\n```\n\nThis generates the following output:\n\n```sh\nConfiguration Options\n---------------------\n\nPlease answer the following questions.\nPress RETURN to accept defaults.\n```\n\n## Generated Configuration\n\nThe function returns a Promise which fulfills to an object containing the configuration\nvalues.  Each key will be the `name` of the option, and the corresponding value will be\nthat read from the command line or by prompting the user.",
    "static": true,
    "access": "public"
  }
]