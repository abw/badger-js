[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Badger/Codecs/Json.js",
    "content": "/**\n * Function to encode JSON\n * @param {Object} data - The data to encode as JSON text\n * @return {String} a JSON encoded string\n * @example\n * encode({ message: 'Hello World' })\n */\nconst encode = data => JSON.stringify(data);\n\n/**\n * Function to decode JSON\n * @param {String} text - The JSON text to decode\n * @return {Object|Array} the decoded object or array\n * @example\n * decode(\"{ message: 'Hello World' }\")\n */\nconst decode = text => JSON.parse(text);\n\n/**\n * An object containing the JSON `encode` and `decode` functions\n */\nexport const jsonCodec = { encode, decode };\n\nexport default jsonCodec\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Codecs/Json.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "encode",
    "memberof": "src/Badger/Codecs/Json.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/Json.js~encode",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Function to encode JSON",
    "examples": [
      "encode({ message: 'Hello World' })"
    ],
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to encode as JSON text"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a JSON encoded string"
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "decode",
    "memberof": "src/Badger/Codecs/Json.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/Json.js~decode",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Function to decode JSON",
    "examples": [
      "decode(\"{ message: 'Hello World' }\")"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The JSON text to decode"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array"
      ],
      "spread": false,
      "description": "the decoded object or array"
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "jsonCodec",
    "memberof": "src/Badger/Codecs/Json.js",
    "static": true,
    "longname": "src/Badger/Codecs/Json.js~jsonCodec",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{jsonCodec}",
    "description": "An object containing the JSON `encode` and `decode` functions",
    "lineNumber": 22,
    "type": {
      "types": [
        "{\"encode\": *, \"decode\": *}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/Badger/Codecs/Yaml.js",
    "content": "// simple wrapper around JSON load/dump\nimport yaml from 'js-yaml';\n\n/**\n * Function to encode YAML\n * @param {Object} data - The data to encode as YAML text\n * @return {String} a YAML encoded string\n * @example\n * encode({ message: 'Hello World' })\n */\nconst encode = data => yaml.dump(data);\n\n/**\n * Function to decode YAML\n * @param {String} text - The YAML text to decode\n * @return {Object|Array} the decoded object or array\n * @example\n * decode(\"message: Hello World\")\n */\nconst decode = text => yaml.load(text);\n\n/**\n * An object containing the YAML `encode` and `decode` functions\n */\nexport const yamlCodec = { encode, decode };\n\nexport default yamlCodec\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Codecs/Yaml.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "encode",
    "memberof": "src/Badger/Codecs/Yaml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/Yaml.js~encode",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Function to encode YAML",
    "examples": [
      "encode({ message: 'Hello World' })"
    ],
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to encode as YAML text"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "a YAML encoded string"
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "decode",
    "memberof": "src/Badger/Codecs/Yaml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/Yaml.js~decode",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Function to decode YAML",
    "examples": [
      "decode(\"message: Hello World\")"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The YAML text to decode"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array"
      ],
      "spread": false,
      "description": "the decoded object or array"
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "yamlCodec",
    "memberof": "src/Badger/Codecs/Yaml.js",
    "static": true,
    "longname": "src/Badger/Codecs/Yaml.js~yamlCodec",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{yamlCodec}",
    "description": "An object containing the YAML `encode` and `decode` functions",
    "lineNumber": 25,
    "type": {
      "types": [
        "{\"encode\": *, \"decode\": *}"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/Badger/Codecs/index.js",
    "content": "import json from './Json.js'\nimport yaml from './Yaml.js'\n\n/**\n * Codecs provide a consistent encode()/decode() interface for serialising\n * and de-serialising data.  This standard naming convention makes it possible\n * for the ../Filesystem/File.js module to support a \"codec\" option for\n * files. When this option is set the file.read() and file.write() methods\n * automatically handle the translation to and from the serialised format\n * using a codec object returned by the codec() function below.  The codec\n * name can be specified in any case, e.g. \"Yaml\", \"YAML\", \"yaml\", \"YaML\",\n * etc., and it will be converted to lower case.\n */\n\n/**\n * Lookup table for codecs\n */\nexport const codecs = {\n  json, yaml\n};\n\n/**\n * Function to fetch a codec\n * @param {string} name - The title of the code, in any case, e.g. \"yaml\", \"YAML\", \"Yaml\"\n */\nexport const codec = name => codecs[\n  name.toLowerCase()\n];\n\nexport default codecs\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Codecs/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "codecs",
    "memberof": "src/Badger/Codecs/index.js",
    "static": true,
    "longname": "src/Badger/Codecs/index.js~codecs",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{codecs}",
    "description": "Lookup table for codecs",
    "lineNumber": 18,
    "type": {
      "types": [
        "{\"json\": *, \"yaml\": *}"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "codec",
    "memberof": "src/Badger/Codecs/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Codecs/index.js~codec",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{codec}",
    "description": "Function to fetch a codec",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The title of the code, in any case, e.g. \"yaml\", \"YAML\", \"Yaml\""
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/Badger/Component.js",
    "content": "import { addDebug } from \"./Utils/Debug.js\";\n\nexport class Component {\n  constructor(workspace, props={}) {\n    this.workspace = workspace;\n    this.props = props;\n    addDebug(this, props.debug, props.debugPrefix, props.debugColor);\n    this.initComponent(props);\n  }\n  initComponent() {\n    // stub for subclasses\n  }\n}\n\nexport default Component",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Component.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "Component",
    "memberof": "src/Badger/Component.js",
    "static": true,
    "longname": "src/Badger/Component.js~Component",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Component}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 61,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Component.js~Component#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "workspace",
    "memberof": "src/Badger/Component.js~Component",
    "static": false,
    "longname": "src/Badger/Component.js~Component#workspace",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "props",
    "memberof": "src/Badger/Component.js~Component",
    "static": false,
    "longname": "src/Badger/Component.js~Component#props",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "initComponent",
    "memberof": "src/Badger/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Component.js~Component#initComponent",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/Badger/Config.js",
    "content": "import { DirPath } from './Filesystem/DirPath.js';\nimport { splitList } from './Utils/Text.js'\nimport { doNothing, fail } from './Utils/Misc.js';\nimport { addDebug } from './Utils/Debug.js';\nimport { dataPath } from '../Badger/Utils/DataPath.js';\n\nconst defaults = {\n  codec: ['yaml', 'json'],\n  jsExt: ['js', 'mjs'],\n};\n\n/**\n * The Config class implements an object which can load configuration\n * files from a configuration directory.  Files can be Javascript files\n * (with `.js` or `.mjs` extensions by default) or data files using any\n * of the standard codecs (`.yaml` or `.json` by default).\n */\nexport class Config extends DirPath {\n  /**\n   * Constructor for Config object.\n   * @param {String} dir - one or more directories that contain configuration files\n   * @param {Object} [options] - configuration options\n   * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n   * @param {Array|String} [options.codec='yaml json'] - Array or comma/whitespace delimited string of codec names\n   * @return {Object} the Config object\n   */\n  constructor(dir, options={}) {\n    super(dir);\n    const params = { ...defaults, ...options };\n    this.state.codec = splitList(params.codec),\n    this.state.jsExt = splitList(params.jsExt),\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n  }\n\n  /**\n   * Internal method to locate the first config file with one of a number of file extensions.\n   * @param {String} uri - base part of filename\n   * @param {Array} [exts] - array of possible extensions\n   * @param {Function} [makeOptions] - optional function to generate options for a {@link File} object\n   * @return {Object} the {@link File} object if it exists or `undefined` if not\n   */\n  async firstFileWithExt(uri, exts, makeOptions=doNothing) {\n    const dirs = await this.dirs();\n\n    for (let dir of dirs) {\n      for (let ext of exts) {\n        const path = uri + '.' + ext;\n        const file = dir.file(path, makeOptions(uri, ext));\n        this.debug('looking for config file: ', file.path());\n        if (await file.exists()) {\n          this.debug('config file exists: ', file.path());\n          return file;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Internal method to locate a Javascript configuration file with one of the `jsExt` extensions (`.js` or `.mjs` by default)\n   * @param {String} uri - base part of filename\n   * @return {Object} the {@link File} object if it exists or `undefined` if not\n   */\n  async jsFile(uri) {\n    return await this.firstFileWithExt(uri, this.state.jsExt);\n  }\n\n  /**\n   * Internal method to locate a configuration file with one of the `codec` extensions (`.yaml` or `.json` by default)\n   * @param {String} uri - base part of filename\n   * @return {Object} the {@link File} object if it exists or `undefined` if not\n   */\n  async file(uri) {\n    return await this.firstFileWithExt(uri, this.state.codec, (uri, codec) => ({ codec }));\n  }\n\n  /**\n   * Method to fetch configuration data from a file.  The file can be a Javascript file which should\n   * return the configuration data as the default export, or a YAML (`.yaml`) or JSON (`.json`) file.\n   * If the file isn't found then the method returns the `defaults` data if provided, or throws an\n   * error if not.\n   * @param {String} uri - base part of filename\n   * @param {Object} [defaults] - default configuration options to be used if a file isn't found\n   * @return {Object} the configuration data loaded from the file\n   */\n  async config(uri, defaults) {\n    const [base, fragment] = uri.split('#', 2);\n    let jsFile, file, data;\n\n    // first look for a JS file, e.g. <uri>.js, <uri>.mjs\n    if ((jsFile = await this.jsFile(base))) {\n      data = await import(jsFile.path());\n    }\n    // then for a config file with a codec extension, e.g. <uri>.yaml, <uri>.yaml\n    else if ((file = await this.file(base))) {\n      data = await file.read();\n    }\n    // failing that use any default value\n    else if (defaults) {\n      data = defaults;\n    }\n    // anything else is a big pile of fail\n    else {\n      return fail(\"No configuration file for \" + base);\n    }\n    // resolve any data path in a #fragment\n    return fragment\n      ? dataPath(data, fragment)\n      : data;\n  }\n}\n\n/**\n * Function to create a new Config object\n * @param {String} dir - directory or directories containing configuration files\n * @param {Object} [options] - configuration options\n * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n * @param {Array|String} [options.codec='yaml json'] - Array or comma/whitespace delimited string of codec names\n * @return {Object} the Config object\n */\nexport const config = (dir, options) => new Config(dir, options)\n\nexport default Config\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Config.js",
    "static": true,
    "longname": "src/Badger/Config.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"codec\": *, \"jsExt\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "Config",
    "memberof": "src/Badger/Config.js",
    "static": true,
    "longname": "src/Badger/Config.js~Config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Config}",
    "description": "The Config class implements an object which can load configuration\nfiles from a configuration directory.  Files can be Javascript files\n(with `.js` or `.mjs` extensions by default) or data files using any\nof the standard codecs (`.yaml` or `.json` by default).",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "src/Badger/Filesystem/DirPath.js~DirPath"
    ]
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Config.js~Config#constructor",
    "access": "public",
    "description": "Constructor for Config object.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yaml json'",
        "defaultRaw": "'yaml json'",
        "name": "options.codec",
        "description": "Array or comma/whitespace delimited string of codec names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Config object"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "firstFileWithExt",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#firstFileWithExt",
    "access": "public",
    "description": "Internal method to locate the first config file with one of a number of file extensions.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "exts",
        "description": "array of possible extensions"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "makeOptions",
        "description": "optional function to generate options for a {@link File} object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "jsFile",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#jsFile",
    "access": "public",
    "description": "Internal method to locate a Javascript configuration file with one of the `jsExt` extensions (`.js` or `.mjs` by default)",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#file",
    "access": "public",
    "description": "Internal method to locate a configuration file with one of the `codec` extensions (`.yaml` or `.json` by default)",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#config",
    "access": "public",
    "description": "Method to fetch configuration data from a file.  The file can be a Javascript file which should\nreturn the configuration data as the default export, or a YAML (`.yaml`) or JSON (`.json`) file.\nIf the file isn't found then the method returns the `defaults` data if provided, or throws an\nerror if not.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options to be used if a file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the configuration data loaded from the file"
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "config",
    "memberof": "src/Badger/Config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Config.js~config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{config}",
    "description": "Function to create a new Config object",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "directory or directories containing configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yaml json'",
        "defaultRaw": "'yaml json'",
        "name": "options.codec",
        "description": "Array or comma/whitespace delimited string of codec names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Config object"
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/Badger/Filesystem/DirPath.js",
    "content": "import { dir as fsDir } from \"./Directory.js\";\nimport { splitList } from \"../Utils/Text.js\";\n\n/**\n * The DirPath class implements a base class for objects that\n * can search one or more directories.\n */\nexport class DirPath {\n  /**\n   * Constructor for filesystem paths.\n   * @param {String|Array} dir - comma/whitespace delimited string containing directories, or a {@link Directory} object or Array of {@link Directory} objects\n   * @return {Object} the {@link DirPath} object\n   */\n  constructor(dir) {\n    const dirs = this.initDirs(dir);\n    this.state = {\n      dirs\n    }\n  }\n\n  /**\n   * Internal method to initialise the directories.  If the `dir` argument is a string then it will be split on\n   * commas and/or whitespace and converted to an array of {@link Directory} objects.  If the `dir` is a\n   * {@link Directory} object then it will be wrapped in an array.  If the `dir` argument is already an array\n   * (presumably of {@link Directory} objects) then no further processing is required.\n   * @param {String|Array} dir - comma/whitespace delimited string containing directories, or a {@link Directory} object or Array of {@link Directory} objects\n   * @return {Array} an array of {@link Directory} objects\n   */\n  initDirs(dir) {\n    return splitList(dir).map( dir => fsDir(dir) );\n  }\n\n  /**\n   * Internal method to return an array of the directories in the `dirs` argument passed to the constructor that\n   * actually exist in the filesystem.  The checks to determine if the directories exists are only carried\n   * out the first time the method is called.  Subsequent calls will return the cached value stored in\n   * `this.state.dirsExist`.\n   * @return {Array} an array of {@link Directory} objects that exist\n   */\n  async dirs() {\n    return this.state.dirsExist\n      || ( this.state.dirsExist = await this.dirsExist() );\n  }\n\n  /**\n   * Internal method to determine which of the directories in the `dirs` argument passed to the constructor\n   * actually exist in the filesystem.\n   * @return {Array} an array of {@link Directory} objects that exist\n   */\n  async dirsExist() {\n    const dirs = this.state.dirs;\n    const exists = await Promise.all(\n      dirs.map( d => d.exists() )\n    );\n    return dirs.filter((value, index) => exists[index]);\n  }\n}\n\nexport default DirPath",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Filesystem/DirPath.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "class",
    "name": "DirPath",
    "memberof": "src/Badger/Filesystem/DirPath.js",
    "static": true,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{DirPath}",
    "description": "The DirPath class implements a base class for objects that\ncan search one or more directories.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 76,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#constructor",
    "access": "public",
    "description": "Constructor for filesystem paths.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "comma/whitespace delimited string containing directories, or a {@link Directory} object or Array of {@link Directory} objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link DirPath} object"
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#state",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"dirs\": *}"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "initDirs",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#initDirs",
    "access": "public",
    "description": "Internal method to initialise the directories.  If the `dir` argument is a string then it will be split on\ncommas and/or whitespace and converted to an array of {@link Directory} objects.  If the `dir` is a\n{@link Directory} object then it will be wrapped in an array.  If the `dir` argument is already an array\n(presumably of {@link Directory} objects) then no further processing is required.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "comma/whitespace delimited string containing directories, or a {@link Directory} object or Array of {@link Directory} objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "an array of {@link Directory} objects"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "dirs",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#dirs",
    "access": "public",
    "description": "Internal method to return an array of the directories in the `dirs` argument passed to the constructor that\nactually exist in the filesystem.  The checks to determine if the directories exists are only carried\nout the first time the method is called.  Subsequent calls will return the cached value stored in\n`this.state.dirsExist`.",
    "lineNumber": 40,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "an array of {@link Directory} objects that exist"
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "dirsExist",
    "memberof": "src/Badger/Filesystem/DirPath.js~DirPath",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/DirPath.js~DirPath#dirsExist",
    "access": "public",
    "description": "Internal method to determine which of the directories in the `dirs` argument passed to the constructor\nactually exist in the filesystem.",
    "lineNumber": 50,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "an array of {@link Directory} objects that exist"
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/Badger/Filesystem/Directory.js",
    "content": "import process from 'node:process';\nimport path from 'node:path';\nimport Path from './Path.js'\nimport { file } from './File.js'\nimport { fail } from '../Utils/Misc.js';\nimport { rm, mkdir, rmdir, readdir } from 'node:fs/promises'\n\n/**\n * The Directory class implements a wrapper around a filesystem\n * directory.\n */\nclass Directory extends Path {\n  /**\n   * Fetch a new {@link File} object for a file in the directory.\n   * @param {string} path - file path\n   * @param {Object} [options] - file configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @return {Object} the {@link File} object\n   */\n  file(path, options) {\n    this.debug(\"file(%s, %o)\", path, options);\n    return file(this.relativePath(path), this.options(options));\n  }\n\n  /**\n   * Fetch a new {@link Directory} object for a sub-directory in the directory.\n   * @param {string} path - directory path\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @return {Object} the {@link Directory} object\n   */\n  directory(path, options) {\n    this.debug(\"directory(%s, %o)\", path, options);\n    return dir(this.relativePath(path), this.options(options));\n  }\n\n  /**\n   * An alias for the {@link directory} method for lazy people\n   * @return {Object} the {@link Directory} object\n   */\n  dir(path, options) {\n    this.debug(\"dir(%s, %o)\", path, options);\n    return this.directory(path, options);\n  }\n\n  /**\n   * Returns a new {@link Directory} object for the parent directory\n   * @param {Object} [options] - directory configuration options\n   * @param {Boolean} [options.codec] - codec for encoding/decoding file data\n   * @return {Object} a {@link Directory} object for the parent\n   */\n  parent(options) {\n    this.debug(\"parent()\");\n    return this.directory('..', options);\n  }\n\n  /**\n   * Returns the names of the files and sub-directories in the directory\n   * @return {Promise} fulfills with an array of the file and directory names\n   */\n  async read() {\n    this.debug(\"read()\");\n    return await readdir(this.path());\n  }\n\n  /**\n   * Determines if the directory is empty.\n   * @return {Promise} fulfills with a boolean value true (empty) or false (not empty).\n   */\n  async isEmpty() {\n    this.debug(\"isEmpty()\");\n    const entries = await this.read();\n    return entries.length === 0;\n  }\n\n  /**\n   * Determines if the directory is not empty.\n   * @return {Promise} fulfills with a boolean value true (not empty) or false (empty).\n   */\n  async notEmpty() {\n    this.debug(\"notEmpty()\");\n    const empty = await this.isEmpty();\n    return !empty;\n  }\n\n  /**\n   * Empty the directory.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.force] - force removal of files and directories\n   * @param {Boolean} [options.recursive] - recursively empty and delete sub-directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  async empty(options={}) {\n    this.debug(\"empty(%o)\", options);\n    if (await this.exists() && await this.notEmpty()) {\n      await rm(this.path(), options);\n    }\n    return this;\n  }\n\n  /**\n   * Make the directory.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.recursive] - create intermediate directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  async mkdir(options={}) {\n    this.debug(\"mkdir(%o)\", options);\n    const exists = await this.exists();\n    if (! exists) {\n      await mkdir(this.path(), options);\n    }\n    return this;\n  }\n\n  /**\n   * Remove the directory.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.empty] - delete items in directory\n   * @param {Boolean} [options.force] - force delete files and directories\n   * @param {Boolean} [options.recursive] - recursively delete sub-directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  async rmdir(options={}) {\n    this.debug(\"rmdir(%o)\", options);\n    if (options.empty) {\n      await this.empty(options);\n    }\n    if (await this.exists()) {\n      await rmdir(this.path());\n    }\n    return this;\n  }\n\n  /**\n   * Create the directory and any intermediate directories.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.recursive=true] - recursively create intermediate directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  create(options={ recursive: true }) {\n    this.debug(\"create(%o)\", options);\n    return this.mkdir(options);\n  }\n\n  /**\n   * Empty and delete the directory.\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.empty=true] - empty directory of any files and sub-directories\n   * @param {Boolean} [options.recursive=true] - recursively delete sub-directories\n   * @param {Boolean} [options.force=true] - force deletion of files and sub-directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  destroy(options={ empty: true, recursive: true, force: true }) {\n    this.debug(\"destroy(%o)\", options);\n    return this.rmdir(options);\n  }\n\n  /**\n   * Assert that a directory exists and optionally create it\n   * @param {Object} [options] - configuration options\n   * @param {Boolean} [options.create] - create the directory and any intermediate directories if it doesn't exist - equivalent to adding `mkdir` and `recursive` options or calling {@link create}\n   * @param {Boolean} [options.mkdir] - create the directory, add the `recursive` option to create intermediate directories - equivalent to calling {@link mkdir}\n   * @param {Boolean} [options.recursive] - when used with `mkdir`, creates any intermediate directories\n   * @return {Promise} fulfills to the {@link Directory} object\n   */\n  async mustExist(options={}) {\n    this.debug(\"mustExist(%o)\", options);\n    if (await this.exists()) {\n      return this;\n    }\n    if (options.mkdir) {\n      return this.mkdir(options);\n    }\n    if (options.create) {\n      return this.create();\n    }\n    fail(\"Directory does not exist: \", this.path());\n  }\n}\n\n/**\n * Function to create a new {@link Directory} object\n * @param {string} path - directory path\n * @param {Object} [options] - configuration options\n * @param {Boolean} [options.codec] - a codec for encoding/decoding files\n * @return {Object} the {@link Directory} object\n */\nexport const dir = (path, options) => {\n  return new Directory(path, options);\n}\n\n/**\n * Function to create a new {@link Directory} object for the current working directory\n * @param {Object} [options] - configuration options\n * @param {Boolean} [options.codec] - a codec for encoding/decoding files\n * @return {Object} the {@link Directory} object\n */\nexport const cwd = options => {\n  return dir(process.cwd(), options);\n}\n\n/**\n * Function to create a new {@link Directory} object for the directory of a JS source file\n * @param {string} url - module url - from `import.meta.url`\n * @param {Object} [options] - configuration options\n * @param {Boolean} [options.codec] - a codec for encoding/decoding files\n * @return {Object} the {@link Directory} object\n */\nexport const bin = (url, options) => {\n  return dir(\n    path.dirname(url.replace(/^file:\\/\\//, '')),\n    options\n  );\n}\n\nexport default Directory\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Filesystem/Directory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "dir",
    "memberof": "src/Badger/Filesystem/Directory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Filesystem/Directory.js~dir",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dir}",
    "description": "Function to create a new {@link Directory} object",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "a codec for encoding/decoding files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "cwd",
    "memberof": "src/Badger/Filesystem/Directory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Filesystem/Directory.js~cwd",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cwd}",
    "description": "Function to create a new {@link Directory} object for the current working directory",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "a codec for encoding/decoding files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "bin",
    "memberof": "src/Badger/Filesystem/Directory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Filesystem/Directory.js~bin",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{bin}",
    "description": "Function to create a new {@link Directory} object for the directory of a JS source file",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "module url - from `import.meta.url`"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "a codec for encoding/decoding files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "Directory",
    "memberof": "src/Badger/Filesystem/Directory.js",
    "static": true,
    "longname": "src/Badger/Filesystem/Directory.js~Directory",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "Directory",
    "description": "The Directory class implements a wrapper around a filesystem\ndirectory.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/Badger/Filesystem/Path.js~Path"
    ]
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#file",
    "access": "public",
    "description": "Fetch a new {@link File} object for a file in the directory.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "file configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "directory",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#directory",
    "access": "public",
    "description": "Fetch a new {@link Directory} object for a sub-directory in the directory.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#dir",
    "access": "public",
    "description": "An alias for the {@link directory} method for lazy people",
    "lineNumber": 41,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    },
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "parent",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#parent",
    "access": "public",
    "description": "Returns a new {@link Directory} object for the parent directory",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object for the parent"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#read",
    "access": "public",
    "description": "Returns the names of the files and sub-directories in the directory",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with an array of the file and directory names"
    },
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#isEmpty",
    "access": "public",
    "description": "Determines if the directory is empty.",
    "lineNumber": 70,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with a boolean value true (empty) or false (not empty)."
    },
    "params": []
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "notEmpty",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#notEmpty",
    "access": "public",
    "description": "Determines if the directory is not empty.",
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with a boolean value true (not empty) or false (empty)."
    },
    "params": []
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "empty",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#empty",
    "access": "public",
    "description": "Empty the directory.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.force",
        "description": "force removal of files and directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "recursively empty and delete sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "mkdir",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#mkdir",
    "access": "public",
    "description": "Make the directory.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "create intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "rmdir",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#rmdir",
    "access": "public",
    "description": "Remove the directory.",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.empty",
        "description": "delete items in directory"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.force",
        "description": "force delete files and directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "recursively delete sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "create",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#create",
    "access": "public",
    "description": "Create the directory and any intermediate directories.",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "recursively create intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#destroy",
    "access": "public",
    "description": "Empty and delete the directory.",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.empty",
        "description": "empty directory of any files and sub-directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "recursively delete sub-directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.force",
        "description": "force deletion of files and sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "mustExist",
    "memberof": "src/Badger/Filesystem/Directory.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Directory.js~Directory#mustExist",
    "access": "public",
    "description": "Assert that a directory exists and optionally create it",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.create",
        "description": "create the directory and any intermediate directories if it doesn't exist - equivalent to adding `mkdir` and `recursive` options or calling {@link create}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.mkdir",
        "description": "create the directory, add the `recursive` option to create intermediate directories - equivalent to calling {@link mkdir}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "when used with `mkdir`, creates any intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/Badger/Filesystem/File.js",
    "content": "import path from 'node:path'\nimport Path from './Path.js'\nimport { dir } from './Directory.js'\nimport { codec } from '../Codecs/index.js'\nimport { readFile, writeFile, rm } from 'node:fs/promises'\n\n/**\n * The File class implements a wrapper around a filesystem\n * file.\n */\nclass File extends Path {\n  /**\n   * Returns a new {@link Directory} object for the parent directory of the file\n   * @param {Object} [options] - directory configuration options\n   * @param {Boolean} [options.codec] - codec for encoding/decoding file data\n   * @return {Object} a {@link Directory} object for the parent\n   */\n  directory(options) {\n    return dir(path.dirname(this.state.path), options);\n  }\n\n  /**\n   * An alias for the {@link directory} method for lazy people\n   * @return {Object} the parent {@link Directory} object\n   */\n  dir(...args) {\n    return this.directory(...args);\n  }\n\n  /**\n   * Reads the file content.  If a `codec` has been specified then the content is decoded.\n   * @param {Object} [options] - directory configuration options\n   * @param {Boolean} [options.codec] - codec for encoding/decoding file data\n   * @return {String|Object} the file content\n   * @example\n   * const text = file('myfile.txt').read();\n   * @example\n   * const data = file('myfile.json', { codec: 'json' }).read();\n   * @example\n   * const data = file('myfile.json').read({ codec: 'json' });\n   */\n  read(options) {\n    const opts = this.options(options);\n    const file = readFile(this.state.path, opts);\n    return opts.codec\n      ? file.then(text => codec(opts.codec).decode(text))\n      : file;\n  }\n\n  /**\n   * Writes the file content.  If a `codec` has been specified then the content will be encoded.\n   * @param {String|Object} data - directory configuration options\n   * @param {Object} [options] - directory configuration options\n   * @param {Boolean} [options.codec] - codec for encoding/decoding file data\n   * @example\n   * file('myfile.txt').write('Hello World');\n   * @example\n   * file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });\n   * @example\n   * file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });\n   */\n  write(data, options) {\n    const opts = this.options(options);\n    const text = opts.codec\n      ? codec(opts.codec).encode(data)\n      : data;\n    return writeFile(this.state.path, text, opts).then( () => this );\n  }\n\n  async delete(options) {\n    await rm(this.state.path, options);\n    return this;\n  }\n}\n\n/**\n * Function to create a new {@link File} object for a file\n * @param {String} path - file path\n * @param {Object} [options] - configuration options\n * @param {Boolean} [options.codec] - a codec for encoding/decoding files\n * @return {Object} the {@link File} object\n */\nexport const file = (path, options) => {\n  return new File(path, options);\n}\n\nexport default File\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Filesystem/File.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "file",
    "memberof": "src/Badger/Filesystem/File.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Filesystem/File.js~file",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{file}",
    "description": "Function to create a new {@link File} object for a file",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "a codec for encoding/decoding files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object"
    }
  },
  {
    "__docId__": 101,
    "kind": "class",
    "name": "File",
    "memberof": "src/Badger/Filesystem/File.js",
    "static": true,
    "longname": "src/Badger/Filesystem/File.js~File",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "File",
    "description": "The File class implements a wrapper around a filesystem\nfile.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/Badger/Filesystem/Path.js~Path"
    ]
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "directory",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#directory",
    "access": "public",
    "description": "Returns a new {@link Directory} object for the parent directory of the file",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object for the parent"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#dir",
    "access": "public",
    "description": "An alias for the {@link directory} method for lazy people",
    "lineNumber": 26,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the parent {@link Directory} object"
    },
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#read",
    "access": "public",
    "description": "Reads the file content.  If a `codec` has been specified then the content is decoded.",
    "examples": [
      "const text = file('myfile.txt').read();",
      "const data = file('myfile.json', { codec: 'json' }).read();",
      "const data = file('myfile.json').read({ codec: 'json' });"
    ],
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String",
        "Object"
      ],
      "spread": false,
      "description": "the file content"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#write",
    "access": "public",
    "description": "Writes the file content.  If a `codec` has been specified then the content will be encoded.",
    "examples": [
      "file('myfile.txt').write('Hello World');",
      "file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });",
      "file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });"
    ],
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Badger/Filesystem/File.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/File.js~File#delete",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/Badger/Filesystem/Path.js",
    "content": "import path from 'node:path';\nimport { stat } from 'node:fs/promises'\nimport { rethrow } from '../Utils/Misc.js';\nimport { addDebug } from '../Utils/Debug.js';\n\nconst defaultOptions = {\n  encoding: 'utf8'\n}\n\n/**\n * The Path class implements a base class for the {@link File} and {@link Directory}\n * classes.  It implements the common functionality for representing a filesystem path.\n */\nexport class Path {\n  /**\n   * Constructor for filesystem paths.\n   * @param {string} path - file path\n   * @param {Object} [options] - configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @return {Object} the {@link Path} object\n   */\n  constructor(path, options={}) {\n    // allow path/file/directory to be constructed from an existing object\n    if (path instanceof Path) {\n      path = path.path();\n    }\n    this.state = { path, options: { ...defaultOptions, ...options } };\n    addDebug(this, options.debug, options.debugPrefix || 'Path', options.debugColor);\n  }\n\n  /**\n   * Accessor method to return the filesystem path.\n   * @return {String} the filesystem path\n   */\n  path() {\n    return this.state.path;\n  }\n\n  /**\n   * Create a path relative to the current path.\n   * @param {String[]} parts - part(s) of the filesystem path\n   * @return {String} the new path\n   * @example\n   * const p = new Path('/path/to/here')\n   * const q = p.relativePath('there')          // -> /path/to/here/there\n   * const r = p.relativePath('and', 'there')   // -> /path/to/here/and/there\n   */\n  relativePath(...parts) {\n    return path.join(this.state.path, ...parts);\n  }\n\n  /**\n   * Internal method to merge any options with the pre-defined options passed to the\n   * constructor.  Options passed as arguments will take precedence.\n   * @param {Object} options - new options\n   * @return {Object} the merged options\n   * @example\n   * const p = new Path('/path/to/here', { option1: 'hello' })\n   * const q = p.options({ option2: 'world' })  // -> { option1: 'hello', options2: 'world' }\n   */\n  options(options={}) {\n    return { ...this.state.options, ...options };\n  }\n\n  /**\n   * Method to assert that the path exists.\n   * @return {Promise} fulfills with `true` if the path exists or rejects if the path doesn't\n   * @example\n   * const p = new Path('/path/to/here')\n   * p.exists()\n   *   .then( console.log('path exists') )\n   *   .catch( console.log('path does not exist') )\n   */\n  async exists() {\n    try {\n      await this.stat();\n      return true;\n    }\n    catch (error) {\n      return error.code === 'ENOENT'\n        ? false\n        : rethrow(error);\n    }\n  }\n\n  /**\n   * Method to fetch stats for the path.  Uses the `stat` function from `node:fs/promises`.\n   * Stats are cached internally (subject to change)\n   * @return {Promise} fulfills with path stats returned from the `stat` function\n   * @example\n   * const p = new Path('/path/to/here')\n   * p.stat()\n   *   .then( stats => console.log('path stats:', stats) )\n   *   .catch( console.log('path does not exist') )\n   */\n  async stat() {\n    const stats = await stat(this.state.path);\n    return this.state.stats = stats;\n  }\n\n  /**\n   * Method to clear internal cache of path stats (subject to change)\n   */\n  unstat() {\n    this.state.stats = undefined;\n    return this;\n  }\n}\n\nexport default Path\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Filesystem/Path.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "defaultOptions",
    "memberof": "src/Badger/Filesystem/Path.js",
    "static": true,
    "longname": "src/Badger/Filesystem/Path.js~defaultOptions",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"encoding\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "class",
    "name": "Path",
    "memberof": "src/Badger/Filesystem/Path.js",
    "static": true,
    "longname": "src/Badger/Filesystem/Path.js~Path",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Path}",
    "description": "The Path class implements a base class for the {@link File} and {@link Directory}\nclasses.  It implements the common functionality for representing a filesystem path.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 110,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#constructor",
    "access": "public",
    "description": "Constructor for filesystem paths.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Path} object"
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#state",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"path\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "path",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#path",
    "access": "public",
    "description": "Accessor method to return the filesystem path.",
    "lineNumber": 35,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the filesystem path"
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "relativePath",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#relativePath",
    "access": "public",
    "description": "Create a path relative to the current path.",
    "examples": [
      "const p = new Path('/path/to/here')\nconst q = p.relativePath('there')          // -> /path/to/here/there\nconst r = p.relativePath('and', 'there')   // -> /path/to/here/and/there"
    ],
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "parts",
        "description": "part(s) of the filesystem path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the new path"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "options",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#options",
    "access": "public",
    "description": "Internal method to merge any options with the pre-defined options passed to the\nconstructor.  Options passed as arguments will take precedence.",
    "examples": [
      "const p = new Path('/path/to/here', { option1: 'hello' })\nconst q = p.options({ option2: 'world' })  // -> { option1: 'hello', options2: 'world' }"
    ],
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "new options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the merged options"
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "exists",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#exists",
    "access": "public",
    "description": "Method to assert that the path exists.",
    "examples": [
      "const p = new Path('/path/to/here')\np.exists()\n  .then( console.log('path exists') )\n  .catch( console.log('path does not exist') )"
    ],
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with `true` if the path exists or rejects if the path doesn't"
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "stat",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#stat",
    "access": "public",
    "description": "Method to fetch stats for the path.  Uses the `stat` function from `node:fs/promises`.\nStats are cached internally (subject to change)",
    "examples": [
      "const p = new Path('/path/to/here')\np.stat()\n  .then( stats => console.log('path stats:', stats) )\n  .catch( console.log('path does not exist') )"
    ],
    "lineNumber": 96,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with path stats returned from the `stat` function"
    },
    "params": []
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "unstat",
    "memberof": "src/Badger/Filesystem/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Filesystem/Path.js~Path#unstat",
    "access": "public",
    "description": "Method to clear internal cache of path stats (subject to change)",
    "lineNumber": 104,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/Badger/Library.js",
    "content": "import { DirPath } from \"./Filesystem/DirPath.js\";\nimport { addDebug } from \"./Utils/Debug.js\";\nimport { splitList } from \"./Utils/Text.js\";\nimport { fail } from \"./Utils/Misc.js\";\nimport { dataPath } from \"./Utils/DataPath.js\";\n\nconst defaults = {\n  jsExt: 'js mjs',\n}\n\n/**\n * The Library class implements an object which can load Javascript files\n * from one or more library directories.  Files can be Javascript files\n * (with `.js` or `.mjs` extensions by default)\n */\nexport class Library extends DirPath {\n  /**\n   * Constructor for Library object.\n   * @param {String} dir - one or more directories that contain Javascript libraries\n   * @param {Object} [options] - configuration options\n   * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n   * @return {Object} the Library object\n   */\n  constructor(dir, options={}) {\n    super(dir);\n    const params = { ...defaults, ...options };\n    const exts = splitList(params.jsExt).map( ext => ext.replace(/^\\./, '') ); // remove leading '.'\n    this.state.exts = exts;\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n    this.debug(\"state: \", this.state)\n  }\n\n  /**\n   * Method to load a Javascript library in one of the library directories and with one of the `jsExt` extensions (`.js` or `.mjs` by default).\n   * Returns the exports from the library if found or throws an error if not.\n   * @param {String} uri - base part of filename\n   * @return {Object} the exports from the loaded libary\n   */\n  async library(uri) {\n    const [base, fragment] = uri.split('#', 2);\n    const dirs = await this.dirs();\n    const exts = this.state.exts;\n    for (let dir of dirs) {\n      for (let ext of exts) {\n        const file = dir.file(base + '.' + ext);\n        this.debug('looking for module %s as', base, file.path());\n        const exists = await file.exists();\n        if (exists) {\n          const load = await import(file.path());\n          this.debug('loaded %s as', file.path());\n          return fragment\n            ? dataPath(load, fragment)\n            : load;\n        }\n      }\n    }\n    fail(\"Library not found: \", uri);\n  }\n}\n\n/**\n * Function to create a new Library object\n * @param {String} dir - directory or directories containing configuration files\n * @param {Object} [options] - configuration options\n * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n * @return {Object} the Library object\n */\nexport const library = (dir, options) => new Library(dir, options);\n\nexport default library;",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Library.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Library.js",
    "static": true,
    "longname": "src/Badger/Library.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"jsExt\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "Library",
    "memberof": "src/Badger/Library.js",
    "static": true,
    "longname": "src/Badger/Library.js~Library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Library}",
    "description": "The Library class implements an object which can load Javascript files\nfrom one or more library directories.  Files can be Javascript files\n(with `.js` or `.mjs` extensions by default)",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "src/Badger/Filesystem/DirPath.js~DirPath"
    ]
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Library.js~Library",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Library.js~Library#constructor",
    "access": "public",
    "description": "Constructor for Library object.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain Javascript libraries"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Library object"
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger/Library.js~Library",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Library.js~Library#library",
    "access": "public",
    "description": "Method to load a Javascript library in one of the library directories and with one of the `jsExt` extensions (`.js` or `.mjs` by default).\nReturns the exports from the library if found or throws an error if not.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the exports from the loaded libary"
    }
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "library",
    "memberof": "src/Badger/Library.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Library.js~library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{library}",
    "description": "Function to create a new Library object",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "directory or directories containing configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Library object"
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/Badger/Utils/Color.js",
    "content": "import { isObject } from \"./Misc.js\";\n\nconst ANSIStart  = '\\u001B[';\nconst ANSIEnd    = 'm';\nconst ANSIColors = {\n  reset:    0,\n  bold:     1,\n  bright:   1,\n  dark:     2,\n  black:    0,\n  red:      1,\n  green:    2,\n  yellow:   3,\n  blue:     4,\n  magenta:  5,\n  cyan:     6,\n  grey:     7,\n  white:    8,\n  fg:      30,\n  bg:      40,\n};\n\n/**\n * Returns an ANSI escape code for a color string.  This can be a single color\n * name, e.g. `red`, `green`, etc., or a color prefixed with `bright` or `dark`,\n * e.g. `bright red`, `dark green`, etc.  An optional section argument can be\n * set to `fg` (default) to set a foreground color or `bg` for a background color.\n * @param {String} color - color name with optional modifier prefix\n * @param {String} [base='fg'] - `fg` or `bg` to set foreground or background color respectively\n * @return {String} ANSI escape code string\n * @example\n * const str = escapeCode('red')\n * @example\n * const str = escapeCode('bright red')\n * @example\n * const str = escapeCode('bright red', 'bg')\n */\nexport const ANSIescapeCode = (color, base='fg') => {\n  let   codes = [ ];\n  let   pair  = color.split(/ /, 2);\n  const hue   = pair.pop();\n  const code  = (base ? ANSIColors[base] : 0) + ANSIColors[hue];\n  codes.push(code);\n  if (pair.length) {\n    const shade = pair.length ? pair.shift() : 'dark';\n    codes.push(ANSIColors[shade])\n  }\n  // console.log('escapeCode(%s, %s) => ', color, base, codes.join(';'));\n  return ANSIStart + codes.join(';') + ANSIEnd;\n}\n\n/**\n * Returns an ANSI escape code for a color string or combination of foreground and\n * background colors.\n * @param {String|Object} colors - either a simple color name or object contain foreground and background colors\n * @param {String} [colors.fg] - foreground color\n * @param {String} [colors.fg] - background color\n * @return {String} ANSI escape code string\n * @example\n * const str = escape('red')\n * @example\n * const str = escape('bright red')\n * @example\n * const str = escape({ fg: 'bright yellow', bg: 'blue' })\n */\nexport const ANSIescape = (colors={}) => {\n  const col = isObject(colors) ? colors : { fg: colors };\n  let escapes = [ ];\n  if (col.bg) {\n    escapes.push(ANSIescapeCode(col.bg, 'bg'));\n  }\n  if (col.fg) {\n    escapes.push(ANSIescapeCode(col.fg, 'fg'));\n  }\n  return escapes.join('');\n}\n\n/**\n * Returns an ANSI escape code to reset all colors.\n * @return {String} ANSI escape reset string\n */\nexport const ANSIreset = () => ANSIescapeCode('reset', false)\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Color.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "ANSIStart",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIStart",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "ANSIEnd",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIEnd",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "ANSIColors",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIColors",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"reset\": *, \"bold\": number, \"bright\": number, \"dark\": number, \"black\": *, \"red\": number, \"green\": number, \"yellow\": number, \"blue\": number, \"magenta\": number, \"cyan\": number, \"grey\": number, \"white\": number, \"fg\": number, \"bg\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "ANSIescapeCode",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIescapeCode",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescapeCode}",
    "description": "Returns an ANSI escape code for a color string.  This can be a single color\nname, e.g. `red`, `green`, etc., or a color prefixed with `bright` or `dark`,\ne.g. `bright red`, `dark green`, etc.  An optional section argument can be\nset to `fg` (default) to set a foreground color or `bg` for a background color.",
    "examples": [
      "const str = escapeCode('red')",
      "const str = escapeCode('bright red')",
      "const str = escapeCode('bright red', 'bg')"
    ],
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "color name with optional modifier prefix"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'fg'",
        "defaultRaw": "'fg'",
        "name": "base",
        "description": "`fg` or `bg` to set foreground or background color respectively"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "ANSI escape code string"
    }
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "ANSIescape",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIescape",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescape}",
    "description": "Returns an ANSI escape code for a color string or combination of foreground and\nbackground colors.",
    "examples": [
      "const str = escape('red')",
      "const str = escape('bright red')",
      "const str = escape({ fg: 'bright yellow', bg: 'blue' })"
    ],
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": "either a simple color name or object contain foreground and background colors"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "colors.fg",
        "description": "foreground color"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "colors.fg",
        "description": "background color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "ANSI escape code string"
    }
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "ANSIreset",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIreset",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIreset}",
    "description": "Returns an ANSI escape code to reset all colors.",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "ANSI escape reset string"
    },
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/Badger/Utils/DataPath.js",
    "content": "import { fail, hasValue, isArray, noValue } from \"./Misc.js\";\n\nconst quotedEscapes = {\n  b: \"\\b\",\n  f: \"\\f\",\n  n: \"\\n\",\n  r: \"\\r\",\n  t: \"\\t\",\n  v: \"\\v\",\n  '\"': '\"',\n  \"'\": \"'\",\n  '\\\\': '\\\\',\n}\n\nexport const matchDoubleQuotedString = string => {\n  const regex = /^\"((?:\\\\[\\\\\"nrt]|.)*?)\"$/\n  const match = string.match(regex);\n  return match\n    ? match[1].replace(/\\\\([\\\\\"bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`)\n    : null;\n}\n\nexport const matchSingleQuotedString = string => {\n  const regex = /^'((?:\\\\[\\\\']|.)*?)'$/\n  const match = string.match(regex);\n  return match\n    ? match[1].replace(/\\\\([\\\\'bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`)\n    : null;\n}\n\nexport const splitDataPath = path => {\n  // * match a slash: \\/\n  // * match a single quoted string: '...'\n  // * match a double quoted string: \"...\"\n  // * match anything else: hello world!\n  let parts = [ ];\n  const regex = /(?:(\\/)|'((?:\\\\[\\\\']|.)*?)'|\"((?:\\\\[\\\\\"nrt]|.)*?)\"|([^/?]+))(\\??)/g;\n  // console.log('\\nsplitDataPath [%s]', path);\n  const matches = [...path.matchAll(regex)];\n\n  matches.map(\n    ([ , , single, double, other, optional]) => {\n      let part;\n      // console.log('match [slash:%s] [single:%s] [double:%s] [other:%s]', slash, single, double, other);\n\n      if (single) {\n        part = single.replace(/\\\\([\\\\'bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`);\n      }\n      else if (double) {\n        part = double.replace(/\\\\([\\\\\"bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`);\n      }\n      else if (other) {\n        part = other\n      }\n      if (hasValue(part)) {\n        parts.push(optional ? [part, {optional:true}] : part);\n      }\n    }\n  )\n  // console.log('MATCHED ', parts);\n\n  return parts;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport const dataPath = (data, path) => {\n  let root  = data;\n  let parts = splitDataPath(path);\n  let done  = [ ];\n  // console.log('parts: ', parts);\n\n  for (let part of parts) {\n    const [word, opts] = isArray(part) ? part : [part, {}];\n    root = root[word];\n    done.push(word);\n    if (noValue(root)) {\n      if (opts.optional) {\n        return root;\n      }\n      else {\n        fail(\"No value for data at path: \", done.join('/'));\n      }\n    }\n  }\n  return root;\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/DataPath.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "quotedEscapes",
    "memberof": "src/Badger/Utils/DataPath.js",
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~quotedEscapes",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"b\": string, \"f\": string, \"n\": string, \"r\": string, \"t\": string, \"v\": string, \"\"\": string, \"'\": string, \"\\\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "matchDoubleQuotedString",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~matchDoubleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchDoubleQuotedString}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "matchSingleQuotedString",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~matchSingleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchSingleQuotedString}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "splitDataPath",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~splitDataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{splitDataPath}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "dataPath",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~dataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dataPath}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/Badger/Utils/Debug.js",
    "content": "import { ANSIescape, ANSIreset } from './Color.js'\nimport { doNothing } from './Misc.js';\n\n/**\n * Returns a debugging function which is enabled by the first `enabled` argument.\n * If this is `false` then it returns a function which does nothing.  If it is\n * true then it returns a function that forwards all arguments to `console.log`.\n * An optional `prefix` be be specified to prefix each debugging line.  The\n * optional third argument `color` can be used to specify a color for the prefix.\n * @param {Boolean} enabled - is debugging enabled?\n * @param {String} [prefix] - optional prefix for debugging messages\n * @param {String|Object} [color] - a color name or object (see {@link Badger/Utils/Color})\n * @param {String} [color.fg] - foreground color\n * @param {String} [color.bg] - background color\n * @return {Function} a debugging function\n * @example\n * const debug = Debugger(true)\n * @example\n * const debug = Debugger(true, 'Debug > ')\n * @example\n * const debug = Debugger(true, 'Debug > ', 'blue')\n * @example\n * const debug = Debugger(true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })\n */\nexport function Debugger(enabled, prefix='', color) {\n  return enabled\n    ? prefix\n      ? (format, ...args) =>\n        console.log(\n          '%s' + prefix + '%s' + format,\n          color ? ANSIescape(color) : '',\n          ANSIreset(),\n          ...args,\n        )\n      : console.log.bind(console)\n    : doNothing;\n}\n\n/**\n * Creates a debugging function via {@link Debugger} and attaches it to the object\n * passed as the first argument as the `debug` function.\n * @param {Object} obj - the object to receive the `debug` function\n * @param {Boolean} enabled - is debugging enabled?\n * @param {String} [prefix] - optional prefix for debugging messages\n * @param {String|Object} [color] - a color name or object (see {@link Badger/Utils/Color})\n * @param {String} [color.fg] - foreground color\n * @param {String} [color.bg] - background color\n * @example\n * const debug = addDebug(myObject, true)\n * @example\n * const debug = addDebug(myObject, true, 'Debug > ')\n * @example\n * const debug = addDebug(myObject, true, 'Debug > ', 'blue')\n * @example\n * const debug = addDebug(myObject, true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })\n */\nexport function addDebug(obj, enabled, prefix='', color) {\n  obj.debug = Debugger(enabled, prefix, color);\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Debug.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "Debugger",
    "memberof": "src/Badger/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Debug.js~Debugger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Debugger}",
    "description": "Returns a debugging function which is enabled by the first `enabled` argument.\nIf this is `false` then it returns a function which does nothing.  If it is\ntrue then it returns a function that forwards all arguments to `console.log`.\nAn optional `prefix` be be specified to prefix each debugging line.  The\noptional third argument `color` can be used to specify a color for the prefix.",
    "examples": [
      "const debug = Debugger(true)",
      "const debug = Debugger(true, 'Debug > ')",
      "const debug = Debugger(true, 'Debug > ', 'blue')",
      "const debug = Debugger(true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })"
    ],
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "is debugging enabled?"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "prefix",
        "description": "optional prefix for debugging messages"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "color",
        "description": "a color name or object (see {@link Badger/Utils/Color})"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.fg",
        "description": "foreground color"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.bg",
        "description": "background color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "a debugging function"
    }
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "addDebug",
    "memberof": "src/Badger/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Debug.js~addDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{addDebug}",
    "description": "Creates a debugging function via {@link Debugger} and attaches it to the object\npassed as the first argument as the `debug` function.",
    "examples": [
      "const debug = addDebug(myObject, true)",
      "const debug = addDebug(myObject, true, 'Debug > ')",
      "const debug = addDebug(myObject, true, 'Debug > ', 'blue')",
      "const debug = addDebug(myObject, true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })"
    ],
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to receive the `debug` function"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "is debugging enabled?"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "prefix",
        "description": "optional prefix for debugging messages"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "color",
        "description": "a color name or object (see {@link Badger/Utils/Color})"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.fg",
        "description": "foreground color"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.bg",
        "description": "background color"
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/Badger/Utils/Misc.js",
    "content": "/**\n * Determines if a value is a string\n * @param {String} value - value to test\n * @return {Boolean} true if `value` is a string or false if not\n */\nexport function isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Determines if a value is an array\n * @param {Array} value - value to test\n * @return {Boolean} true if `value` is an Array or false if not\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Determines if a value is a Function\n * @param {Function} value - value to test\n * @return {Boolean} true if `value` is a Function or false if not\n */\nexport function isFunction(value) {\n  return typeof value === 'function'\n}\n\n/**\n * Determines if a value is an Object (but not an Array)\n * @param {Object} value - value to test\n * @return {Boolean} true if `value` is an Object or false if not\n */\nexport function isObject(value) {\n  return typeof value === \"object\"\n    && ! isArray(value)\n    && ! isNull(value);\n}\n\n/**\n * Determines if a value is `undefined`\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is `undefined` or false if not\n */\nexport function isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\n/**\n * Determines if a value is `null`\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is `null` or false if not\n */\nexport function isNull(value) {\n  return value === null;\n}\n\n/**\n * Determines if a value is defined and not null\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is not `undefined` or `null`\n */\nexport function hasValue(value) {\n  return ! (isUndefined(value) || isNull(value));\n}\n\n/**\n * Determines if all values are defined and not null\n * @param {any[]} values - values to test\n * @return {Boolean} true if all values are not `undefined` or `null`\n */\nexport function haveValue(...values) {\n  return values.every( value => hasValue(value) );\n}\n\n/**\n * Determines if a value is undefined or null\n * @param {any} value - value to test\n * @return {Boolean} true if `value` is `undefined` or `null`\n */\nexport function noValue(value) {\n  return ! hasValue(value);\n}\n\n/**\n * Throws a new Error object\n * @param {String[]} message - error message string(s)\n * @throws {Error}\n */\nexport function fail(...message) {\n  throw new Error(message.join(''));\n}\n\n/**\n * Re-throw an existing Error object\n * @param {Error} error - error object\n * @throws {Error}\n */\nexport function rethrow(error) {\n  throw error;\n}\n\n/**\n * Do nothing.  Nothing at all.\n */\nexport function doNothing() {\n  // speak again Cordelia\n}",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Misc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "isString",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~isString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isString}",
    "description": "Determines if a value is a string",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is a string or false if not"
    }
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~isArray",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isArray}",
    "description": "Determines if a value is an array",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is an Array or false if not"
    }
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isFunction}",
    "description": "Determines if a value is a Function",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is a Function or false if not"
    }
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isObject}",
    "description": "Determines if a value is an Object (but not an Array)",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is an Object or false if not"
    }
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~isUndefined",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isUndefined}",
    "description": "Determines if a value is `undefined`",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is `undefined` or false if not"
    }
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "isNull",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~isNull",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isNull}",
    "description": "Determines if a value is `null`",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is `null` or false if not"
    }
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "hasValue",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~hasValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{hasValue}",
    "description": "Determines if a value is defined and not null",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is not `undefined` or `null`"
    }
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "haveValue",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~haveValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{haveValue}",
    "description": "Determines if all values are defined and not null",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "values to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if all values are not `undefined` or `null`"
    }
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "noValue",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~noValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{noValue}",
    "description": "Determines if a value is undefined or null",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if `value` is `undefined` or `null`"
    }
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "fail",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~fail",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{fail}",
    "description": "Throws a new Error object",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "error message string(s)"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "rethrow",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~rethrow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{rethrow}",
    "description": "Re-throw an existing Error object",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "error object"
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "doNothing",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~doNothing",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{doNothing}",
    "description": "Do nothing.  Nothing at all.",
    "lineNumber": 105,
    "params": [],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/Badger/Utils/Params.js",
    "content": "import { hasValue, fail } from \"./Misc.js\";\nimport { joinListOr, splitList } from \"./Text.js\";\n\n/**\n * Assert that a parameter object contains an item with a defined/non-null value\n * @param {Object} params={} - parameters object\n * @param {String} name - parameter that must be included\n * @return {any} the parameter value\n * @throws {Error} if the parameter is not defined or null\n * @example\n * const foo = requiredParam({ foo: 10 }, 'foo');\n */\nexport function requiredParam(params={}, name) {\n  const value = params[name];\n  if (hasValue(value)) {\n    return value;\n  }\n  else {\n    fail(\"Missing value for required parameter: \", name);\n  }\n}\n\n/**\n * Assert that a parameter object contains all specified item with a defined/non-null value\n * @param {Object} params={} - parameters object\n * @param {Array|String} names - parameters that must be included, as an Array or whitespace/comma delimited string (see {@link splitList})\n * @return {Array} the parameter values\n * @throws {Error} if any parameter is not defined or null\n * @example\n * const [foo, bar] = requiredParams({ foo: 10, bar: 20 }, 'foo bar');\n */\nexport function requiredParams(params={}, names) {\n  return splitList(names).map( name => requiredParam(params, name) );\n}\n\n/**\n * An alias for {@link requiredParams} for people who don't like typing long names (and for symmetry with {@link anyParams}))\n */\nexport const allParams=requiredParams;\n\n/**\n * Assert that a parameter object contains any of the specified items with a defined/non-null value\n * @param {Object} params={} - parameters object\n * @param {Array|String} names - parameters of which at least one must be included, as an Array or whitespace/comma delimited string (see {@link splitList})\n * @return {Array} the parameter values\n * @throws {Error} if any parameter is not defined or null\n * @example\n * const [foo, bar] = anyParams({ foo: 10, wiz: 99 }, 'foo bar');\n */\nexport function anyParams(params, names) {\n  let found = false;\n  const nlist  = splitList(names);\n  const values = nlist.map(\n    name => {\n      const value = params[name];\n      if (hasValue(value)) {\n        found = true;\n      }\n      return value;\n    }\n  );\n  return found\n    ? values\n    : fail(\"Missing value for one of: \", joinListOr(nlist));\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Params.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "requiredParam",
    "memberof": "src/Badger/Utils/Params.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Params.js~requiredParam",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParam}",
    "description": "Assert that a parameter object contains an item with a defined/non-null value",
    "examples": [
      "const foo = requiredParam({ foo: 10 }, 'foo');"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "parameters object"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "parameter that must be included"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "the parameter value"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the parameter is not defined or null"
      }
    ]
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "requiredParams",
    "memberof": "src/Badger/Utils/Params.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Params.js~requiredParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParams}",
    "description": "Assert that a parameter object contains all specified item with a defined/non-null value",
    "examples": [
      "const [foo, bar] = requiredParams({ foo: 10, bar: 20 }, 'foo bar');"
    ],
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "parameters object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "parameters that must be included, as an Array or whitespace/comma delimited string (see {@link splitList})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the parameter values"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if any parameter is not defined or null"
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "allParams",
    "memberof": "src/Badger/Utils/Params.js",
    "static": true,
    "longname": "src/Badger/Utils/Params.js~allParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{allParams}",
    "description": "An alias for {@link requiredParams} for people who don't like typing long names (and for symmetry with {@link anyParams}))",
    "lineNumber": 39,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "anyParams",
    "memberof": "src/Badger/Utils/Params.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Params.js~anyParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{anyParams}",
    "description": "Assert that a parameter object contains any of the specified items with a defined/non-null value",
    "examples": [
      "const [foo, bar] = anyParams({ foo: 10, wiz: 99 }, 'foo bar');"
    ],
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "parameters object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "parameters of which at least one must be included, as an Array or whitespace/comma delimited string (see {@link splitList})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the parameter values"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if any parameter is not defined or null"
      }
    ]
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "src/Badger/Utils/Text.js",
    "content": "import { isString, isArray, noValue } from \"./Misc.js\";\n\n/**\n * Split a comma/whitespace delimited string into an Array\n * @param {String} [value] - string to split\n * @return {Array} array of split strings\n * @example\n * const strings = splitList('one two three')\n * @example\n * const strings = splitList('one,two,three')\n * @example\n * const strings = splitList('one, two, three')\n */\nexport function splitList(value) {\n  if (noValue(value)) {\n    return [ ];\n  }\n  else if (isString(value)) {\n    return value.length\n      ? value.split(/,\\s*|\\s+/)\n      : [ ]\n  }\n  else if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\n\n/**\n * Join an Array into a single string\n * @param {Array} [array] - array to join\n * @param {String} [joint=' '] - delimiter to join strings\n * @param {String} [lastJoint=joint] - delimiter for final item\n * @return {String} joined string\n * @example\n * joinList(['one', 'two', 'three']);   // one two three\n * @example\n * joinList(['one', 'two', 'three'], ', ');   // one, two, three\n * @example\n * joinList(['one', 'two', 'three'], ', ', ' and ');   // one, two and three\n */\nexport function joinList(array, joint=' ', lastJoint=joint) {\n  let copy = [...array];\n  const last = copy.pop();\n  return copy.length\n    ? [copy.join(joint), last].join(lastJoint)\n    : last;\n}\n\n/**\n * Join an Array into a single string using commas for delimiters and ` and ` for the final item\n * @param {Array} [array] - array to join\n * @param {String} [joint=', '] - delimiter to join strings\n * @param {String} [lastJoint=' and '] - delimiter for final item\n * @return {String} joined string\n * @example\n * joinListAnd(['one', 'two', 'three']);   // one, two and three\n */\nexport function joinListAnd(array, joint=', ', lastJoint=' and ') {\n  return joinList(array, joint, lastJoint);\n}\n\n/**\n * Join an Array into a single string using commas for delimiters and ` or ` for the final item\n * @param {Array} [array] - array to join\n * @param {String} [joint=', '] - delimiter to join strings\n * @param {String} [lastJoint=' or '] - delimiter for final item\n * @return {String} joined string\n * @example\n * joinListOr(['one', 'two', 'three']);   // one, two or three\n */\nexport function joinListOr(array, joint=', ', lastJoint=' or ') {\n  return joinList(array, joint, lastJoint);\n}\n\n/**\n * Capitalise a string by converting the first character to upper case and other characters to lower case\n * @param {String} [word] - word to capitalise\n * @return {String} capitalised string\n * @example\n * capitalise('badger');   // Badger\n * @example\n * capitalise('BADGER');   // Badger\n */\nexport function capitalise(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n}\n\n/**\n * Convert a snake case string to studly caps\n * @param {String} [snake] - word to capitalise\n * @return {String} capitalised string\n * @example\n * snakeToStudly('happy_badger_dance');   // HappyBadgerDance\n * @example\n * snakeToStudly('happy_badger/dance');   // HappyBadger/Dance\n */\nexport function snakeToStudly(snake) {\n  return snake.split('/').map(\n    // each segment can be like foo_bar which we convert to FooBar\n    segment => segment.split('_').map(capitalise).join('')\n  ).join('/');\n}\n\n/**\n * Convert a snake case string to camel case\n * @param {String} [snake] - word to capitalise\n * @return {String} capitalised string\n * @example\n * snakeToCamel('happy_badger_dance');   // happyBadgerDance\n * @example\n * snakeToCamel('happy_badger/dance');   // happyBadger/dance\n */\nexport function snakeToCamel(snake) {\n  return snake.split('/').map(\n    // each segment can be like foo_bar which we convert to fooBar\n    segment => segment.split('_').map((i, n) => n ? capitalise(i) : i).join('')\n  ).join('/');\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "splitList",
    "memberof": "src/Badger/Utils/Text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Text.js~splitList",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{splitList}",
    "description": "Split a comma/whitespace delimited string into an Array",
    "examples": [
      "const strings = splitList('one two three')",
      "const strings = splitList('one,two,three')",
      "const strings = splitList('one, two, three')"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "string to split"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of split strings"
    }
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "joinList",
    "memberof": "src/Badger/Utils/Text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Text.js~joinList",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{joinList}",
    "description": "Join an Array into a single string",
    "examples": [
      "joinList(['one', 'two', 'three']);   // one two three",
      "joinList(['one', 'two', 'three'], ', ');   // one, two, three",
      "joinList(['one', 'two', 'three'], ', ', ' and ');   // one, two and three"
    ],
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "array",
        "description": "array to join"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' '",
        "defaultRaw": "' '",
        "name": "joint",
        "description": "delimiter to join strings"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "joint",
        "defaultRaw": "joint",
        "name": "lastJoint",
        "description": "delimiter for final item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "joined string"
    }
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "joinListAnd",
    "memberof": "src/Badger/Utils/Text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Text.js~joinListAnd",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{joinListAnd}",
    "description": "Join an Array into a single string using commas for delimiters and ` and ` for the final item",
    "examples": [
      "joinListAnd(['one', 'two', 'three']);   // one, two and three"
    ],
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "array",
        "description": "array to join"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "', '",
        "defaultRaw": "', '",
        "name": "joint",
        "description": "delimiter to join strings"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' and '",
        "defaultRaw": "' and '",
        "name": "lastJoint",
        "description": "delimiter for final item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "joined string"
    }
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "joinListOr",
    "memberof": "src/Badger/Utils/Text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Text.js~joinListOr",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{joinListOr}",
    "description": "Join an Array into a single string using commas for delimiters and ` or ` for the final item",
    "examples": [
      "joinListOr(['one', 'two', 'three']);   // one, two or three"
    ],
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "array",
        "description": "array to join"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "', '",
        "defaultRaw": "', '",
        "name": "joint",
        "description": "delimiter to join strings"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' or '",
        "defaultRaw": "' or '",
        "name": "lastJoint",
        "description": "delimiter for final item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "joined string"
    }
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "capitalise",
    "memberof": "src/Badger/Utils/Text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Text.js~capitalise",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{capitalise}",
    "description": "Capitalise a string by converting the first character to upper case and other characters to lower case",
    "examples": [
      "capitalise('badger');   // Badger",
      "capitalise('BADGER');   // Badger"
    ],
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "word",
        "description": "word to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "snakeToStudly",
    "memberof": "src/Badger/Utils/Text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Text.js~snakeToStudly",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{snakeToStudly}",
    "description": "Convert a snake case string to studly caps",
    "examples": [
      "snakeToStudly('happy_badger_dance');   // HappyBadgerDance",
      "snakeToStudly('happy_badger/dance');   // HappyBadger/Dance"
    ],
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "snake",
        "description": "word to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "snakeToCamel",
    "memberof": "src/Badger/Utils/Text.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Text.js~snakeToCamel",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{snakeToCamel}",
    "description": "Convert a snake case string to camel case",
    "examples": [
      "snakeToCamel('happy_badger_dance');   // happyBadgerDance",
      "snakeToCamel('happy_badger/dance');   // happyBadger/dance"
    ],
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "snake",
        "description": "word to capitalise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "capitalised string"
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/Badger/Workspace.js",
    "content": "import { dir as fsDir } from \"./Filesystem/Directory.js\";\nimport { fail, hasValue } from \"./Utils/Misc.js\";\nimport { addDebug } from \"./Utils/Debug.js\";\nimport { splitList } from \"./Utils/Text.js\";\nimport { Config } from \"./Config.js\";\nimport { Library } from \"./Library.js\";\n\nconst defaults = {\n  library: {\n    dir: 'lib library src components',\n  },\n  config: {\n    dir: 'config',\n  }\n}\nexport class Workspace {\n  constructor(dir, options={}) {\n    const rootDir = fsDir(dir);\n    const cfgDir  = rootDir.dir(options.config?.dir || defaults.config.dir);\n    const cfgOpts = { ...defaults.config, ...(options.config||{}) };\n    const config  = new Config(cfgDir, cfgOpts);\n    const libDirs = splitList(options.library?.dir || defaults.library.dir).map( dir => rootDir.dir(dir) );\n    const libOpts = { ...defaults.library, ...(options.library||{}) };\n    const library = new Library(libDirs, libOpts);\n\n    this.state = {\n      rootDir,\n      config,\n      library\n    }\n\n    // console.log('options: ', options);\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n    this.debug('root dir: ', rootDir.path());\n    this.debug('config dir: ', cfgDir.path());\n    this.debug('libDirs: ', libDirs);\n    this.debug('libOpts: ', libOpts);\n  }\n  dir(path, options) {\n    this.debug(\"dir(%s, %o)\", path, options);\n    return hasValue(path)\n      ? this.state.rootDir.dir(path, options)\n      : this.state.rootDir;\n  }\n  file(path, options) {\n    this.debug(\"file(%s, %o)\", path, options);\n    return this.state.rootDir.file(path, options)\n  }\n  read(path, options) {\n    this.debug(\"read(%s, %o)\", path, options);\n    return this.file(path, options).read();\n  }\n  write(path, data, options) {\n    this.debug(\"write(%s, %o, %o)\", path, data, options);\n    return this.file(path, options).write(data);\n  }\n  configDir(path, options) {\n    this.debug(\"configDir(%s, %o)\", path, options);\n    return hasValue(path)\n      ? this.state.configDir(path, options)\n      : this.state.configDir;\n  }\n  async config(uri, defaults) {\n    this.debug(\"config(%s, %o)\", uri, defaults);\n    return hasValue(uri)\n      ? this.state.config.config(uri, defaults)\n      : this.state.config;\n  }\n  async library(uri) {\n    return this.state.library.library(uri);\n  }\n  async component(uri, props) {\n    const config  = await this.config(uri, {});\n    const lib     = await this.library(config.component?.library || uri);\n    const exp     = config.component?.export || 'default';\n    const compcls = lib[exp] || fail(\"No '\", exp, \"' export from component library: \", uri);\n    const comp = new compcls(this, { ...config, ...props });\n    // this.debug(\"created component \", uri)\n    return comp;\n  }\n}\n\nexport const workspace = (dir, options) => new Workspace(dir, options);\n\nexport default Workspace;",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Workspace.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Workspace.js",
    "static": true,
    "longname": "src/Badger/Workspace.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"library\": *, \"config\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "Workspace",
    "memberof": "src/Badger/Workspace.js",
    "static": true,
    "longname": "src/Badger/Workspace.js~Workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Workspace}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#state",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"rootDir\": *, \"config\": *, \"library\": *}"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#dir",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#file",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#read",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#write",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "configDir",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#configDir",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#config",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "uri",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaults",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#library",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "uri",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "component",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#component",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "uri",
        "types": [
          "*"
        ]
      },
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "workspace",
    "memberof": "src/Badger/Workspace.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Workspace.js~workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{workspace}",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/Badger.js",
    "content": "export * from './Badger/Component.js';\nexport * from './Badger/Codecs/index.js';\nexport * from './Badger/Config.js';\nexport * from './Badger/Filesystem/Directory.js';\nexport * from './Badger/Filesystem/File.js';\nexport * from './Badger/Filesystem/Path.js';\nexport * from './Badger/Library.js';\nexport * from './Badger/Utils/Color.js';\nexport * from './Badger/Utils/DataPath.js';\nexport * from './Badger/Utils/Debug.js';\nexport * from './Badger/Utils/Misc.js';\nexport * from './Badger/Utils/Params.js';\nexport * from './Badger/Utils/Text.js';\nexport * from './Badger/Workspace.js';\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "Component",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Component",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Component}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 196,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Component#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "workspace",
    "memberof": "src/Badger.js~Component",
    "static": false,
    "longname": "src/Badger.js~Component#workspace",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "props",
    "memberof": "src/Badger.js~Component",
    "static": false,
    "longname": "src/Badger.js~Component#props",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "initComponent",
    "memberof": "src/Badger.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Component#initComponent",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "name": "codecs",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~codecs",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{codecs}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"json\": *, \"yaml\": *}"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "codec",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~codec",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{codec}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "class",
    "name": "Config",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Config}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Filesystem/DirPath.js~DirPath"
    ]
  },
  {
    "__docId__": 203,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Config#constructor",
    "access": "public",
    "description": "Constructor for Config object.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yaml json'",
        "defaultRaw": "'yaml json'",
        "name": "options.codec",
        "description": "Array or comma/whitespace delimited string of codec names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Config object"
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "firstFileWithExt",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#firstFileWithExt",
    "access": "public",
    "description": "Internal method to locate the first config file with one of a number of file extensions.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "exts",
        "description": "array of possible extensions"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "makeOptions",
        "description": "optional function to generate options for a {@link File} object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "jsFile",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#jsFile",
    "access": "public",
    "description": "Internal method to locate a Javascript configuration file with one of the `jsExt` extensions (`.js` or `.mjs` by default)",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#file",
    "access": "public",
    "description": "Internal method to locate a configuration file with one of the `codec` extensions (`.yaml` or `.json` by default)",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#config",
    "access": "public",
    "description": "Method to fetch configuration data from a file.  The file can be a Javascript file which should\nreturn the configuration data as the default export, or a YAML (`.yaml`) or JSON (`.json`) file.\nIf the file isn't found then the method returns the `defaults` data if provided, or throws an\nerror if not.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options to be used if a file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the configuration data loaded from the file"
    }
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "config",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{config}",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "dir",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~dir",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dir}",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "cwd",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~cwd",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cwd}",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "bin",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~bin",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{bin}",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "class",
    "name": "Directory",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Directory",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "Directory",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Path.js~Path"
    ]
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#file",
    "access": "public",
    "description": "Fetch a new {@link File} object for a file in the directory.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "file configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "directory",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#directory",
    "access": "public",
    "description": "Fetch a new {@link Directory} object for a sub-directory in the directory.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#dir",
    "access": "public",
    "description": "An alias for the {@link directory} method for lazy people",
    "lineNumber": 41,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Directory} object"
    },
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "parent",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#parent",
    "access": "public",
    "description": "Returns a new {@link Directory} object for the parent directory",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object for the parent"
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#read",
    "access": "public",
    "description": "Returns the names of the files and sub-directories in the directory",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with an array of the file and directory names"
    },
    "params": []
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#isEmpty",
    "access": "public",
    "description": "Determines if the directory is empty.",
    "lineNumber": 70,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with a boolean value true (empty) or false (not empty)."
    },
    "params": []
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "notEmpty",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#notEmpty",
    "access": "public",
    "description": "Determines if the directory is not empty.",
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with a boolean value true (not empty) or false (empty)."
    },
    "params": []
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "empty",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#empty",
    "access": "public",
    "description": "Empty the directory.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.force",
        "description": "force removal of files and directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "recursively empty and delete sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "mkdir",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#mkdir",
    "access": "public",
    "description": "Make the directory.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "create intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "rmdir",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#rmdir",
    "access": "public",
    "description": "Remove the directory.",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.empty",
        "description": "delete items in directory"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.force",
        "description": "force delete files and directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "recursively delete sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "create",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#create",
    "access": "public",
    "description": "Create the directory and any intermediate directories.",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "recursively create intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Directory#destroy",
    "access": "public",
    "description": "Empty and delete the directory.",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.empty",
        "description": "empty directory of any files and sub-directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.recursive",
        "description": "recursively delete sub-directories"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.force",
        "description": "force deletion of files and sub-directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "mustExist",
    "memberof": "src/Badger.js~Directory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Directory#mustExist",
    "access": "public",
    "description": "Assert that a directory exists and optionally create it",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.create",
        "description": "create the directory and any intermediate directories if it doesn't exist - equivalent to adding `mkdir` and `recursive` options or calling {@link create}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.mkdir",
        "description": "create the directory, add the `recursive` option to create intermediate directories - equivalent to calling {@link mkdir}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.recursive",
        "description": "when used with `mkdir`, creates any intermediate directories"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the {@link Directory} object"
    }
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "file",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~file",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{file}",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "class",
    "name": "File",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~File",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "File",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Path.js~Path"
    ]
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "directory",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~File#directory",
    "access": "public",
    "description": "Returns a new {@link Directory} object for the parent directory of the file",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object for the parent"
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~File#dir",
    "access": "public",
    "description": "An alias for the {@link directory} method for lazy people",
    "lineNumber": 26,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the parent {@link Directory} object"
    },
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ]
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~File#read",
    "access": "public",
    "description": "Reads the file content.  If a `codec` has been specified then the content is decoded.",
    "examples": [
      "const text = file('myfile.txt').read();",
      "const data = file('myfile.json', { codec: 'json' }).read();",
      "const data = file('myfile.json').read({ codec: 'json' });"
    ],
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String",
        "Object"
      ],
      "spread": false,
      "description": "the file content"
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~File#write",
    "access": "public",
    "description": "Writes the file content.  If a `codec` has been specified then the content will be encoded.",
    "examples": [
      "file('myfile.txt').write('Hello World');",
      "file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });",
      "file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });"
    ],
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Badger.js~File",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~File#delete",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "Path",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Path",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Path}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 234,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#constructor",
    "access": "public",
    "description": "Constructor for filesystem paths.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link Path} object"
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger.js~Path",
    "static": false,
    "longname": "src/Badger.js~Path#state",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"path\": *, \"options\": *}"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "path",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#path",
    "access": "public",
    "description": "Accessor method to return the filesystem path.",
    "lineNumber": 35,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the filesystem path"
    },
    "params": []
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "relativePath",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#relativePath",
    "access": "public",
    "description": "Create a path relative to the current path.",
    "examples": [
      "const p = new Path('/path/to/here')\nconst q = p.relativePath('there')          // -> /path/to/here/there\nconst r = p.relativePath('and', 'there')   // -> /path/to/here/and/there"
    ],
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "parts",
        "description": "part(s) of the filesystem path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the new path"
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "options",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#options",
    "access": "public",
    "description": "Internal method to merge any options with the pre-defined options passed to the\nconstructor.  Options passed as arguments will take precedence.",
    "examples": [
      "const p = new Path('/path/to/here', { option1: 'hello' })\nconst q = p.options({ option2: 'world' })  // -> { option1: 'hello', options2: 'world' }"
    ],
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "new options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the merged options"
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "exists",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Path#exists",
    "access": "public",
    "description": "Method to assert that the path exists.",
    "examples": [
      "const p = new Path('/path/to/here')\np.exists()\n  .then( console.log('path exists') )\n  .catch( console.log('path does not exist') )"
    ],
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with `true` if the path exists or rejects if the path doesn't"
    },
    "params": []
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "stat",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Path#stat",
    "access": "public",
    "description": "Method to fetch stats for the path.  Uses the `stat` function from `node:fs/promises`.\nStats are cached internally (subject to change)",
    "examples": [
      "const p = new Path('/path/to/here')\np.stat()\n  .then( stats => console.log('path stats:', stats) )\n  .catch( console.log('path does not exist') )"
    ],
    "lineNumber": 96,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with path stats returned from the `stat` function"
    },
    "params": []
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "unstat",
    "memberof": "src/Badger.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Path#unstat",
    "access": "public",
    "description": "Method to clear internal cache of path stats (subject to change)",
    "lineNumber": 104,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "class",
    "name": "Library",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Library}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Filesystem/DirPath.js~DirPath"
    ]
  },
  {
    "__docId__": 243,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Library",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Library#constructor",
    "access": "public",
    "description": "Constructor for Library object.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain Javascript libraries"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Library object"
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger.js~Library",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Library#library",
    "access": "public",
    "description": "Method to load a Javascript library in one of the library directories and with one of the `jsExt` extensions (`.js` or `.mjs` by default).\nReturns the exports from the library if found or throws an error if not.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the exports from the loaded libary"
    }
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "library",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{library}",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "ANSIescapeCode",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~ANSIescapeCode",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescapeCode}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "base",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "fg",
        "defaultValue": "fg"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "ANSIescape",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~ANSIescape",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescape}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "colors",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "ANSIreset",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~ANSIreset",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIreset}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "matchDoubleQuotedString",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~matchDoubleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchDoubleQuotedString}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "matchSingleQuotedString",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~matchSingleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchSingleQuotedString}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "splitDataPath",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~splitDataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{splitDataPath}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "dataPath",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~dataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dataPath}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "Debugger",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~Debugger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Debugger}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "function",
    "name": "addDebug",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~addDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{addDebug}",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "isString",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~isString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isString}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~isArray",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isArray}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isFunction}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isObject}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~isUndefined",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isUndefined}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "isNull",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~isNull",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{isNull}",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "hasValue",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~hasValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{hasValue}",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "haveValue",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~haveValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{haveValue}",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "noValue",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~noValue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{noValue}",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "fail",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~fail",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{fail}",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "rethrow",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~rethrow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{rethrow}",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "doNothing",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~doNothing",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{doNothing}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "function",
    "name": "requiredParam",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~requiredParam",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParam}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "requiredParams",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~requiredParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParams}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "name": "allParams",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~allParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{allParams}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "anyParams",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~anyParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{anyParams}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "splitList",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~splitList",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{splitList}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "joinList",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~joinList",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{joinList}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "joint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": " ",
        "defaultValue": " "
      },
      {
        "name": "lastJoint",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "joint",
        "defaultValue": "joint"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "joinListAnd",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~joinListAnd",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{joinListAnd}",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "joint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": ", ",
        "defaultValue": ", "
      },
      {
        "name": "lastJoint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": " and ",
        "defaultValue": " and "
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "joinListOr",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~joinListOr",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{joinListOr}",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "joint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": ", ",
        "defaultValue": ", "
      },
      {
        "name": "lastJoint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": " or ",
        "defaultValue": " or "
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "function",
    "name": "capitalise",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~capitalise",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{capitalise}",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "word",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "snakeToStudly",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~snakeToStudly",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{snakeToStudly}",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "snake",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "function",
    "name": "snakeToCamel",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~snakeToCamel",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{snakeToCamel}",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "snake",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "Workspace",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Workspace}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 279,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger.js~Workspace",
    "static": false,
    "longname": "src/Badger.js~Workspace#state",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"rootDir\": *, \"config\": *, \"library\": *}"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#dir",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#file",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#read",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#write",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "configDir",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#configDir",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Workspace#config",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "uri",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaults",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Workspace#library",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "uri",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "component",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Workspace#component",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "uri",
        "types": [
          "*"
        ]
      },
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "workspace",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{workspace}",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# badger-js\n\nThis is an application toolkit for Javascript projects.  It provides a number of\nclasses and utility functions to make life easier.\n\nIt is loosely based around the [Badger](https://github.com/abw/Badger) toolkit for\nPerl and was written primarily to help migrate some old Perl projects to Javascript.\n\n## Installation\n\nInstall `badger` using your favourite package manager.\n\n### npm\n\n    npm install @abw/badger\n\n### pnpm\n\n    pnpm install @abw/badger\n\n### yarn\n\n    yarn add @abw/badger\n\n## Manual\n\nRead the [Manual](https://abw.github.io/badger-js/docs/manual/) for an introduction to the\ntoolkit and examples of use.\n## API Documentation\n\nRead the [API documentation](https://abw.github.io/badger-js/docs/) for further information\nabout the classes, methods and utility functions provided.\n\n## Author\n\nAndy Wardley <abw@wardley.org>",
    "longname": "/Users/abw/js/badger-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@abw/badger\",\n  \"version\": \"1.0.4\",\n  \"description\": \"Component based framework and utility modules\",\n  \"type\": \"module\",\n  \"main\": \"dist/badger.cjs.js\",\n  \"module\": \"dist/badger.esm.js\",\n  \"exports\": \"./dist/badger.esm.js\",\n  \"author\": \"Andy Wardley\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/abw/badger-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/abw/badger-js/issues\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"lint\": \"eslint 'src/**/*'\",\n    \"docs:build\": \"esdoc\",\n    \"docs:serve\": \"serve docs\",\n    \"test\": \"ava --serial\",\n    \"pretest\": \"pnpm run build\"\n  },\n  \"keywords\": [\n    \"badger\",\n    \"project\",\n    \"framework\",\n    \"utility\"\n  ],\n  \"devDependencies\": {\n    \"@itsjamie/esdoc-cli\": \"^0.5.0\",\n    \"@itsjamie/esdoc-core\": \"^0.5.0\",\n    \"@itsjamie/esdoc-importpath-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-inject-style-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-standard-plugin\": \"^0.5.0\",\n    \"@rollup/plugin-commonjs\": \"^11.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^7.1.3\",\n    \"ava\": \"^4.3.0\",\n    \"eslint\": \"^8.20.0\",\n    \"rollup\": \"^2\",\n    \"rollup-plugin-terser\": \"^7.0.2\"\n  },\n  \"dependencies\": {\n    \"js-yaml\": \"^4.1.0\"\n  }\n}\n",
    "longname": "/Users/abw/js/badger-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# badger\n\n<img src=\"./manual/asset/badger2.svg\" width=\"300\"/>\n\nThis is the manual for the `badger` Javascript toolkit.\n\n* [Introduction](manual/introduction.html)\n* [Filesystem Utilities](manual/filesystem.html)\n* [Data Codecs](manual/codecs.html)\n* [Configuration Files](manual/config_files.html)\n* [Library Modules](manual/library_modules.html)\n* [Data Paths](manual/data_paths.html)\n\n# Author\n[Andy Wardley](https://github.com/abw)\n",
    "longname": "/Users/abw/js/badger-js/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/abw/js/badger-js/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/introduction.md",
    "name": "./manual/introduction.md",
    "content": "# Introduction\n\nThe `badger` toolkit provides a range of classes and utility\nfunctions for server-side Javascript using Node.js.\n\nThere is no particular rhyme or reason as to what's included\nor excluded from the toolkit.  It contains the kind of things\nthat I've found to be useful to help build and manage\nnon-trivial software projects.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/filesystem.md",
    "name": "./manual/filesystem.md",
    "content": "# Filesystem Utilities\n\nThe filesystem utilities provide a simple and convenient way to\nhandle common  directory and file operations.\n\n- [Directories](#directories)\n- [Reading Files](#reading-files)\n- [Writing Files](#writing-files)\n\n## Directories\n\nSay you've got a script in your project which needs to read a file\nfrom a different directory.\n\nLet's assume that the script is `bin/hello.js` and you want\nto read the contents of the file in `data/hello.txt`.  The\n`bin` function accepts the URL of the source file which you\ncan get from `import.meta.url` and returns an object\nrepresenting the directory that it's in.  Note that this will\nalways be the same directory regardless of where you run the\nscript from.\n\n```js title=\"bin/hello.js\"\nimport { bin } from '@abw/badger'\n\n// current directory where this script is located\nconst thisDir = bin(import.meta.url);\n```\n\nThe `parent()` method returns the parent directory and on that\nwe can call the `directory()` (or `dir()` for short) method to access a\ndirectory beneath that.  In this case, we're going for the `data`\ndirectory.\n\n```js\n// directory where the data file is located\nconst dataDir = thisDir.parent().dir('data');\n```\n\n## Reading Files\n\nWe can then access the `hello.txt` file in that directory and\nread the file content using the `read()` method.  This returns\na Promise which will fulfull with the file content.  Add a\n`.then()` handler to do something with the content.\n\n```js\ndataDir.file('hello.txt').read().then(\n  text => console.log(text)\n)\n```\n\nWe can chain all those function/method calls together like so:\n\n```js title=\"bin/animal.js\"\nimport { bin } from '@abw/badger'\n\nbin(import.meta.url)\n  .parent()\n  .dir('data')\n  .file('hello.txt')\n  .read()\n  .then( text => console.log(text) )\n```\n\n## Writing Files\nWriting files is just as easy:\n\n```js title=\"bin/goodbye.js\"\nimport { bin } from '@abw/badger'\n\nbin(import.meta.url)\n  .parent()\n  .dir('data')\n  .file('goodbye.txt')\n  .write('K thx bye');\n```\n\nFor further information see the documentation for the\n[Directory](../class/src/Badger/Filesystem/Directory.js~Directory) and\n[File](../class/src/Badger/Filesystem/File.js~File) modules.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/codecs.md",
    "name": "./manual/codecs.md",
    "content": "# Data Codecs\n\nCodecs are used to encode and decode data to and from serialised text.\nThe badger toolkit comes with two built-in codecs for `json` and `yaml` files.\n\n- [Read Data File](#read-data-files)\n- [Write Data Files](#write-data-files)\n\n## Read Data Files\n\nSuppose that we have a `badger.yaml` file in the `data` directory that we\nwant to read.\n\n```yaml title=\"data/animal.yaml\"\nname:   Brian\nanimal: Badger\n```\n\nAll we have to do is add the `{ codec: \"yaml\" }`\noptions to the `file()` method.  The `read()` method will then\nautomatically decode the YAML text.\n\n```js title=\"bin/animal.js\"\nimport { bin } from '@abw/badger'\n\nbin(import.meta.url)\n  .parent()\n  .directory('data')\n  .file('badger.yaml', { codec: 'yaml' })\n  .read().then(\n    data => console.log(data.name, 'is a', data.animal)\n  )\n```\n\nThis prints the string \"Brian is a Badger\" to the console.\n\n## Write Data Files\n\nThe `codec` option also works when writing data.\n\n```js title=\"bin/giraffe.js\"\nimport { bin } from '@abw/badger'\n\nbin(import.meta.url)\n  .parent()\n  .directory('data')\n  .file('giraffe.yaml', { codec: 'yaml' })\n  .write({\n    name:   \"Gerald\",\n    animal: \"Giraffe\",\n  })\n```\n\nYou should now have a `data/giraffe.yaml` file containing the following:\n\n```yaml title=\"data/giraffe.yaml\"\nname: Gerald\nanimal: Giraffe\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/config_files.md",
    "name": "./manual/config_files.md",
    "content": "# Configuration Files\n\nWe all know (hopefully) that it's considered harmful to hard-code values in code\nthat might conceivably change at some point.  Furthermore, the DRY (Don't\nRepeat Yourself) principle tells us that _\"Every piece of knowledge must\nhave a single, unambiguous, authoritative representation within a system\"_.\n\nSo it's good practice to have a single location where configuration options for your\nproject can be stored.  For a smaller projects this might be a single configuration\nfile (e.g. consider how `package.json` is used for NPM modules). For larger projects\nyou may choose to have several configuration files to achieve a better separation\nof concerns and to make them easier to manage.\n\n- [Config Object](#config-object)\n- [Config Directory](#config-directory)\n- [Multiple Config Directories](#multiple-config-directories)\n- [Loading a Config File](#loading-a-config-file)\n- [Data Path](#data-path)\n- [Configuration Options](#configuration-options)\n- [Benefits](#benefits)\n\n## Config Object\n\nThe [Config](../class/src/Badger/Config.js~Config) module simplifies the process\nof reading configuration files stored in a central location.  Tell it where your\nconfiguration files are stored and then it will take care of loading them for you.\n\n```js\nimport { Config } from '@abw/badger'\n\n// look for config files in a `config` directory\nconst configDir = new Config('config')\n\n// load the badger.(js|mjs|yaml|json) file\nconfigDir.config('badger').then(\n  config => console.log(\"loading the badger config: \", config)\n)\n```\n\n## Config Directory\n\nWhen you create a new `Config` object you should specify the name of the\nconfiguration directory relative to your current location.\n\n```js\nconst configDir = new Config('config')\n```\n\nYou can specify it as a string as shown above, or using a\n[Directory](../class/src/Badger/Filesystem/Directory.js~Directory) object as\nshown in the earlier examples. For example, if you have a script in the `bin`\ndirectory and you want to load configuration files from the `config` directory\nlocated alongside it then you can do something like this:\n\n```js title=\"bin/configLoaderExample.js\"\nimport { bin, Config } from '@abw/badger'\n\nconst configDir = new Config(\n  bin(import.meta.url).parent().dir('config')\n)\n```\n\nOr more succinctly like this:\n\n```js title=\"bin/configLoaderExample.js\"\nimport { bin, Config } from '@abw/badger'\n\nconst configDir = new Config(\n  bin(import.meta.url).dir('../config')\n)\n```\n\n## Multiple Config Directories\n\nIf you have multiple locations that you want to read configuration files\nfrom then you can specify them as an array.  The values of the array can be\neither Directory objects or strings, or a mixture of the two.  For example if\nfor some reason you have a `config` directory and a `system` directory that\nyou want to read configuration files from then you could do this:\n\n```js\nconst rootDir = bin(import.meta.url).parent()\n\nconst configDir = new Config(\n  [rootDir.dir('config'), rootDir.dir('system')]\n)\n```\n\n## Loading a Config File\n\nThe `config()` method expects the basename (i.e. no file extension) of a file\nin your config directory (or one of them).\n\n```js\n// load the badger.(js|mjs|yaml|json) file\nconfigDir.config('badger').then(\n  config => console.log(\"loaded the badger config: \", config)\n)\n```\n\n### Javascript Files\n\nIt will first look for a Javascript file with a `.js` or `.mjs` extension.\nIf it finds such a file then it will import it and return a Promise that\nfulfills with the exports from that file.  For example, a `config/badger.js`\nfile might look like this:\n\n```js title=\"config/badger.js\"\nexport const name=\"Brian\";\nexport const animal=\"Badger\";\n```\n\n### YAML or JSON Files\n\nIf it doesn't find a Javascript file then it will look for a `yaml` or `json`\nfile.  For example, a `config/badger.yaml` might look like this:\n\n```yaml title=\"config/badger.yaml\"\nname:   Brian\nanimal: Badger\n```\n\nOr a `config/badger.json` might look like this:\n\n```json title=\"config/badger.json\"\n{\n  \"name\":   \"Brian\",\n  \"animal\": \"Badger\"\n}\n```\n\nIn all the above cases, the same data will be returned in the Promise.\n\n```js\nconfigDir.config('badger').then(\n  // prints \"Brian is a Badger\"\n  config => console.log(config.name, \"is a\", config.animal)\n)\n```\n\n## Data Path\n\nIf you want to access a particular piece of data from the loaded configuration\nthen you can specify it as a data path fragment following the file name.  Separate the\nfile name and data path fragment with a `#`.\n\n```js\n// load the default export from the badger.(js|mjs) file\nconfigDir.config('badger#name').then(\n  name => console.log(\"The badger is called\", name)\n)\n```\n\nSee the [Data Paths](./manual/data_paths) documentation for further information.\n\n## Configuration Options\n\nThe `jsExt` configuration option can be used to change the file extensions\nthat are recognised for Javascript files (`['js', 'mjs']` by default) and\nthe `codec` option can be used to specify which codecs can be used for\ndata files (`['yaml', 'json']` by default).  Note that the names of the\n`codec` correspond to the file extensions, e.g. a file must have a `.yaml`\nextension to be reconised and read using the `yaml` codec.\n\nFor example, if you only want to look for `.js` Javascript files and `.json`\ndata files then you would set the options like this:\n\n```js\nconst configDir = new Config(\n  rootDir.dir('config'),\n  {\n    jsExt: ['js'],\n    codec: ['json'],\n  };\n)\n```\n\nOr, given that you now only have one value for each of `jsExt` and `codecs` you\ncould do it like this:\n\n```js\nconst configDir = new Config(\n  rootDir.dir('config'),\n  {\n    jsExt: 'js',\n    codec: 'json',\n  };\n)\n```\n\n## Benefits\n\nIn case it's not immediately obvious, one key benefit of using the Config module to\nload configuration files is that it allows you to change the format that you're\nusing at any time.  You might start off with a simple `.json` JSON file then later decide\nthat you want to change to a `.yaml` YAML file so that you can add some comments and whitespace\nto make it more readable.  Further down the line you might need to perform some\ncomputation and switch it to a `.js` Javascript file.\n\nOf course you still need to re-write your configuration file but you don't need to worry about\nupdating any code that's loading it.  When you add a `badger.yaml` file to the configuration\ndirectory it will immediately take precedence over the `badger.json` file, or if you add a\n`badger.js` file it will take precedence over both the `badger.yaml` and `badger.json` files.\n\nThis is why you should **NOT** provide the file extension in the name you pass to the\n`config()` method.  Leave it up to the `config()` method to work that out for you\nand do the right thing.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/library_modules.md",
    "name": "./manual/library_modules.md",
    "content": "# Library Modules\n\nThe [Library](../class/src/Badger/Library.js~Library) module is similar to the\n[Config](../class/src/Badger/Config.js~Config) module except that it's designed to\nwork only with Javascript files.\n\n- [Library Object](#library-object)\n- [Library Directory](#library-directory)\n- [Multiple Library Directories](#multiple-library-directories)\n- [Loading a Library Module](#loading-a-library-module)\n- [Data Path](#data-path)\n- [Configuration Options](#configuration-options)\n\n## Library Object\n\nCreate a library directory specifying one or more directories where your code is located.\nThen call the `library()` method to load a `.js` or `.mjs` module from any of those\ndirectories.\n\n```js title=\"bin/configLoaderExample.js\"\nimport { Library } from '@abw/badger'\n\nconst library = new Library(\n  ['src', 'lib']\n)\n\n// load first of src/Example.js, src/Example.mjs, lib/Example.js or lib/Example.mjs\nlibrary.library('Example').then(\n  exports => {\n    // do something with your code exports here\n  }\n)\n```\n\nThe Promise returned fulfills to an object containing all the exports from your library\nmodule.\n\n## Library Directory\n\nWhen you create a new `Library` object you should specify the name of the\nlibrary directory or directories relative to your current location.\n\n```js\nconst library = new Library('library')\n```\n\nYou can specify it as a string as shown above, or using a\n[Directory](../class/src/Badger/Filesystem/Directory.js~Directory) object as\nshown in the earlier examples. For example, if you have a script in the `bin`\ndirectory and you want to load configuration files from the `config` directory\nlocated alongside it then you can do something like this:\n\n```js title=\"bin/libraryLoaderExample.js\"\nimport { bin, Library } from '@abw/badger'\n\nconst library = new Library(\n  bin(import.meta.url).parent().dir('library')\n)\n```\n\nOr more succinctly like this:\n\n```js title=\"bin/libraryLoaderExample.js\"\nimport { bin, Library } from '@abw/badger'\n\nconst library = new Library(\n  bin(import.meta.url).dir('../library')\n)\n```\n## Multiple Library Directories\n\nIf you have multiple locations that you want to read library files\nfrom then you can specify them as an array.  The values of the array can be\neither Directory objects or strings, or a mixture of the two.  For example if\nyou want to load modules from the `src` and `lib` directories then you could do this:\n\n```js\nconst rootDir = bin(import.meta.url).parent()\n\nconst library = new Library(\n  [rootDir.dir('src'), rootDir.dir('lib')]\n)\n```\n\n## Loading a Library Module\n\nThe `library()` method expects the basename (i.e. no file extension) of a file\nin your library directory (or one of them).\n\n```js\n// load the badger.(js|mjs) file\nlibrary.library('badger').then(\n  badger => {\n    // do something with whatever badger exports here\n  }\n)\n```\n\nIt returns a Promise which fulfills with all the exports from your module.\n\n## Data Path\n\nIf you want to access a particular export then you can specify it as a data path\nfragment following the file name.  Separate the file name and data path fragment\nwith a `#`.\n\n```js\n// load the default export from the badger.(js|mjs) file\nlibrary.library('badger#default').then(\n  badger => {\n    // do something with the default badger export here\n  }\n)\n```\n\nSee the [Data Paths](./manual/data_paths) documentation for further information.\n\n## Configuration Options\n\nThe `jsExt` configuration option can be used to change the file extensions\nthat are recognised for Javascript files (`['js', 'mjs']` by default).\n\nFor example, if you only want to look for `.js` Javascript files and `.json`\ndata files then you would set the options like this:\n\n```js\nconst libary = new Library(\n  rootDir.dir('lib'),\n  {\n    jsExt:  ['js'],\n  };\n)\n```\n\nOr, given that you now only have one value for `jsExt` you\ncould do it like this:\n\n```js\nconst library = new Library(\n  rootDir.dir('lib'),\n  {\n    jsExt:  'js',\n  };\n)\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/data_paths.md",
    "name": "./manual/data_paths.md",
    "content": "# Data Paths\n\nBoth the [Config](../class/src/Badger/Config.js~Config) and\n[Library](../class/src/Badger/Library.js~Library) modules provide a\nconvenient way to drill down into the data returned to fetch a particular item.\n\nFor example, suppose you have the following configuration file in `config/zoo.yaml`.\n\n```yaml title=\"config/zoo.yaml\"\nanimals:\n  aardvark:\n    name: Alan\n  badger:\n    name: Brian\n  cat:\n    name: Colin\n```\n\nIf you have a Config object setup to read files from the `config` directory then\nyou can read the whole of the `zoo` data set like this:\n\n```js\nconfigDir.config('zoo').then(\n  zoo => console.log(\"The badger is called \", zoo.animals.badger.name) // The badger is called Brian\n)\n```\n\nIf you're only looking for a particular item, in this case the name of the badger,\nthen you can add a data path fragment to the file name, like this:\n\n```js\nconfigDir.config('zoo#animals/badger/name').then(\n  name => console.log(\"The badger is called \", name) // The badger is called Brian\n)\n```\n\nEach element of the data path should be separated by a slash.  You can specify\ntext elements to access items in an object (as shown above) or numerical elements to\naccess items in an array.\n\nFor example, if you have some data that looks like this:\n\n```json\n{\n  \"numbers\": [\"zero\", \"one\", \"two\", \"forty-two\"],\n  \"friends\": [\n    { \"name\": \"Ford Prefect\" },\n    { \"name\": \"Zaphod Beeblebrox\" },\n    { \"name\": \"Trillian\" },\n  ]\n}\n```\n\nThen a data path of `numbers/3` would return \"forty-two\", or `friends/0/name` would return\n\"Ford Prefect\".\n\nIf an item is `undefined` or `null` then an error is thrown.  Using the above data this would\nhappen if you tried to access `friends/12/name` or `friends/0/birthday`\n\nYou can add an question mark to the end of a path segment to make it silently return `undefined`\ninstead, e.g. `friends/12?/name` or `friends/0/birthday?`.  Note that the question mark can only\nappear at the end of a segment.  If it appears anywhere else then it is assumed to be the same\nthing as `?/`.  e.g. `foo?bar` is the same as `foo?/bar`.\n\nYou can enclose any segment in single or double quotes if you happen to have data keys that include\n`/` or `?` characters in them.  For example, `question/\"What is the answer?\"` to access the value\n\"42\" in the following data:\n\n```json\n{\n  \"question\": {\n    \"What is the answer?\": 42\n  }\n}\n```\n\nIf you want to make a quoted part optional then add the question mark after the closing quote, e.g.\n`question/\"What is the question?\"` would throw an error because it is not defined, but can be specified\nas `question/\"What is the question?\"?` to instead return `undefined`.\n\nThe data path syntax is intentionally simple and limited.  If you want to do anything more complicated\nthen you should consider using JSON Path instead.\n\nAll of the above applies to the data returned by the Config and Library modules when loaded\nJavascript files.  By default they will return an object containing all exported values from the\nJavascript file.  If you want to access the `default` export, for example, then you can add a `#default` suffix\nto the file basename when loading it.\n\n```js\nlibraryDir.library('Example#default').then(\n  default => {\n    // do something with the default export here\n  }\n)\n```\n\nAny other named export can be accessed in the same way.\n\n```js\nlibraryDir.library('Example#anotherExport').then(\n  anotherExport => {\n    // do something with anotherExport here\n  }\n)\n```\n",
    "static": true,
    "access": "public"
  }
]