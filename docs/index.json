[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Badger/Component.js",
    "content": "import { addDebug } from \"./Utils/Debug.js\";\n\nexport class Component {\n  constructor(workspace, props={}) {\n    this.workspace = workspace;\n    this.props = props;\n    addDebug(this, props.debug, props.debugPrefix, props.debugColor);\n    this.initComponent(props);\n  }\n  initComponent() {\n    // stub for subclasses\n  }\n}\n\nexport default Component",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Component.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Component",
    "memberof": "src/Badger/Component.js",
    "static": true,
    "longname": "src/Badger/Component.js~Component",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Component}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Component.js~Component#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "workspace",
    "memberof": "src/Badger/Component.js~Component",
    "static": false,
    "longname": "src/Badger/Component.js~Component#workspace",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "props",
    "memberof": "src/Badger/Component.js~Component",
    "static": false,
    "longname": "src/Badger/Component.js~Component#props",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "initComponent",
    "memberof": "src/Badger/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Component.js~Component#initComponent",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/Badger/Config.js",
    "content": "import { DirPath } from '@abw/badger-filesystem';\nimport { addDebug } from './Utils/Debug.js';\nimport { dataPath } from '../Badger/Utils/DataPath.js';\nimport { doNothing, fail, splitList } from '@abw/badger-utils';\n\n/**\n * Default configuration options.\n */\nconst defaults = {\n  codec: ['yaml', 'json'],\n  jsExt: ['js', 'mjs'],\n};\n\n/**\n * The Config class implements an object which can load configuration\n * files from a configuration directory.  Files can be Javascript files\n * (with `.js` or `.mjs` extensions by default) or data files using any\n * of the standard codecs (`.yaml` or `.json` by default).\n */\nexport class Config extends DirPath {\n  /**\n   * Constructor for Config object.\n   * @param {String} dir - one or more directories that contain configuration files\n   * @param {Object} [options] - configuration options\n   * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n   * @param {Array|String} [options.codec='yaml json'] - Array or comma/whitespace delimited string of codec names\n   * @return {Object} the Config object\n   */\n  constructor(dir, options={}) {\n    super(dir);\n    const params = { ...defaults, ...options };\n    this.state.codec = splitList(params.codec),\n    this.state.jsExt = splitList(params.jsExt),\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n  }\n\n  /**\n   * Internal method to locate the first config file with one of a number of file extensions.\n   * @param {String} uri - base part of filename\n   * @param {Array} [exts] - array of possible extensions\n   * @param {Function} [makeOptions] - optional function to generate options for a {@link File} object\n   * @return {Object} the {@link File} object if it exists or `undefined` if not\n   */\n  async firstFileWithExt(uri, exts, makeOptions=doNothing) {\n    const dirs = await this.dirs();\n\n    for (let dir of dirs) {\n      for (let ext of exts) {\n        const path = uri + '.' + ext;\n        const file = dir.file(path, makeOptions(uri, ext));\n        this.debug('looking for config file: ', file.path());\n        if (await file.exists()) {\n          this.debug('config file exists: ', file.path());\n          return file;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Internal method to locate a Javascript configuration file with one of the `jsExt` extensions (`.js` or `.mjs` by default)\n   * @param {String} uri - base part of filename\n   * @return {Object} the {@link File} object if it exists or `undefined` if not\n   */\n  async jsFile(uri) {\n    return await this.firstFileWithExt(uri, this.state.jsExt);\n  }\n\n  /**\n   * Internal method to locate a configuration file with one of the `codec` extensions (`.yaml` or `.json` by default)\n   * @param {String} uri - base part of filename\n   * @return {Object} the {@link File} object if it exists or `undefined` if not\n   */\n  async file(uri) {\n    return await this.firstFileWithExt(uri, this.state.codec, (uri, codec) => ({ codec }));\n  }\n\n  /**\n   * Method to fetch configuration data from a file.  The file can be a Javascript file which should\n   * return the configuration data as the default export, or a YAML (`.yaml`) or JSON (`.json`) file.\n   * If the file isn't found then the method returns the `defaults` data if provided, or throws an\n   * error if not.\n   * @param {String} uri - base part of filename\n   * @param {Object} [defaults] - default configuration options to be used if a file isn't found\n   * @return {Object} the configuration data loaded from the file\n   */\n  async config(uri, defaults) {\n    const [base, fragment] = uri.split('#', 2);\n    let jsFile, file, data;\n\n    // first look for a JS file, e.g. <uri>.js, <uri>.mjs\n    if ((jsFile = await this.jsFile(base))) {\n      data = await import(jsFile.path());\n    }\n    // then for a config file with a codec extension, e.g. <uri>.yaml, <uri>.yaml\n    else if ((file = await this.file(base))) {\n      data = await file.read();\n    }\n    // failing that use any default value\n    else if (defaults) {\n      data = defaults;\n    }\n    // anything else is a big pile of fail\n    else {\n      return fail(\"No configuration file for \" + base);\n    }\n    // resolve any data path in a #fragment\n    return fragment\n      ? dataPath(data, fragment)\n      : data;\n  }\n}\n\n/**\n * Function to create a new Config object\n * @param {String} dir - directory or directories containing configuration files\n * @param {Object} [options] - configuration options\n * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n * @param {Array|String} [options.codec='yaml json'] - Array or comma/whitespace delimited string of codec names\n * @return {Object} the Config object\n */\nexport const config = (dir, options) => new Config(dir, options)\n\nexport default Config\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Config.js",
    "static": true,
    "longname": "src/Badger/Config.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Default configuration options.",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"codec\": *, \"jsExt\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "Config",
    "memberof": "src/Badger/Config.js",
    "static": true,
    "longname": "src/Badger/Config.js~Config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Config}",
    "description": "The Config class implements an object which can load configuration\nfiles from a configuration directory.  Files can be Javascript files\n(with `.js` or `.mjs` extensions by default) or data files using any\nof the standard codecs (`.yaml` or `.json` by default).",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "@abw/badger-filesystem~DirPath"
    ]
  },
  {
    "__docId__": 57,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Config.js~Config#constructor",
    "access": "public",
    "description": "Constructor for Config object.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yaml json'",
        "defaultRaw": "'yaml json'",
        "name": "options.codec",
        "description": "Array or comma/whitespace delimited string of codec names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Config object"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "firstFileWithExt",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#firstFileWithExt",
    "access": "public",
    "description": "Internal method to locate the first config file with one of a number of file extensions.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "exts",
        "description": "array of possible extensions"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "makeOptions",
        "description": "optional function to generate options for a {@link File} object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "jsFile",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#jsFile",
    "access": "public",
    "description": "Internal method to locate a Javascript configuration file with one of the `jsExt` extensions (`.js` or `.mjs` by default)",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#file",
    "access": "public",
    "description": "Internal method to locate a configuration file with one of the `codec` extensions (`.yaml` or `.json` by default)",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger/Config.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Config.js~Config#config",
    "access": "public",
    "description": "Method to fetch configuration data from a file.  The file can be a Javascript file which should\nreturn the configuration data as the default export, or a YAML (`.yaml`) or JSON (`.json`) file.\nIf the file isn't found then the method returns the `defaults` data if provided, or throws an\nerror if not.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options to be used if a file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the configuration data loaded from the file"
    }
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "config",
    "memberof": "src/Badger/Config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Config.js~config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{config}",
    "description": "Function to create a new Config object",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "directory or directories containing configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yaml json'",
        "defaultRaw": "'yaml json'",
        "name": "options.codec",
        "description": "Array or comma/whitespace delimited string of codec names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Config object"
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/Badger/Library.js",
    "content": "import { DirPath } from \"@abw/badger-filesystem\";\nimport { addDebug } from \"./Utils/Debug.js\";\nimport { dataPath } from \"./Utils/DataPath.js\";\nimport { fail, splitList } from \"@abw/badger-utils\";\n\n/**\n * Default configuration options.\n */\nconst defaults = {\n  jsExt: 'js mjs',\n}\n\n/**\n * The Library class implements an object which can load Javascript files\n * from one or more library directories.  Files can be Javascript files\n * (with `.js` or `.mjs` extensions by default)\n */\nexport class Library extends DirPath {\n  /**\n   * Constructor for Library object.\n   * @param {String} dir - one or more directories that contain Javascript libraries\n   * @param {Object} [options] - configuration options\n   * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n   * @return {Object} the Library object\n   */\n  constructor(dir, options={}) {\n    super(dir);\n    const params = { ...defaults, ...options };\n    const exts = splitList(params.jsExt).map( ext => ext.replace(/^\\./, '') ); // remove leading '.'\n    this.state.exts = exts;\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n    this.debug(\"state: \", this.state)\n  }\n\n  /**\n   * Method to load a Javascript library in one of the library directories and with one of the `jsExt` extensions (`.js` or `.mjs` by default).\n   * Returns the exports from the library if found or throws an error if not.\n   * @param {String} uri - base part of filename\n   * @return {Object} the exports from the loaded libary\n   */\n  async library(uri) {\n    const [base, fragment] = uri.split('#', 2);\n    const dirs = await this.dirs();\n    const exts = this.state.exts;\n    for (let dir of dirs) {\n      for (let ext of exts) {\n        const file = dir.file(base + '.' + ext);\n        this.debug('looking for module %s as', base, file.path());\n        const exists = await file.exists();\n        if (exists) {\n          const load = await import(file.path());\n          this.debug('loaded %s as', file.path());\n          return fragment\n            ? dataPath(load, fragment)\n            : load;\n        }\n      }\n    }\n    fail(\"Library not found: \", uri);\n  }\n}\n\n/**\n * Function to create a new Library object\n * @param {String} dir - directory or directories containing configuration files\n * @param {Object} [options] - configuration options\n * @param {Array|String} [options.jsExt='js mjs'] - Array or comma/whitespace delimited string of Javascript file extensions\n * @return {Object} the Library object\n */\nexport const library = (dir, options) => new Library(dir, options);\n\nexport default library;",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Library.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Library.js",
    "static": true,
    "longname": "src/Badger/Library.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Default configuration options.",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"jsExt\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "class",
    "name": "Library",
    "memberof": "src/Badger/Library.js",
    "static": true,
    "longname": "src/Badger/Library.js~Library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Library}",
    "description": "The Library class implements an object which can load Javascript files\nfrom one or more library directories.  Files can be Javascript files\n(with `.js` or `.mjs` extensions by default)",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "@abw/badger-filesystem~DirPath"
    ]
  },
  {
    "__docId__": 66,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Library.js~Library",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Library.js~Library#constructor",
    "access": "public",
    "description": "Constructor for Library object.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain Javascript libraries"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Library object"
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger/Library.js~Library",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Library.js~Library#library",
    "access": "public",
    "description": "Method to load a Javascript library in one of the library directories and with one of the `jsExt` extensions (`.js` or `.mjs` by default).\nReturns the exports from the library if found or throws an error if not.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the exports from the loaded libary"
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "library",
    "memberof": "src/Badger/Library.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Library.js~library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{library}",
    "description": "Function to create a new Library object",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "directory or directories containing configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Library object"
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/Badger/Utils/AppStatus.js",
    "content": "import process from 'node:process'\nimport { brightGreen, brightRed } from './Color.js';\n\nexport const appStatus = app => async function(...args) {\n  try {\n    const message = await app(...args);\n    if (message) {\n      console.log(brightGreen(`✓ ${message}`));\n    }\n    return true;\n  }\n  catch (error) {\n    console.log(\n      process.env.DEBUG\n        ? error\n        : brightRed(`✗ ${error.message||error}`)\n    )\n    return false;\n  }\n}\n\nexport default appStatus",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/AppStatus.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "appStatus",
    "memberof": "src/Badger/Utils/AppStatus.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/AppStatus.js~appStatus",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{appStatus}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/Badger/Utils/CmdLine.js",
    "content": "import { fail, hasValue, isArray, splitHash } from '@abw/badger-utils';\nimport process from 'node:process'\nimport { prompt } from './Prompt.js';\n\nexport const cmdLine = () => process.argv.slice(2);\n\nexport function cmdLineFlags(config, args) {\n  // allow config and/or args to be undefined, and also allow an array of\n  // arguments to be passed as the first argument\n  if (! config) {\n    config = { }\n  }\n  else if (isArray(config)) {\n    args = config;\n    config = { };\n  }\n  if (! args) {\n    args ||= cmdLine()\n  }\n\n  const options = config.options ? splitHash(config.options) : false;\n  const others  = config.others || 'error';\n  const short   = config.short || { };\n  const on      = config.on || { }\n  let   n       = 0;\n  let   flags   = { };\n\n  while (n < args.length) {\n    const match = args[n].match(/^-(-)?(.*)/);\n    if (match) {\n      const long = match[1] === '-';\n      const name = (! long && hasValue(short[match[2]]))\n        ? short[match[2]]\n        : match[2];\n\n      if (on[name]) {\n        if (on[name](name, args.splice(n, 1)[0], args, flags)) {\n          continue;\n        }\n        else {\n          args.splice(n, 0, match[0]);\n        }\n      }\n\n      if (options && ! options[name]) {\n        switch (others) {\n          case 'collect':\n            break\n          case 'remove':\n            args.splice(n, 1)[0];\n          // eslint-disable-next-line no-fallthrough\n          case 'keep':\n            n++;\n            continue;\n          case 'error':\n            return fail(`Invalid command line flag: ${match[0]}`);\n          default:\n            return fail(`Invalid \"others\" option: ${others}`)\n        }\n      }\n\n      args.splice(n, 1);\n      flags[name] = true;\n    }\n    else {\n      n++;\n    }\n  }\n  return { flags, args }\n}\n\nexport async function cmdLineArg(argPrompt, args=cmdLine()) {\n  if (args.length) {\n    return args.shift();\n  }\n  else if (argPrompt) {\n    return await prompt(argPrompt);\n  }\n  return undefined;\n}\n\nexport async function cmdLineArgs(argPrompts, args=cmdLine()) {\n  let results = [ ];\n  if (argPrompts) {\n    for (let argPrompt of argPrompts) {\n      const response = await cmdLineArg(argPrompt, args);\n      if (! response?.length) {\n        return undefined;\n      }\n      results.push(response);\n    }\n    return results;\n  }\n  else {\n    return args;\n  }\n}",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/CmdLine.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "cmdLine",
    "memberof": "src/Badger/Utils/CmdLine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/CmdLine.js~cmdLine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLine}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "cmdLineFlags",
    "memberof": "src/Badger/Utils/CmdLine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/CmdLine.js~cmdLineFlags",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLineFlags}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"flags\": *, \"args\": *}"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "cmdLineArg",
    "memberof": "src/Badger/Utils/CmdLine.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/CmdLine.js~cmdLineArg",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLineArg}",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "argPrompt",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "cmdLineArgs",
    "memberof": "src/Badger/Utils/CmdLine.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/CmdLine.js~cmdLineArgs",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLineArgs}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "argPrompts",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/Badger/Utils/Color.js",
    "content": "import { isObject } from \"@abw/badger-utils\";\n\nconst ANSIStart  = '\\u001B[';\nconst ANSIEnd    = 'm';\nconst ANSIColors = {\n  reset:    0,\n  bold:     1,\n  bright:   1,\n  dark:     2,\n  black:    0,\n  red:      1,\n  green:    2,\n  yellow:   3,\n  blue:     4,\n  magenta:  5,\n  cyan:     6,\n  grey:     7,\n  white:    8,\n  fg:      30,\n  bg:      40,\n};\n\n/**\n * Returns an ANSI escape code for a color string.  This can be a single color\n * name, e.g. `red`, `green`, etc., or a color prefixed with `bright` or `dark`,\n * e.g. `bright red`, `dark green`, etc.  An optional section argument can be\n * set to `fg` (default) to set a foreground color or `bg` for a background color.\n * @param {String} color - color name with optional modifier prefix\n * @param {String} [base='fg'] - `fg` or `bg` to set foreground or background color respectively\n * @return {String} ANSI escape code string\n * @example\n * const str = escapeCode('red')\n * @example\n * const str = escapeCode('bright red')\n * @example\n * const str = escapeCode('bright red', 'bg')\n */\nexport const ANSIescapeCode = (color, base='fg') => {\n  let   codes = [ ];\n  let   pair  = color.split(/ /, 2);\n  const hue   = pair.pop();\n  const code  = (base ? ANSIColors[base] : 0) + ANSIColors[hue];\n  codes.push(code);\n  if (pair.length) {\n    const shade = pair.length ? pair.shift() : 'dark';\n    codes.push(ANSIColors[shade])\n  }\n  // console.log('escapeCode(%s, %s) => ', color, base, codes.join(';'));\n  return ANSIStart + codes.join(';') + ANSIEnd;\n}\n\n/**\n * Returns an ANSI escape code for a color string or combination of foreground and\n * background colors.\n * @param {String|Object} colors - either a simple color name or object contain foreground and background colors\n * @param {String} [colors.fg] - foreground color\n * @param {String} [colors.fg] - background color\n * @return {String} ANSI escape code string\n * @example\n * const str = escape('red')\n * @example\n * const str = escape('bright red')\n * @example\n * const str = escape({ fg: 'bright yellow', bg: 'blue' })\n */\nexport const ANSIescape = (colors={}) => {\n  const col = isObject(colors) ? colors : { fg: colors };\n  let escapes = [ ];\n  if (col.bg) {\n    escapes.push(ANSIescapeCode(col.bg, 'bg'));\n  }\n  if (col.fg) {\n    escapes.push(ANSIescapeCode(col.fg, 'fg'));\n  }\n  return escapes.join('');\n}\n\n/**\n * Returns an ANSI escape code to reset all colors.\n * @return {String} ANSI escape reset string\n */\nexport const ANSIreset = () => ANSIescapeCode('reset', false)\n\n/**\n * Returns a function to display strings in a particular color.\n * @param {String} colors - color(s) to display string\n * @return {Function} function to display strings in the pre-defined color(s)\n */\nexport const color = (colors) =>\n  (...text) => ANSIescape(colors) + text.join('') + ANSIreset();\n\nexport const black         = color('black');\nexport const red           = color('red');\nexport const green         = color('green');\nexport const yellow        = color('yellow');\nexport const blue          = color('blue');\nexport const magenta       = color('magenta');\nexport const cyan          = color('cyan');\nexport const grey          = color('grey');\nexport const white         = color('white');\nexport const brightBlack   = color('bright black');\nexport const brightRed     = color('bright red');\nexport const brightGreen   = color('bright green');\nexport const brightYellow  = color('bright yellow');\nexport const brightBlue    = color('bright blue');\nexport const brightMagenta = color('bright magenta');\nexport const brightCyan    = color('bright cyan');\nexport const brightGrey    = color('bright grey');\nexport const brightWhite   = color('bright white');\nexport const darkBlack     = color('dark black');\nexport const darkRed       = color('dark red');\nexport const darkGreen     = color('dark green');\nexport const darkYellow    = color('dark yellow');\nexport const darkBlue      = color('dark blue');\nexport const darkMagenta   = color('dark magenta');\nexport const darkCyan      = color('dark cyan');\nexport const darkGrey      = color('dark grey');\nexport const darkWhite     = color('dark white');\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Color.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "ANSIStart",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIStart",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "ANSIEnd",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIEnd",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "ANSIColors",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIColors",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"reset\": *, \"bold\": number, \"bright\": number, \"dark\": number, \"black\": *, \"red\": number, \"green\": number, \"yellow\": number, \"blue\": number, \"magenta\": number, \"cyan\": number, \"grey\": number, \"white\": number, \"fg\": number, \"bg\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "ANSIescapeCode",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIescapeCode",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescapeCode}",
    "description": "Returns an ANSI escape code for a color string.  This can be a single color\nname, e.g. `red`, `green`, etc., or a color prefixed with `bright` or `dark`,\ne.g. `bright red`, `dark green`, etc.  An optional section argument can be\nset to `fg` (default) to set a foreground color or `bg` for a background color.",
    "examples": [
      "const str = escapeCode('red')",
      "const str = escapeCode('bright red')",
      "const str = escapeCode('bright red', 'bg')"
    ],
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "color name with optional modifier prefix"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'fg'",
        "defaultRaw": "'fg'",
        "name": "base",
        "description": "`fg` or `bg` to set foreground or background color respectively"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "ANSI escape code string"
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "ANSIescape",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIescape",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescape}",
    "description": "Returns an ANSI escape code for a color string or combination of foreground and\nbackground colors.",
    "examples": [
      "const str = escape('red')",
      "const str = escape('bright red')",
      "const str = escape({ fg: 'bright yellow', bg: 'blue' })"
    ],
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": "either a simple color name or object contain foreground and background colors"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "colors.fg",
        "description": "foreground color"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "colors.fg",
        "description": "background color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "ANSI escape code string"
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "ANSIreset",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~ANSIreset",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIreset}",
    "description": "Returns an ANSI escape code to reset all colors.",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "ANSI escape reset string"
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "color",
    "memberof": "src/Badger/Utils/Color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Color.js~color",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{color}",
    "description": "Returns a function to display strings in a particular color.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": "color(s) to display string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "function to display strings in the pre-defined color(s)"
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "black",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~black",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{black}",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "red",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~red",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{red}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "green",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~green",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{green}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "yellow",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~yellow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{yellow}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "blue",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~blue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{blue}",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "magenta",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~magenta",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{magenta}",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "cyan",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~cyan",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cyan}",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "grey",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~grey",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{grey}",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "white",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~white",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{white}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "brightBlack",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~brightBlack",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightBlack}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "brightRed",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~brightRed",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightRed}",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "brightGreen",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~brightGreen",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightGreen}",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "brightYellow",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~brightYellow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightYellow}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "brightBlue",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~brightBlue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightBlue}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "brightMagenta",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~brightMagenta",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightMagenta}",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "brightCyan",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~brightCyan",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightCyan}",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "brightGrey",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~brightGrey",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightGrey}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "brightWhite",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~brightWhite",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightWhite}",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "darkBlack",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~darkBlack",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkBlack}",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "darkRed",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~darkRed",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkRed}",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "darkGreen",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~darkGreen",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkGreen}",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "darkYellow",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~darkYellow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkYellow}",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "darkBlue",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~darkBlue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkBlue}",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "darkMagenta",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~darkMagenta",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkMagenta}",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "darkCyan",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~darkCyan",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkCyan}",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "darkGrey",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~darkGrey",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkGrey}",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "darkWhite",
    "memberof": "src/Badger/Utils/Color.js",
    "static": true,
    "longname": "src/Badger/Utils/Color.js~darkWhite",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkWhite}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/Badger/Utils/DataPath.js",
    "content": "import { fail, hasValue, isArray, noValue } from \"@abw/badger-utils\";\n\n/**\n * Characters that can be escaped in quoted strings.\n */\nconst quotedEscapes = {\n  b: \"\\b\",\n  f: \"\\f\",\n  n: \"\\n\",\n  r: \"\\r\",\n  t: \"\\t\",\n  v: \"\\v\",\n  '\"': '\"',\n  \"'\": \"'\",\n  '\\\\': '\\\\',\n}\n\n/**\n * Match a double quoted string and expand escaped characters\n * @param {String} [string] - the string to match\n */\nexport const matchDoubleQuotedString = string => {\n  const regex = /^\"((?:\\\\[\\\\\"nrt]|.)*?)\"$/\n  const match = string.match(regex);\n  return match\n    ? match[1].replace(/\\\\([\\\\\"bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`)\n    : null;\n}\n\n/**\n * Match a single quoted string and expand escaped characters\n * @param {String} [string] - the string to match\n */\nexport const matchSingleQuotedString = string => {\n  const regex = /^'((?:\\\\[\\\\']|.)*?)'$/\n  const match = string.match(regex);\n  return match\n    ? match[1].replace(/\\\\([\\\\'bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`)\n    : null;\n}\n\n/**\n * Split a data path into component parts\n * @param {String} [path] - the path to split\n */\nexport const splitDataPath = path => {\n  // * match a slash: \\/\n  // * match a single quoted string: '...'\n  // * match a double quoted string: \"...\"\n  // * match anything else: hello world!\n  let parts = [ ];\n  const regex = /(?:(\\/)|'((?:\\\\[\\\\']|.)*?)'|\"((?:\\\\[\\\\\"nrt]|.)*?)\"|([^/?]+))(\\??)/g;\n  const matches = [...path.matchAll(regex)];\n\n  matches.map(\n    ([ , , single, double, other, optional]) => {\n      let part;\n      // console.log('match [slash:%s] [single:%s] [double:%s] [other:%s]', slash, single, double, other);\n\n      if (single) {\n        part = single.replace(/\\\\([\\\\'bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`);\n      }\n      else if (double) {\n        part = double.replace(/\\\\([\\\\\"bfnrtv])/g, (all, one) => quotedEscapes[one] || `\\\\${one}`);\n      }\n      else if (other) {\n        part = other\n      }\n      if (hasValue(part)) {\n        parts.push(optional ? [part, {optional:true}] : part);\n      }\n    }\n  )\n  // console.log('MATCHED ', parts);\n\n  return parts;\n}\n\n/**\n * Traverse a data structure using a path.\n * @param {Object} [data] - the data to traverse\n * @param {String} [path] - the data path\n */\nexport const dataPath = (data, path) => {\n  let root  = data;\n  let parts = splitDataPath(path);\n  let done  = [ ];\n  // console.log('parts: ', parts);\n\n  for (let part of parts) {\n    const [word, opts] = isArray(part) ? part : [part, {}];\n    root = root[word];\n    done.push(word);\n    if (noValue(root)) {\n      if (opts.optional) {\n        return root;\n      }\n      else {\n        fail(\"No value for data at path: \", done.join('/'));\n      }\n    }\n  }\n  return root;\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/DataPath.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "quotedEscapes",
    "memberof": "src/Badger/Utils/DataPath.js",
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~quotedEscapes",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Characters that can be escaped in quoted strings.",
    "lineNumber": 6,
    "type": {
      "types": [
        "{\"b\": string, \"f\": string, \"n\": string, \"r\": string, \"t\": string, \"v\": string, \"\"\": string, \"'\": string, \"\\\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "matchDoubleQuotedString",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~matchDoubleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchDoubleQuotedString}",
    "description": "Match a double quoted string and expand escaped characters",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "string",
        "description": "the string to match"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "matchSingleQuotedString",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~matchSingleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchSingleQuotedString}",
    "description": "Match a single quoted string and expand escaped characters",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "string",
        "description": "the string to match"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "splitDataPath",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~splitDataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{splitDataPath}",
    "description": "Split a data path into component parts",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "the path to split"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "dataPath",
    "memberof": "src/Badger/Utils/DataPath.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/DataPath.js~dataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dataPath}",
    "description": "Traverse a data structure using a path.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to traverse"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "the data path"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/Badger/Utils/Debug.js",
    "content": "import { ANSIescape, ANSIreset } from './Color.js'\nimport { doNothing } from '@abw/badger-utils';\n\n/**\n * Returns a debugging function which is enabled by the first `enabled` argument.\n * If this is `false` then it returns a function which does nothing.  If it is\n * true then it returns a function that forwards all arguments to `console.log`.\n * An optional `prefix` be be specified to prefix each debugging line.  The\n * optional third argument `color` can be used to specify a color for the prefix.\n * @param {Boolean} enabled - is debugging enabled?\n * @param {String} [prefix] - optional prefix for debugging messages\n * @param {String|Object} [color] - a color name or object (see {@link Badger/Utils/Color})\n * @param {String} [color.fg] - foreground color\n * @param {String} [color.bg] - background color\n * @return {Function} a debugging function\n * @example\n * const debug = Debugger(true)\n * @example\n * const debug = Debugger(true, 'Debug > ')\n * @example\n * const debug = Debugger(true, 'Debug > ', 'blue')\n * @example\n * const debug = Debugger(true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })\n */\nexport function Debugger(enabled, prefix='', color) {\n  return enabled\n    ? prefix\n      ? (format, ...args) =>\n          console.log(\n            '%s' + prefix + '%s' + format,\n            color ? ANSIescape(color) : '',\n            ANSIreset(),\n            ...args,\n          )\n      : console.log.bind(console)\n    : doNothing;\n}\n\n/**\n * Creates a debugging function via {@link Debugger} and attaches it to the object\n * passed as the first argument as the `debug` function.\n * @param {Object} obj - the object to receive the `debug` function\n * @param {Boolean} enabled - is debugging enabled?\n * @param {String} [prefix] - optional prefix for debugging messages\n * @param {String|Object} [color] - a color name or object (see {@link Badger/Utils/Color})\n * @param {String} [color.fg] - foreground color\n * @param {String} [color.bg] - background color\n * @example\n * const debug = addDebug(myObject, true)\n * @example\n * const debug = addDebug(myObject, true, 'Debug > ')\n * @example\n * const debug = addDebug(myObject, true, 'Debug > ', 'blue')\n * @example\n * const debug = addDebug(myObject, true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })\n */\nexport function addDebug(obj, enabled, prefix='', color) {\n  obj.debug = Debugger(enabled, prefix, color);\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Debug.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "Debugger",
    "memberof": "src/Badger/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Debug.js~Debugger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Debugger}",
    "description": "Returns a debugging function which is enabled by the first `enabled` argument.\nIf this is `false` then it returns a function which does nothing.  If it is\ntrue then it returns a function that forwards all arguments to `console.log`.\nAn optional `prefix` be be specified to prefix each debugging line.  The\noptional third argument `color` can be used to specify a color for the prefix.",
    "examples": [
      "const debug = Debugger(true)",
      "const debug = Debugger(true, 'Debug > ')",
      "const debug = Debugger(true, 'Debug > ', 'blue')",
      "const debug = Debugger(true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })"
    ],
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "is debugging enabled?"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "prefix",
        "description": "optional prefix for debugging messages"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "color",
        "description": "a color name or object (see {@link Badger/Utils/Color})"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.fg",
        "description": "foreground color"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.bg",
        "description": "background color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "a debugging function"
    }
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "addDebug",
    "memberof": "src/Badger/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Debug.js~addDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{addDebug}",
    "description": "Creates a debugging function via {@link Debugger} and attaches it to the object\npassed as the first argument as the `debug` function.",
    "examples": [
      "const debug = addDebug(myObject, true)",
      "const debug = addDebug(myObject, true, 'Debug > ')",
      "const debug = addDebug(myObject, true, 'Debug > ', 'blue')",
      "const debug = addDebug(myObject, true, 'Debug > ', { bg: 'blue', fg: 'bright yellow' })"
    ],
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "the object to receive the `debug` function"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "is debugging enabled?"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "prefix",
        "description": "optional prefix for debugging messages"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "color",
        "description": "a color name or object (see {@link Badger/Utils/Color})"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.fg",
        "description": "foreground color"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "color.bg",
        "description": "background color"
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/Badger/Utils/Exit.js",
    "content": "import process from 'node:process'\n\nexport function exit(value, message) {\n  if (message) {\n    console.log(message);\n  }\n  process.exit(value);\n}\n\nexport function quit(message) {\n  exit(0, message);\n}\n\nexport function abort(message) {\n  exit(1, message);\n}",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Exit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "exit",
    "memberof": "src/Badger/Utils/Exit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Exit.js~exit",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{exit}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "quit",
    "memberof": "src/Badger/Utils/Exit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Exit.js~quit",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{quit}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "abort",
    "memberof": "src/Badger/Utils/Exit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Exit.js~abort",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{abort}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/Badger/Utils/Misc.js",
    "content": "import process from \"node:process\"\n\n/**\n * Returns an array of the `process.argv` array from offset 2 onwards,\n * i.e. removing the node path and script name.\n * @param {Array} argv - list of arguments, defaults to `process.argv`\n * @return {Array} array of arguments excluding the first two\n */\nexport function args(argv=process.argv) {\n  return argv.slice(2);\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Misc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "args",
    "memberof": "src/Badger/Utils/Misc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Misc.js~args",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{args}",
    "description": "Returns an array of the `process.argv` array from offset 2 onwards,\ni.e. removing the node path and script name.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "list of arguments, defaults to `process.argv`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array of arguments excluding the first two"
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/Badger/Utils/Options.js",
    "content": "import process from 'node:process';\nimport prompter from 'prompts'\nimport { Command } from 'commander';\nimport { color } from './Color.js';\nimport { fail, hasValue, splitList } from '@abw/badger-utils';\n\nexport const defaults = {\n  verboseColor:     'magenta',\n  titleColor:       'bright yellow',\n  underlineColor:   'dark yellow',\n  infoColor:        'cyan',\n  tickColor:        'green',\n  questionColor:    'bright white',\n  answerColor:      'bright green',\n  sectionNewlines:  true\n};\n\nexport const options = async config => {\n  const vcol = color(options.verboseColor || defaults.verboseColor);\n  const command = new Command;\n\n  // set command name, description and version\n  if (config.name) {\n    command.name(config.name);\n  }\n  if (config.description) {\n    command.description(config.description);\n  }\n  if (config.version) {\n    command.version(config.version);\n  }\n\n  // define the -y / -yes and -v / --verbose options\n  if (config.yes) {\n    command.option('-y, --yes', 'Accept default answers')\n  }\n  if (config.verbose) {\n    command.option('-v, --verbose', 'Verbose output')\n  }\n  if (config.quiet) {\n    command.option('-q, --quiet', 'Quiet output')\n  }\n\n  // add in other command line options\n  config.options\n    ?.filter(\n      option => {\n        if (hasValue(option.arg) && ! option.arg) {\n          // allow arg: false to indicate no command line argument\n          return false;\n        }\n        if (option.title) {\n          // section break\n          return;\n        }\n        return hasValue(option.name);\n      }\n    )\n    .forEach(\n      option => {\n        const name    = option.name;\n        const about   = option.about;\n        const deflt   = option.default;\n        const handler = option.handler;\n        const short   = option.short;\n        const type    = option.type;\n        const pattern = option.pattern || (hasValue(type) ? `<${type}>` : undefined);\n        let string    = `--${name}`;\n        let args      = [];\n        if (hasValue(short)) {\n          string = `-${short}, ${string}`;\n        }\n        if (hasValue(pattern)) {\n          string = `${string} ${pattern}`;\n        }\n        args.push(string);\n        if (hasValue(about)) {\n          args.push(about);\n        }\n        if (hasValue(handler)) {\n          args.push(handler);\n        }\n        if (hasValue(deflt)) {\n          args.push(deflt);\n        }\n        command.option(...args)\n      }\n    )\n\n  let commands = { };\n\n  config.commands?.forEach(\n    option => {\n      const name    = option.name;\n      const about   = option.about;\n      const type    = option.type;\n      const pattern = option.pattern || (hasValue(type) ? `<${type}>` : undefined);\n      let   args    = [];\n      let   string  = name;\n      let   cmd     = command.command(string)\n      if (hasValue(pattern)) {\n        cmd.argument(pattern);\n      }\n      if (hasValue(about)) {\n        cmd.description(about);\n      }\n      if (hasValue(option.arguments)) {\n        splitList(option.arguments).forEach(\n          argument => {\n            args.push(matchArgName(argument));\n            cmd.argument(argument)\n          }\n        )\n      }\n      cmd.action(\n        (...values) => {\n          commands[name] = args.length\n            ? args.reduce(\n              (opts, arg) => {\n                opts[arg] = values.shift()\n                return opts;\n              },\n              { }\n            )\n            : values[0]\n        }\n      )\n      //console.log({ args });\n      //command.command(...args)\n    }\n  )\n\n  // parse the command line arguments\n  command.parse();\n  const cmdline = command.opts();\n\n  // if the -y / --yes option has been specified then accept all\n  // default answers automatically\n  const yes     = config.yes && cmdline.yes;\n  const verbose = config.verbose && cmdline.verbose;\n  const quiet   = config.quiet && cmdline.quiet;\n\n  if (yes) {\n    if (verbose && ! quiet) {\n      process.stdout.write(vcol('Accepting default answers (-y option is set)\\n'))\n    }\n    prompter.override(cmdline);\n  }\n\n  // build up the list of prompts for interactive questions\n  let prompts = [ ];\n  config.options?.forEach(\n    option => {\n      const type     = option.type || 'text';\n      const name     = option.name;\n      const prompt   = option.prompt;\n      const noArg    = hasValue(option.arg) && ! option.arg;\n      const validate = option.validate ||\n        (option.required\n          ? value => (hasValue(value) && value.toString().length)\n            ? true\n            : (options.invalid || `You must enter a value for ${name}`)\n          : undefined\n        )\n\n      // special process for initial\n      // - use cmdline[name]\n      // - or if noArg, use option.default\n      // - if a select list and not a number, find the index\n      let initial = noArg ? option.default : cmdline[name];\n      if (type === 'select' && hasValue(initial)) {\n        if (! Number.isInteger(initial)) {\n          // console.log('looking up select option for [%s]', initial);\n          initial = option.choices?.findIndex( i => i.value === initial );\n          if (initial < 0) {\n            initial = 0;\n          }\n        }\n      }\n\n      if (hasValue(prompt)) {\n        prompts.push(\n          {\n            ...option,\n            type: (\n              hasValue(initial)\n                ? () => {\n                    yes && (quiet || answer({ question: prompt, answer: initial }));\n                    return type;\n                  }\n                : type\n            ),\n            name,\n            message: prompt,\n            initial: initial,\n            validate: validate,\n          },\n        )\n      }\n      else if (option.title || option.info) {\n        prompts.push(\n          {\n            type: () => {\n              quiet || section(option);\n              return false;\n            }\n          }\n        );\n      }\n    }\n  );\n\n  // prompt the user to answer/confirm questions\n  let cancelled = false;\n  const answers = await prompter(\n    prompts,\n    {\n      onCancel: () => {\n        cancelled = true;\n        return false;\n      }\n    }\n  );\n\n  return cancelled\n    ? undefined\n    : {\n        ...cmdline, ...answers, ...commands\n      }\n}\n\nfunction matchArgName(argument) {\n  const match = argument.match(/(\\w+)/);\n  if (! match) {\n    fail(\"Can't parse argument name: \", argument);\n  }\n  return match[1];\n}\n\nexport const section = option => {\n  const title = option.title;\n  const tcol  = color(option.titleColor || defaults.titleColor);\n  const ucol  = color(option.underlineColor || defaults.underlineColor);\n  const icol  = color(option.infoColor || defaults.infoColor);\n  const nl    = (hasValue(option.newlines) ? option.newlines : defaults.sectionNewlines) ? \"\\n\" : \"\";\n\n  if (title) {\n    const uline = '-'.repeat(title.length);\n    process.stdout.write(nl + tcol(title) + \"\\n\" + ucol(uline) + \"\\n\" + nl);\n  }\n\n  if (option.info) {\n    process.stdout.write(icol(option.info) + \"\\n\" + nl);\n  }\n}\n\nexport const answer = option => {\n  const tcol  = color(option.tickColor || defaults.tickColor);\n  const qcol  = color(option.questionColor || defaults.questionColor);\n  const acol  = color(option.answerColor || defaults.answerColor);\n  process.stdout.write(tcol(\"✔ \") + qcol(option.question) + \" \" + acol(option.answer) + \"\\n\");\n}\n\nexport default options",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Utils/Options.js",
    "static": true,
    "longname": "src/Badger/Utils/Options.js~defaults",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{defaults}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"verboseColor\": string, \"titleColor\": string, \"underlineColor\": string, \"infoColor\": string, \"tickColor\": string, \"questionColor\": string, \"answerColor\": string, \"sectionNewlines\": boolean}"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "options",
    "memberof": "src/Badger/Utils/Options.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Options.js~options",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{options}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "matchArgName",
    "memberof": "src/Badger/Utils/Options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Options.js~matchArgName",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "params": [
      {
        "name": "argument",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "section",
    "memberof": "src/Badger/Utils/Options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Options.js~section",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{section}",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "answer",
    "memberof": "src/Badger/Utils/Options.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Options.js~answer",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{answer}",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "src/Badger/Utils/Params.js",
    "content": "import { joinListOr, splitList, hasValue, fail } from \"@abw/badger-utils\";\n\n/**\n * Assert that a parameter object contains an item with a defined/non-null value\n * @param {Object} params={} - parameters object\n * @param {String} name - parameter that must be included\n * @return {any} the parameter value\n * @throws {Error} if the parameter is not defined or null\n * @example\n * const foo = requiredParam({ foo: 10 }, 'foo');\n */\nexport function requiredParam(params={}, name) {\n  const value = params[name];\n  if (hasValue(value)) {\n    return value;\n  }\n  else {\n    fail(\"Missing value for required parameter: \", name);\n  }\n}\n\n/**\n * Assert that a parameter object contains all specified item with a defined/non-null value\n * @param {Object} params={} - parameters object\n * @param {Array|String} names - parameters that must be included, as an Array or whitespace/comma delimited string (see {@link splitList})\n * @return {Array} the parameter values\n * @throws {Error} if any parameter is not defined or null\n * @example\n * const [foo, bar] = requiredParams({ foo: 10, bar: 20 }, 'foo bar');\n */\nexport function requiredParams(params={}, names) {\n  return splitList(names).map( name => requiredParam(params, name) );\n}\n\n/**\n * An alias for {@link requiredParams} for people who don't like typing long names (and for symmetry with {@link anyParams}))\n */\nexport const allParams=requiredParams;\n\n/**\n * Assert that a parameter object contains any of the specified items with a defined/non-null value\n * @param {Object} params={} - parameters object\n * @param {Array|String} names - parameters of which at least one must be included, as an Array or whitespace/comma delimited string (see {@link splitList})\n * @return {Array} the parameter values\n * @throws {Error} if any parameter is not defined or null\n * @example\n * const [foo, bar] = anyParams({ foo: 10, wiz: 99 }, 'foo bar');\n */\nexport function anyParams(params, names) {\n  let found = false;\n  const nlist  = splitList(names);\n  const values = nlist.map(\n    name => {\n      const value = params[name];\n      if (hasValue(value)) {\n        found = true;\n      }\n      return value;\n    }\n  );\n  return found\n    ? values\n    : fail(\"Missing value for one of: \", joinListOr(nlist));\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Params.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "requiredParam",
    "memberof": "src/Badger/Utils/Params.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Params.js~requiredParam",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParam}",
    "description": "Assert that a parameter object contains an item with a defined/non-null value",
    "examples": [
      "const foo = requiredParam({ foo: 10 }, 'foo');"
    ],
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "parameters object"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "parameter that must be included"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "the parameter value"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the parameter is not defined or null"
      }
    ]
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "requiredParams",
    "memberof": "src/Badger/Utils/Params.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Params.js~requiredParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParams}",
    "description": "Assert that a parameter object contains all specified item with a defined/non-null value",
    "examples": [
      "const [foo, bar] = requiredParams({ foo: 10, bar: 20 }, 'foo bar');"
    ],
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "parameters object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "parameters that must be included, as an Array or whitespace/comma delimited string (see {@link splitList})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the parameter values"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if any parameter is not defined or null"
      }
    ]
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "allParams",
    "memberof": "src/Badger/Utils/Params.js",
    "static": true,
    "longname": "src/Badger/Utils/Params.js~allParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{allParams}",
    "description": "An alias for {@link requiredParams} for people who don't like typing long names (and for symmetry with {@link anyParams}))",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "anyParams",
    "memberof": "src/Badger/Utils/Params.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Params.js~anyParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{anyParams}",
    "description": "Assert that a parameter object contains any of the specified items with a defined/non-null value",
    "examples": [
      "const [foo, bar] = anyParams({ foo: 10, wiz: 99 }, 'foo bar');"
    ],
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "parameters object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "parameters of which at least one must be included, as an Array or whitespace/comma delimited string (see {@link splitList})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the parameter values"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if any parameter is not defined or null"
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/Badger/Utils/Progress.js",
    "content": "import { now } from '@abw/badger-timestamp';\nimport { isInteger, isString } from '@abw/badger-utils';\nimport { addDebug } from './Debug.js';\nimport { color } from './Color.js';\nimport process from 'node:process';\n\nexport const charTypes = {\n  border: '┌─┐│└─┘|-',\n  background: '+∙',\n  fill: '*',\n};\n\nexport const colours = {\n  border:     'green',\n  background: 'dark grey',\n  foreground: 'blue',\n  fill:       'bright yellow'\n};\n\nexport const picture = {\n  charTypes,\n  source: `\n┌────────────────────────────────────────────────────────────────┐\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙ ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ∙∙ │\n│ ∙∙ ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ∙∙ │\n│ ∙∙ ●● ◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦ ●● ∙∙ │\n│ ∙∙ ●● ◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦ ●● ∙∙ │\n│ ∙∙∙ ●● ◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦ ●● ∙∙∙ │\n│ ∙∙∙∙ ●● ◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦ ●● ∙∙∙∙ │\n│ ∙∙∙∙∙ ●● ◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦ ●● ∙∙∙∙∙ │\n│ ∙∙∙∙∙∙ ●● ◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦ ●● ∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙ ●● *◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦* ●● ∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙ ●● **◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦** ●● ∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙ ●● *****◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦◦***** ●● ∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● *******◦◦◦◦◦◦◦◦◦◦******* ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● ****************** ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● ************ ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● ****** ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● **** ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● **** ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● **** ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● ◦****◦ ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● ◦◦◦◦****◦◦◦◦ ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● ◦◦◦◦◦◦◦****◦◦◦◦◦◦◦ ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ ●● ◦◦◦◦◦◦◦◦◦******◦◦◦◦◦◦◦◦◦ ●● ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙ ●● ◦◦◦◦◦◦◦◦◦◦◦********◦◦◦◦◦◦◦◦◦◦◦ ●● ∙∙∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙ ●● ◦◦◦◦◦◦◦◦◦◦◦************◦◦◦◦◦◦◦◦◦◦◦ ●● ∙∙∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙∙∙ ●● ◦◦◦◦◦◦◦◦◦◦******************◦◦◦◦◦◦◦◦◦◦ ●● ∙∙∙∙∙∙∙∙ │\n│ ∙∙∙∙∙∙ ●● ◦◦◦◦◦◦◦◦◦************************◦◦◦◦◦◦◦◦◦ ●● ∙∙∙∙∙∙ │\n│ ∙∙∙∙∙ ●● ◦◦◦◦◦◦◦******************************◦◦◦◦◦◦◦ ●● ∙∙∙∙∙ │\n│ ∙∙∙∙ ●● ◦◦◦◦◦************************************◦◦◦◦◦ ●● ∙∙∙∙ │\n│ ∙∙∙ ●● ◦◦◦◦****************************************◦◦◦◦ ●● ∙∙∙ │\n│ ∙∙ ●● ◦◦◦********************************************◦◦◦ ●● ∙∙ │\n│ ∙∙ ●● ◦◦**********************************************◦◦ ●● ∙∙ │\n│ ∙∙ ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ∙∙ │\n│ ∙∙ ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ∙∙ │\n│ ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ │\n└────────────────────────────────────────────────────────────────┘\n`\n};\n\nconst defaults = {\n  size:    100,\n  elapsed: false,\n  picture,\n  colours\n}\n\nexport function preparePicture(config) {\n  const { source, charTypes={ background: '' } } = config\n  const picture  = source.trim() + \"\\n\";\n  const length   = picture.length;\n  const charType = Object\n    .entries(charTypes)\n    .reduce(\n      (types, [type, chars]) => {\n        chars.split('').forEach(\n          char => types[char] = type\n        );\n        return types\n      },\n      { }\n    )\n  const lineLength = source\n    .split(\"\\n\")\n    .reduce(\n      (longest, line) => Math.max(longest, line.length),\n      0\n    )\n  return { picture, length, lineLength, charType };\n}\n\nexport function prepareColours(colours) {\n  return Object.entries(colours).reduce(\n    (formatters, [type, colour]) => {\n      formatters[type] = color(colour);\n      return formatters;\n    },\n    { }\n  )\n}\n\nexport function formatPicture(config) {\n  const { picture, charType={}, colours={} } = config;\n  return picture\n    .split('')\n    .map(\n      char => {\n        const type = charType[char] || 'foreground'\n        const col  = colours[type];\n        return col ? col(char) : char;\n      }\n    )\n    .join('')\n}\n\nexport function formatElapsed(elapsed) {\n  const s = elapsed % 60;\n  const m = Math.floor(elapsed / 60);\n  const h = Math.floor(elapsed / 3600);\n  return [h, m, s].map( x => x.toString().padStart(2, '0') ).join(':');\n}\n\nexport class Progress {\n  constructor(params={}) {\n    const config = {\n      ...defaults,\n      ...(\n        // you wouldn't believe the number of times I've tried to create a\n        // progress object passing only the size as an argument instead of\n        // { size: N } so this de-numpties my numptiness\n        isInteger(params)\n          ? { size: params }\n          : params\n      )\n    };\n    const { size, colours, colors, debug, elapsed } = config;\n    const { picture, length, lineLength, charType } =\n      preparePicture(\n        isString(config.picture)\n          ? { source: config.picture, charTypes }\n          : config.picture\n      );\n    this.size        = size;\n    this.picture     = picture;\n    this.pixels      = this.picture.split('');\n    this.length      = length;\n    this.lineLength  = lineLength;\n    this.charType    = charType;\n    this.colours     = prepareColours(colors || colours);\n    this.count       = 0;\n    this.lastCount   = 0;\n    this.lastPixel   = 0;\n    this.startTime   = now().epochSeconds();\n    this.elapsed     = 0;\n    this.elapsedCol  = color('dark grey');\n    this.showElapsed = elapsed;\n    this.debugging   = debug;\n    addDebug(this, debug, 'Progress > ', 'blue');\n  }\n\n  progress(n=1) {\n    this.count += n;\n\n    const time     = now().epochSeconds();\n    const elapsed  = time - this.startTime;\n    this.elapsed   = elapsed;\n    // const duration = elapsed - this.elapsed;\n\n    const end = Math.floor(this.length * this.count / this.size);\n    if (end > this.lastPixel) {\n      const start = this.lastPixel;\n      this.lastPixel = end;\n      this.debug(`count: ${this.count}/${this.size}  pixels from ${start} to ${end}`);\n      return this.pictureSegment(start, end);\n    }\n    else {\n      return '';\n    }\n  }\n\n  remains() {\n    this.count  = this.size;\n    const start = this.lastPixel;\n    const end   = this.length;\n    if (end > start) {\n      this.lastPixel = this.length;\n      return this.pictureSegment(start, end);\n    }\n    else {\n      return '';\n    }\n  }\n  pictureSegment(start, end) {\n    if (this.debugging) {\n      return '';\n    }\n\n    let slice = formatPicture({\n      picture:  this.picture.substring(start, end),\n      charType: this.charType,\n      colours:  this.colours,\n    });\n\n    // this.picture.substring(start, end);\n    if (this.showElapsed && slice.match(\"\\n\")) {\n      const lines = slice.split(\"\\n\");\n      const last = lines.pop();\n      slice = lines\n        .map( line => line + ` ` + this.elapsedCol(formatElapsed(this.elapsed)) )\n        .join(\"\\n\")\n        .concat(\"\\n\", last)\n    }\n    return slice;\n  }\n\n  printProgress(n=1) {\n    process.stdout.write(this.progress(n));\n  }\n\n  printRemains() {\n    process.stdout.write(this.remains());\n  }\n}\n\nexport const progress = config => new Progress(config);\n\nexport default progress\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Progress.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "charTypes",
    "memberof": "src/Badger/Utils/Progress.js",
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~charTypes",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{charTypes}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"border\": string, \"background\": string, \"fill\": string}"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "colours",
    "memberof": "src/Badger/Utils/Progress.js",
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~colours",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{colours}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"border\": string, \"background\": string, \"foreground\": string, \"fill\": string}"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "picture",
    "memberof": "src/Badger/Utils/Progress.js",
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~picture",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{picture}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"charTypes\": *, \"source\": *}"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Utils/Progress.js",
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "{\"size\": number, \"elapsed\": *, \"picture\": *, \"colours\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "preparePicture",
    "memberof": "src/Badger/Utils/Progress.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~preparePicture",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{preparePicture}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"picture\": *, \"length\": *, \"lineLength\": *, \"charType\": *}"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "prepareColours",
    "memberof": "src/Badger/Utils/Progress.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~prepareColours",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{prepareColours}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "colours",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "formatPicture",
    "memberof": "src/Badger/Utils/Progress.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~formatPicture",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{formatPicture}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "formatElapsed",
    "memberof": "src/Badger/Utils/Progress.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~formatElapsed",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{formatElapsed}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "elapsed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "Progress",
    "memberof": "src/Badger/Utils/Progress.js",
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~Progress",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Progress}",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "size",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#size",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "picture",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#picture",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "pixels",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#pixels",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "length",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#length",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "lineLength",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#lineLength",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "charType",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#charType",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "colours",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#colours",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "count",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#count",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "lastCount",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#lastCount",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "lastPixel",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#lastPixel",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "startTime",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#startTime",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "elapsed",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#elapsed",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "elapsedCol",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#elapsedCol",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "showElapsed",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#showElapsed",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "debugging",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#debugging",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "progress",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#progress",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "remains",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#remains",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "pictureSegment",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#pictureSegment",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "printProgress",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#printProgress",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "printRemains",
    "memberof": "src/Badger/Utils/Progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/Progress.js~Progress#printRemains",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "progress",
    "memberof": "src/Badger/Utils/Progress.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Progress.js~progress",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{progress}",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/Badger/Utils/Prompt.js",
    "content": "import { isArray, isBoolean, isString } from '@abw/badger-utils';\nimport prompts from 'prompts'\n\n/**\n * Prompt user to enter a value.\n * @param {String} question - question to prompt user to answer\n * @param {Object} [options] - optional options\n * @param {String} [options.default] - default value returned if user presses RETURN\n * @return {Promise} fulfills with response to question or default value\n * @example\n * prompt(\"What is your name?\")\n *   .then( name => console.log(`Hello ${name}`) );\n * @example\n * prompt(\"What is your name?\", { default: 'Mr.Badger' })\n *   .then( name => console.log(`Hello ${name}`) );\n */\nexport const prompt = async (question, options={}) => {\n  options = isString(options)\n    ? { default: options }\n    : options;\n\n  const name = options.name || 'answer';\n  const answers = await prompts([\n    {\n      name,\n      type: options.type || 'text',\n      message: question,\n      initial: options.default,\n    },\n  ]);\n  return answers[name];\n}\n\n/**\n * Prompt user to confirm a choice.\n * @param {String} question - question to prompt user to answer\n * @param {Object} [options] - optional options\n * @param {String} [options.default] - default value returned if user presses RETURN\n * @return {Promise} fulfills with response to question or default value\n * @example\n * confirm(\"Are you sure?\")\n *   .then( yes => console.log('You said \"%s\"', yes ? 'YES' : 'NO') );\n */\nexport const confirm = async (question, options={}) => {\n  options = isBoolean(options)\n    ? { default: options }\n    : options;\n  return prompt(\n    question,\n    { ...options, type: 'confirm' });\n}\n\n/**\n * Prompt user to select an option.\n * @param {String} message - question to prompt user to answer\n * @param {Object} choices - array of title and value or object mapping value to title\n * @param {String} [initial] - initial value\n * @return {Promise} fulfills with selected option value\n * @example\n * select(\"Pick a colour\", { red: 'Red', green: 'Green', blue: 'Blue'})\n *   .then( colour => console.log('You chose \"%s\"', colour) );\n * @example\n * select(\n *   \"Pick a colour\",\n *   [\n *     { value: 'red':   title: 'Red' },\n *     { value: 'green', title: 'Green' },\n *     { value: 'blue',  title: 'Blue' },\n *   ],\n *   0\n * ).then( colour => console.log('You chose \"%s\"', colour) );\n */\n\nexport const select = async (message, choices, initial) => {\n  const choice = await prompts([\n    {\n      type: 'select',\n      name: 'selected',\n      message,\n      initial,\n      choices: isArray(choices)\n        ? choices\n        : Object.entries(choices).map(\n          ([value, title]) => ({ value, title }),\n        )\n    }\n  ]);\n  return choice.selected;\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Prompt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "prompt",
    "memberof": "src/Badger/Utils/Prompt.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Prompt.js~prompt",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{prompt}",
    "description": "Prompt user to enter a value.",
    "examples": [
      "prompt(\"What is your name?\")\n  .then( name => console.log(`Hello ${name}`) );",
      "prompt(\"What is your name?\", { default: 'Mr.Badger' })\n  .then( name => console.log(`Hello ${name}`) );"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": "question to prompt user to answer"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "optional options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.default",
        "description": "default value returned if user presses RETURN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with response to question or default value"
    }
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "confirm",
    "memberof": "src/Badger/Utils/Prompt.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Prompt.js~confirm",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{confirm}",
    "description": "Prompt user to confirm a choice.",
    "examples": [
      "confirm(\"Are you sure?\")\n  .then( yes => console.log('You said \"%s\"', yes ? 'YES' : 'NO') );"
    ],
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": "question to prompt user to answer"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "optional options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.default",
        "description": "default value returned if user presses RETURN"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with response to question or default value"
    }
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "select",
    "memberof": "src/Badger/Utils/Prompt.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Prompt.js~select",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{select}",
    "description": "Prompt user to select an option.",
    "examples": [
      "select(\"Pick a colour\", { red: 'Red', green: 'Green', blue: 'Blue'})\n  .then( colour => console.log('You chose \"%s\"', colour) );",
      "select(\n  \"Pick a colour\",\n  [\n    { value: 'red':   title: 'Red' },\n    { value: 'green', title: 'Green' },\n    { value: 'blue',  title: 'Blue' },\n  ],\n  0\n).then( colour => console.log('You chose \"%s\"', colour) );"
    ],
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "question to prompt user to answer"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "choices",
        "description": "array of title and value or object mapping value to title"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "initial",
        "description": "initial value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with selected option value"
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/Badger/Utils/Setup.js",
    "content": "import options from './Options.js';\nimport process from 'node:process'\nimport dotenv from 'dotenv'\nimport { cwd, dir } from '@abw/badger-filesystem';\nimport { fail, hasValue, isBoolean, splitLines, splitList } from '@abw/badger-utils';\nimport { brightGreen, brightRed, brightYellow } from './Color.js';\nimport { now } from '@abw/badger-timestamp';\nimport { quit } from './Exit.js';\nimport { appStatus } from './AppStatus.js';\n\nconst defaults = {\n  description:  'Project setup script.',\n  configFiles:  [\n    'config/setup.yaml', 'config/setup.json',\n    'setup.yaml', 'setup.json',\n    '.setup.yaml', '.setup.json'\n  ],\n  dataFile:     '.env.yaml',\n  envFile:      '.env',\n  envComments:  true,\n  envSections:  true,\n  writeData:    true,\n  writeEnv:     false,\n  compact:      false,\n  cancelled:    'Setup cancelled',\n  allDone:      'All configuration options have been set',\n  warning:      config => `\n#=============================================================================\n# WARNING: This file is generated automatically when the ${config.scriptName}\n# script is run.  Any changes made here may be lost.\n#\n# Generated: ${now()}\n#=============================================================================\n\n`\n}\n\nexport const setup = appStatus(\n  async config => {\n    await runSetup(config)\n  }\n)\n\nexport async function runSetup(props) {\n  const config = { ...defaults, ...props };\n  const rootDir = config.rootDir\n    ? dir(config.rootDir)\n    : cwd();\n\n  // read the environment file (.env) if it exists\n  const envFile  = rootDir.file(config.envFile);\n  dotenv.config({ path: envFile.path() });\n  const env = process.env;\n\n  // read the data file (.env.yaml) if it exists\n  const dataFile = rootDir.file(config.dataFile, { codec: 'auto' });\n  const data = (await dataFile.exists())\n    ? await dataFile.read()\n    : { };\n\n  // look for a setup file - if it's provided as configFile then it's treated\n  // as definitive, otherwise we look for the first of configFiles\n  const configFile = config.configFile\n    ? rootDir.file(config.configFile, { codec: 'auto' })\n    : await findFirstFile(rootDir, config.configFiles);\n\n  // read the setup file\n  const setup = await configFile.read();\n\n  setup.name        ||= config.name\n                    ||  process.argv[1].replace(rootDir.path() + '/', '');\n  setup.version     ||= config.version;\n  setup.description ||= config.description;\n\n  // caller may have provided us with some values\n  const values = {\n    root: rootDir.path(),\n    ...(config.values || { })\n  };\n\n  // process the options\n  for (let option of setup.options) {\n    const name = option.name;\n\n    // section headings don't have names\n    if (! name) {\n      continue;\n    }\n\n    // the type is nearly always 'text'\n    option.type ||= 'text';\n\n    // look to see if we've got a value in the environment or data file\n    const envVar  = option.envvar ||= name.toUpperCase();\n\n    if (hasValue(env[envVar])) {\n      // set the value from the environment\n      option.default = env[envVar];\n    }\n    else if (hasValue(data[name])) {\n      // set the value from the data file\n      option.default = data[name];\n    }\n    else if (hasValue(values[name])) {\n      // set the value from the data file\n      option.default = values[name];\n    }\n    else if (option.program) {\n      // look for a program in the path\n      option.default = await findProgram(option.program)\n      option.pattern ||= '<path>'\n    }\n  }\n\n  // Read command line arguments or prompt user to enter values\n  const answers = await options(setup);\n  if (! answers) {\n    quit('\\n👎 ' + brightRed(config.cancelled));\n  }\n\n  // extract the options that shouldn't be preserved\n  const { debug, verbose, quiet } = answers;\n  delete answers.quiet\n  delete answers.verbose\n  delete answers.yes\n\n  if (debug) {\n    // console.log('\\nGenerated configuration:', data);\n  }\n  if (config.allDone && ! quiet) {\n    console.log('\\n👍 ', brightYellow(config.allDone), '\\n');\n  }\n\n  if (config.writeData) {\n    await dataFile.write(answers);\n    if (verbose) {\n      console.log(brightGreen(`✓ Wrote data file: ${dataFile}`));\n    }\n  }\n\n  if (config.writeEnv) {\n    await envFile.write(\n      await envFileText(rootDir, config, setup, answers)\n    )\n    if (verbose) {\n      console.log(brightGreen(`✓ Wrote .env file: ${envFile}`));\n    }\n  }\n\n  return answers;\n}\n\nexport async function findFirstFile(root, names=[]) {\n  for (let name of names) {\n    const file = root.file(name, { codec: 'auto' });\n    if (await file.exists()) {\n      return file;\n    }\n  }\n  fail(\"Can't find a configFile: \", names.join(', '));\n}\n\nexport async function findProgram(names) {\n  for (let name of splitList(names)) {\n    for (let path of process.env.PATH.split(':')) {\n      const file   = dir(path).file(name);\n      const exists = await file.exists();\n      if (exists) {\n        return file.path();\n      }\n    }\n  }\n}\n\nasync function envFileText(rootDir, config, setup, answers) {\n  const { compact, envComments, envSections } = config;\n  const gap = compact ? '' : \"\\n\";\n  let output = [\n    comment(config.warning(config))\n  ];\n  const line  = '#' + '-'.repeat(77)\n  const line2 = '#' + '='.repeat(77)\n  for (let option of setup.options) {\n    const { name, envvar, title, about, save } = option\n    if (isBoolean(save) && ! save) {\n      continue;\n    }\n    if (title && envSections) {\n      output.push(\n        `${gap}\\n${line}\\n${comment(title)}\\n${line}`\n      )\n      continue;\n    }\n    if (! compact) {\n      output.push(\"\");\n    }\n    if (about && envComments) {\n      output.push(`${comment(about)}`)\n    }\n    if (name) {\n      const value = answers[name];\n      if (hasValue(value)) {\n        const safe = value.toString().match(/[#\\r\\n]/) ? `\"$value\"` : value;\n        output.push(`${envvar || name.toUpperCase()}=${safe}`)\n      }\n      else {\n        output.push(comment(`No value for ${envvar || name.toUpperCase()}`))\n      }\n    }\n  }\n  if (config.envExtra) {\n    const extraFile = rootDir.file(config.envExtra);\n    if (! await extraFile.exists()) {\n      fail(`Cannot find envExtra file: ${config.envExtra}`);\n    }\n    if (envSections) {\n      output.push(\n        \"\\n\",\n        line2,\n        comment(` Additional configuration copied from ${config.envExtra}`),\n        line2,\n        \"\",\n      )\n    }\n    output.push(await extraFile.read())\n  }\n  return output.join(\"\\n\") + \"\\n\";\n}\n\nfunction comment(text) {\n  return splitLines(text.trim())\n    .map( line => line.match(/^#/) ? line : `# ${line}` )\n    .join(\"\\n\");\n}",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/Setup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Utils/Setup.js",
    "static": true,
    "longname": "src/Badger/Utils/Setup.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"description\": string, \"configFiles\": *, \"dataFile\": string, \"envFile\": string, \"envComments\": boolean, \"envSections\": boolean, \"writeData\": boolean, \"writeEnv\": *, \"compact\": *, \"cancelled\": string, \"allDone\": string, \"warning\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "setup",
    "memberof": "src/Badger/Utils/Setup.js",
    "static": true,
    "longname": "src/Badger/Utils/Setup.js~setup",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{setup}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "runSetup",
    "memberof": "src/Badger/Utils/Setup.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Setup.js~runSetup",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{runSetup}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "findFirstFile",
    "memberof": "src/Badger/Utils/Setup.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Setup.js~findFirstFile",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{findFirstFile}",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "root",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "findProgram",
    "memberof": "src/Badger/Utils/Setup.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Setup.js~findProgram",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{findProgram}",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "envFileText",
    "memberof": "src/Badger/Utils/Setup.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/Setup.js~envFileText",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "rootDir",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "setup",
        "types": [
          "*"
        ]
      },
      {
        "name": "answers",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "comment",
    "memberof": "src/Badger/Utils/Setup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/Setup.js~comment",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "src/Badger/Utils/index.js",
    "content": "export * from './AppStatus.js';\nexport * from './CmdLine.js';\nexport * from './Color.js';\nexport * from './DataPath.js';\nexport * from './Debug.js';\nexport * from './Exit.js';\nexport * from './Misc.js';\nexport * from './Options.js';\nexport * from './Params.js';\nexport * from './Params.js';\nexport * from './Progress.js';\nexport * from './Prompt.js';\nexport * from './Setup.js';",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "appStatus",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~appStatus",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{appStatus}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "cmdLine",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~cmdLine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLine}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "cmdLineFlags",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~cmdLineFlags",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLineFlags}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"flags\": *, \"args\": *}"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "cmdLineArg",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/index.js~cmdLineArg",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLineArg}",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "argPrompt",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "cmdLineArgs",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/index.js~cmdLineArgs",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLineArgs}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "argPrompts",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "ANSIescapeCode",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~ANSIescapeCode",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescapeCode}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "base",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "fg",
        "defaultValue": "fg"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "ANSIescape",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~ANSIescape",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescape}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "colors",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "ANSIreset",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~ANSIreset",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIreset}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "color",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~color",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{color}",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "colors",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "black",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~black",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{black}",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "name": "red",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~red",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{red}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "green",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~green",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{green}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "yellow",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~yellow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{yellow}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "blue",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~blue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{blue}",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "magenta",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~magenta",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{magenta}",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "cyan",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~cyan",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cyan}",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "grey",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~grey",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{grey}",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "white",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~white",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{white}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "brightBlack",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~brightBlack",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightBlack}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "brightRed",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~brightRed",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightRed}",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "brightGreen",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~brightGreen",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightGreen}",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "brightYellow",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~brightYellow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightYellow}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "brightBlue",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~brightBlue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightBlue}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "brightMagenta",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~brightMagenta",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightMagenta}",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "brightCyan",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~brightCyan",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightCyan}",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "brightGrey",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~brightGrey",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightGrey}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "brightWhite",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~brightWhite",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightWhite}",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "darkBlack",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~darkBlack",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkBlack}",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "darkRed",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~darkRed",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkRed}",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "darkGreen",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~darkGreen",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkGreen}",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "darkYellow",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~darkYellow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkYellow}",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "darkBlue",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~darkBlue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkBlue}",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "name": "darkMagenta",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~darkMagenta",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkMagenta}",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "name": "darkCyan",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~darkCyan",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkCyan}",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "darkGrey",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~darkGrey",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkGrey}",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "name": "darkWhite",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~darkWhite",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkWhite}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "matchDoubleQuotedString",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~matchDoubleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchDoubleQuotedString}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "matchSingleQuotedString",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~matchSingleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchSingleQuotedString}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "splitDataPath",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~splitDataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{splitDataPath}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "dataPath",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~dataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dataPath}",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "Debugger",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~Debugger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Debugger}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "addDebug",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~addDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{addDebug}",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "exit",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~exit",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{exit}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "quit",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~quit",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{quit}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "abort",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~abort",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{abort}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "args",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~args",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{args}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "argv",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~defaults",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{defaults}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"verboseColor\": string, \"titleColor\": string, \"underlineColor\": string, \"infoColor\": string, \"tickColor\": string, \"questionColor\": string, \"answerColor\": string, \"sectionNewlines\": boolean}"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "options",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/index.js~options",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{options}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "section",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~section",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{section}",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "answer",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~answer",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{answer}",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "requiredParam",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~requiredParam",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParam}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "requiredParams",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~requiredParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParams}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "name": "allParams",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~allParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{allParams}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "anyParams",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~anyParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{anyParams}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "function",
    "name": "requiredParam",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~requiredParam",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParam}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "requiredParams",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~requiredParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParams}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "name": "allParams",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~allParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{allParams}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "anyParams",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~anyParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{anyParams}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "charTypes",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~charTypes",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{charTypes}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"border\": string, \"background\": string, \"fill\": string}"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "variable",
    "name": "colours",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~colours",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{colours}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"border\": string, \"background\": string, \"foreground\": string, \"fill\": string}"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "name": "picture",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~picture",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{picture}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"charTypes\": *, \"source\": *}"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "preparePicture",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~preparePicture",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{preparePicture}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"picture\": *, \"length\": *, \"lineLength\": *, \"charType\": *}"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "prepareColours",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~prepareColours",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{prepareColours}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "colours",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "formatPicture",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~formatPicture",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{formatPicture}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "formatElapsed",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~formatElapsed",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{formatElapsed}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "elapsed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "class",
    "name": "Progress",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~Progress",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Progress}",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 266,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "size",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#size",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "picture",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#picture",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "pixels",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#pixels",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "length",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#length",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "lineLength",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#lineLength",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "charType",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#charType",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "colours",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#colours",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "count",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#count",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "lastCount",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#lastCount",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "lastPixel",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#lastPixel",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "startTime",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#startTime",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "elapsed",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#elapsed",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "elapsedCol",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#elapsedCol",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "showElapsed",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#showElapsed",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "debugging",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#debugging",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "progress",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#progress",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "remains",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#remains",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "pictureSegment",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#pictureSegment",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "printProgress",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#printProgress",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "printRemains",
    "memberof": "src/Badger/Utils/index.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Utils/index.js~Progress#printRemains",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 292,
    "kind": "function",
    "name": "progress",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Utils/index.js~progress",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{progress}",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "function",
    "name": "prompt",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/index.js~prompt",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{prompt}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "question",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "function",
    "name": "confirm",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/index.js~confirm",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{confirm}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "question",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "function",
    "name": "select",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/index.js~select",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{select}",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "choices",
        "types": [
          "*"
        ]
      },
      {
        "name": "initial",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "variable",
    "name": "setup",
    "memberof": "src/Badger/Utils/index.js",
    "static": true,
    "longname": "src/Badger/Utils/index.js~setup",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{setup}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "function",
    "name": "runSetup",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/index.js~runSetup",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{runSetup}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "function",
    "name": "findFirstFile",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/index.js~findFirstFile",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{findFirstFile}",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "root",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "function",
    "name": "findProgram",
    "memberof": "src/Badger/Utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger/Utils/index.js~findProgram",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{findProgram}",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "file",
    "name": "src/Badger/Workspace.js",
    "content": "import { addDebug } from \"./Utils/Debug.js\";\nimport { Config } from \"./Config.js\";\nimport { Library } from \"./Library.js\";\nimport { dir as fsDir } from \"@abw/badger-filesystem\";\nimport { fail, hasValue, splitList } from \"@abw/badger-utils\";\n\n/**\n * Default configuration options.\n */\nconst defaults = {\n  config: {\n    dir: 'config',\n  },\n  library: {\n    dir: 'lib library src components',\n  },\n  case: {\n    // config and/or library case conversion functions\n  }\n}\n\n/**\n * The Workspace class implements an object which acts as a central repository\n * for your project, providing access to directories, files, configuration files,\n * Javascript libraries and components.\n */\nexport class Workspace {\n  /**\n   * Constructor for Workspace object.\n   * @param {String} dir - root directory for the workspace\n   * @param {Object} [options] - configuration options\n   * @param {Object} [options.config] - configuration options for a {@link Config} object\n   * @param {Array|String} [options.config.dir] - configuration directory or directories relative to the workspace directory\n   * @param {Object} [options.library] - configuration options for a {@link Config} object\n   * @param {Array|String} [options.library.dir] - library directory or directories relative to the workspace directory\n   * @return {Object} the Workspace object\n   */\n  constructor(dir, options={}) {\n    const rootDir = fsDir(dir);\n    const cfgDir  = splitList(options.config?.dir || defaults.config.dir).map( dir => rootDir.dir(dir) );\n    const cfgOpts = { ...defaults.config, ...(options.config||{}) };\n    const config  = new Config(cfgDir, cfgOpts);\n    const libDirs = splitList(options.library?.dir || defaults.library.dir).map( dir => rootDir.dir(dir) );\n    const libOpts = { ...defaults.library, ...(options.library||{}) };\n    const library = new Library(libDirs, libOpts);\n\n    this.case = {\n      ...defaults.case,\n      ...(options.case||{})\n    };\n\n    this.state = {\n      rootDir,\n      config,\n      library\n    }\n\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n    this.debug('root dir: ', rootDir.path());\n    this.debug('config dir: ', cfgDir.map( d => d.path() ));\n    this.debug('libDirs: ', libDirs);\n    this.debug('libOpts: ', libOpts);\n  }\n\n  /**\n   * Fetch a new {@link Directory} object for a sub-directory of the workspace directory.\n   * @param {string} path - directory path relative to the workspace directory\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @return {Object} a {@link Directory} object\n   */\n  dir(path, options) {\n    this.debug(\"dir(%s, %o)\", path, options);\n    return hasValue(path)\n      ? this.state.rootDir.dir(path, options)\n      : this.state.rootDir;\n  }\n\n  /**\n   * Fetch a new {@link File} object for a file in the workspace.\n   * @param {string} path - file path relative to the workspace directory\n   * @param {Object} [options] - file configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding file data\n   * @param {Boolean} [options.encoding=utf8] - character encoding for the file\n   * @return {Object} a {@link File} object\n   */\n  file(path, options) {\n    this.debug(\"file(%s, %o)\", path, options);\n    return this.state.rootDir.file(path, options)\n  }\n\n  /**\n   * Read the content of a file in the workspace.\n   * @param {string} path - file path relative to the workspace directory\n   * @param {Object} [options] - directory configuration options\n   * @param {Boolean} [options.codec] - codec for encoding/decoding file data\n   * @param {Boolean} [options.encoding=utf8] - character encoding for the file\n   * @return {Promise} fulfills with the file content\n   * @example\n   * file('myfile.txt').read().then( text => console.log(text) );\n   * @example\n   * file('myfile.json', { codec: 'json' }).read().then( data => console.log(data) );\n   * @example\n   * file('myfile.json').read({ codec: 'json' }).then( data => console.log(data) );\n   */\n  read(path, options) {\n    this.debug(\"read(%s, %o)\", path, options);\n    return this.file(path, options).read();\n  }\n\n  /**\n   * Writes content to a file.  If a `codec` has been specified then the content will be encoded.\n   * @param {string} path - file path relative to the workspace directory\n   * @param {String|Object} data - directory configuration options\n   * @param {Object} [options] - directory configuration options\n   * @param {Boolean} [options.codec] - codec for encoding/decoding file data\n   * @param {Boolean} [options.encoding=utf8] - codec for encoding/decoding file data\n   * @return {Promise} fulfills with the file object\n   * @example\n   * file('myfile.txt').write('Hello World');\n   * @example\n   * file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });\n   * @example\n   * file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });\n   */\n  write(path, data, options) {\n    this.debug(\"write(%s, %o, %o)\", path, data, options);\n    return this.file(path, options).write(data);\n  }\n\n  /**\n   * Fetch the configuration directory or a directory relative to it\n   * @param {string} [path] - file path relative to the configuration directory\n   * @param {Object} [options] - directory configuration options\n   * @param {String} [options.codec] - codec for encoding/decoding data for files in the directory\n   * @param {Boolean} [options.encoding=utf8] - character encoding for files in the directory\n   * @return {Object} a {@link Directory} object\n   */\n  configDir(path, options) {\n    this.debug(\"configDir(%s, %o)\", path, options);\n    return hasValue(path)\n      ? this.state.configDir.dir(path, options)\n      : this.state.configDir;\n  }\n\n  /**\n   * Fetches configuration data from a file in the configuration directory or returns the\n   * {@link Config} object itself if no file uri is specified.\n   * @param {string} [uri] - file path relative to the configuration directory\n   * @param {Object} [defaults] - default configuration options if file isn't found\n   * @return {Promise} fulfills to the configuration data read from the file\n   * @example\n   * workspace.config('myfile').then(\n   *   config => console.log(\"Loaded myfile config: \", config)\n   * );\n   */\n  async config(uri, defaults) {\n    this.debug(\"config(%s, %o)\", uri, defaults);\n    return hasValue(uri)\n      ? this.state.config.config(uri, defaults)\n      : this.state.config;\n  }\n\n  /**\n   * Loads a Javscript library from the library directory or returns the\n   * {@link Library} object itself if no file uri is specified.\n   * @param {string} [uri] - file path relative to the library directory\n   * @return {Promise} fulfills to the configuration data read from the file\n   * @example\n   * workspace.library('mylib').then(\n   *   exports => console.log(\"Loaded mylib exports: \", exports)\n   * );\n   */\n  async library(uri) {\n    this.debug(\"library(%s, %o)\", uri);\n    return hasValue(uri)\n      ? this.state.library.library(uri)\n      : this.state.library;\n  }\n\n  /**\n   * Loads a Javscript library from the library directory and instantiates a\n   * component.\n   * @param {String} uri - component base name\n   * @param {Object} [props] - optional configuration properties\n   * @return {Promise} fulfills to a newly instantiated component\n   * @example\n   * workspace.component('mycomp').then(\n   *   component => console.log(\"Created component: \", component)\n   * );\n   */\n  async component(uri, props) {\n    const [base, fragment] = uri.split('#', 2);\n    const cfgname = this.convertCase('config', base);\n    const config  = await this.config(cfgname, {});\n    const libname = config.component?.library || this.convertCase('library', base);\n    const lib     = await this.library(libname);\n    const exp     = fragment || config.component?.export || 'default';\n    const compcls = lib[exp] || fail(\"No '\", exp, \"' export from component library: \", uri);\n    const comp    = new compcls(this, { ...config, ...props });\n    return comp;\n  }\n\n  convertCase(type, uri) {\n    const fn = this.case[type];\n    return fn\n      ? fn(uri)\n      : uri;\n  }\n}\n\nexport const workspace = (dir, options) => new Workspace(dir, options);\n\nexport default Workspace;",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger/Workspace.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger/Workspace.js",
    "static": true,
    "longname": "src/Badger/Workspace.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger",
    "importStyle": null,
    "description": "Default configuration options.",
    "lineNumber": 10,
    "type": {
      "types": [
        "{\"config\": *, \"library\": *, \"case\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "class",
    "name": "Workspace",
    "memberof": "src/Badger/Workspace.js",
    "static": true,
    "longname": "src/Badger/Workspace.js~Workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Workspace}",
    "description": "The Workspace class implements an object which acts as a central repository\nfor your project, providing access to directories, files, configuration files,\nJavascript libraries and components.",
    "lineNumber": 27,
    "interface": false
  },
  {
    "__docId__": 303,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#constructor",
    "access": "public",
    "description": "Constructor for Workspace object.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "root directory for the workspace"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.config",
        "description": "configuration options for a {@link Config} object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.config.dir",
        "description": "configuration directory or directories relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.library",
        "description": "configuration options for a {@link Config} object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.library.dir",
        "description": "library directory or directories relative to the workspace directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Workspace object"
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "case",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#case",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "{...undefined: Object}"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#state",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "{\"rootDir\": *, \"config\": *, \"library\": *}"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#dir",
    "access": "public",
    "description": "Fetch a new {@link Directory} object for a sub-directory of the workspace directory.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object"
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#file",
    "access": "public",
    "description": "Fetch a new {@link File} object for a file in the workspace.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "file configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for the file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link File} object"
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#read",
    "access": "public",
    "description": "Read the content of a file in the workspace.",
    "examples": [
      "file('myfile.txt').read().then( text => console.log(text) );",
      "file('myfile.json', { codec: 'json' }).read().then( data => console.log(data) );",
      "file('myfile.json').read({ codec: 'json' }).then( data => console.log(data) );"
    ],
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for the file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file content"
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#write",
    "access": "public",
    "description": "Writes content to a file.  If a `codec` has been specified then the content will be encoded.",
    "examples": [
      "file('myfile.txt').write('Hello World');",
      "file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });",
      "file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });"
    ],
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file object"
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "configDir",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#configDir",
    "access": "public",
    "description": "Fetch the configuration directory or a directory relative to it",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "file path relative to the configuration directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding data for files in the directory"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for files in the directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object"
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#config",
    "access": "public",
    "description": "Fetches configuration data from a file in the configuration directory or returns the\n{@link Config} object itself if no file uri is specified.",
    "examples": [
      "workspace.config('myfile').then(\n  config => console.log(\"Loaded myfile config: \", config)\n);"
    ],
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "uri",
        "description": "file path relative to the configuration directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options if file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the configuration data read from the file"
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#library",
    "access": "public",
    "description": "Loads a Javscript library from the library directory or returns the\n{@link Library} object itself if no file uri is specified.",
    "examples": [
      "workspace.library('mylib').then(\n  exports => console.log(\"Loaded mylib exports: \", exports)\n);"
    ],
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "uri",
        "description": "file path relative to the library directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the configuration data read from the file"
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "component",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#component",
    "access": "public",
    "description": "Loads a Javscript library from the library directory and instantiates a\ncomponent.",
    "examples": [
      "workspace.component('mycomp').then(\n  component => console.log(\"Created component: \", component)\n);"
    ],
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "component base name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "props",
        "description": "optional configuration properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to a newly instantiated component"
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "convertCase",
    "memberof": "src/Badger/Workspace.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger/Workspace.js~Workspace#convertCase",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "uri",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "function",
    "name": "workspace",
    "memberof": "src/Badger/Workspace.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger/Workspace.js~workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{workspace}",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "file",
    "name": "src/Badger.js",
    "content": "export * from './Badger/Component.js';\nexport * from './Badger/Config.js';\nexport * from './Badger/Library.js';\nexport * from './Badger/Utils/index.js';\nexport * from './Badger/Workspace.js';\n\n// These used to be part of badger but have been moved out to separate modules.\n// I'm re-exporting them here for backwards compatability but this will be\n// removed in a future version.\nexport * from '@abw/badger-filesystem'\nexport * from '@abw/badger-codecs'\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-js/src/Badger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 335,
    "kind": "class",
    "name": "Component",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Component",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Component}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 336,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Component#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "workspace",
    "memberof": "src/Badger.js~Component",
    "static": false,
    "longname": "src/Badger.js~Component#workspace",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "props",
    "memberof": "src/Badger.js~Component",
    "static": false,
    "longname": "src/Badger.js~Component#props",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "initComponent",
    "memberof": "src/Badger.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Component#initComponent",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 340,
    "kind": "class",
    "name": "Config",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Config}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "interface": false,
    "extends": [
      "@abw/badger-filesystem~DirPath"
    ]
  },
  {
    "__docId__": 341,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Config#constructor",
    "access": "public",
    "description": "Constructor for Config object.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain configuration files"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yaml json'",
        "defaultRaw": "'yaml json'",
        "name": "options.codec",
        "description": "Array or comma/whitespace delimited string of codec names"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Config object"
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "firstFileWithExt",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#firstFileWithExt",
    "access": "public",
    "description": "Internal method to locate the first config file with one of a number of file extensions.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "exts",
        "description": "array of possible extensions"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "makeOptions",
        "description": "optional function to generate options for a {@link File} object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "jsFile",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#jsFile",
    "access": "public",
    "description": "Internal method to locate a Javascript configuration file with one of the `jsExt` extensions (`.js` or `.mjs` by default)",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#file",
    "access": "public",
    "description": "Internal method to locate a configuration file with one of the `codec` extensions (`.yaml` or `.json` by default)",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the {@link File} object if it exists or `undefined` if not"
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger.js~Config",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Config#config",
    "access": "public",
    "description": "Method to fetch configuration data from a file.  The file can be a Javascript file which should\nreturn the configuration data as the default export, or a YAML (`.yaml`) or JSON (`.json`) file.\nIf the file isn't found then the method returns the `defaults` data if provided, or throws an\nerror if not.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options to be used if a file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the configuration data loaded from the file"
    }
  },
  {
    "__docId__": 346,
    "kind": "function",
    "name": "config",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{config}",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "Library",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Library}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false,
    "extends": [
      "@abw/badger-filesystem~DirPath"
    ]
  },
  {
    "__docId__": 348,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Library",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Library#constructor",
    "access": "public",
    "description": "Constructor for Library object.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "one or more directories that contain Javascript libraries"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'js mjs'",
        "defaultRaw": "'js mjs'",
        "name": "options.jsExt",
        "description": "Array or comma/whitespace delimited string of Javascript file extensions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Library object"
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger.js~Library",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Library#library",
    "access": "public",
    "description": "Method to load a Javascript library in one of the library directories and with one of the `jsExt` extensions (`.js` or `.mjs` by default).\nReturns the exports from the library if found or throws an error if not.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "base part of filename"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the exports from the loaded libary"
    }
  },
  {
    "__docId__": 350,
    "kind": "function",
    "name": "library",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~library",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{library}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "function",
    "name": "appStatus",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~appStatus",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{appStatus}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "function",
    "name": "cmdLine",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~cmdLine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLine}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 353,
    "kind": "function",
    "name": "cmdLineFlags",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~cmdLineFlags",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLineFlags}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"flags\": *, \"args\": *}"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "function",
    "name": "cmdLineArg",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~cmdLineArg",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLineArg}",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "argPrompt",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "function",
    "name": "cmdLineArgs",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~cmdLineArgs",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cmdLineArgs}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "argPrompts",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "function",
    "name": "ANSIescapeCode",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~ANSIescapeCode",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescapeCode}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "base",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "fg",
        "defaultValue": "fg"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "function",
    "name": "ANSIescape",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~ANSIescape",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIescape}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "colors",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "function",
    "name": "ANSIreset",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~ANSIreset",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{ANSIreset}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 359,
    "kind": "function",
    "name": "color",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~color",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{color}",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "colors",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 360,
    "kind": "variable",
    "name": "black",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~black",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{black}",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "variable",
    "name": "red",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~red",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{red}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "variable",
    "name": "green",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~green",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{green}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "variable",
    "name": "yellow",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~yellow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{yellow}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "variable",
    "name": "blue",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~blue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{blue}",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "variable",
    "name": "magenta",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~magenta",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{magenta}",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "variable",
    "name": "cyan",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~cyan",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{cyan}",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "variable",
    "name": "grey",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~grey",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{grey}",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "variable",
    "name": "white",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~white",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{white}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "variable",
    "name": "brightBlack",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~brightBlack",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightBlack}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "variable",
    "name": "brightRed",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~brightRed",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightRed}",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "variable",
    "name": "brightGreen",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~brightGreen",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightGreen}",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "variable",
    "name": "brightYellow",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~brightYellow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightYellow}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "variable",
    "name": "brightBlue",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~brightBlue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightBlue}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "variable",
    "name": "brightMagenta",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~brightMagenta",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightMagenta}",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "variable",
    "name": "brightCyan",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~brightCyan",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightCyan}",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "variable",
    "name": "brightGrey",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~brightGrey",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightGrey}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "variable",
    "name": "brightWhite",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~brightWhite",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{brightWhite}",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "variable",
    "name": "darkBlack",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~darkBlack",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkBlack}",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "name": "darkRed",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~darkRed",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkRed}",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "variable",
    "name": "darkGreen",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~darkGreen",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkGreen}",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "darkYellow",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~darkYellow",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkYellow}",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "variable",
    "name": "darkBlue",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~darkBlue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkBlue}",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "variable",
    "name": "darkMagenta",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~darkMagenta",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkMagenta}",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "variable",
    "name": "darkCyan",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~darkCyan",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkCyan}",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "variable",
    "name": "darkGrey",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~darkGrey",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkGrey}",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "variable",
    "name": "darkWhite",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~darkWhite",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{darkWhite}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "function",
    "name": "matchDoubleQuotedString",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~matchDoubleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchDoubleQuotedString}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "function",
    "name": "matchSingleQuotedString",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~matchSingleQuotedString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{matchSingleQuotedString}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "splitDataPath",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~splitDataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{splitDataPath}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "dataPath",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~dataPath",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{dataPath}",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "function",
    "name": "Debugger",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~Debugger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Debugger}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "function",
    "name": "addDebug",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~addDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{addDebug}",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 393,
    "kind": "function",
    "name": "exit",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~exit",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{exit}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 394,
    "kind": "function",
    "name": "quit",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~quit",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{quit}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "abort",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~abort",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{abort}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "args",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~args",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{args}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "argv",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~defaults",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{defaults}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"verboseColor\": string, \"titleColor\": string, \"underlineColor\": string, \"infoColor\": string, \"tickColor\": string, \"questionColor\": string, \"answerColor\": string, \"sectionNewlines\": boolean}"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "function",
    "name": "options",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~options",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{options}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "function",
    "name": "section",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~section",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{section}",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "function",
    "name": "answer",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~answer",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{answer}",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 401,
    "kind": "function",
    "name": "requiredParam",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~requiredParam",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParam}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "function",
    "name": "requiredParams",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~requiredParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParams}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "variable",
    "name": "allParams",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~allParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{allParams}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "function",
    "name": "anyParams",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~anyParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{anyParams}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "function",
    "name": "requiredParam",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~requiredParam",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParam}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "function",
    "name": "requiredParams",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~requiredParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{requiredParams}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "variable",
    "name": "allParams",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~allParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{allParams}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "function",
    "name": "anyParams",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~anyParams",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{anyParams}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "variable",
    "name": "charTypes",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~charTypes",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{charTypes}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"border\": string, \"background\": string, \"fill\": string}"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "variable",
    "name": "colours",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~colours",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{colours}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"border\": string, \"background\": string, \"foreground\": string, \"fill\": string}"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "variable",
    "name": "picture",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~picture",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{picture}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"charTypes\": *, \"source\": *}"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "function",
    "name": "preparePicture",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~preparePicture",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{preparePicture}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"picture\": *, \"length\": *, \"lineLength\": *, \"charType\": *}"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "function",
    "name": "prepareColours",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~prepareColours",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{prepareColours}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "colours",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "function",
    "name": "formatPicture",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~formatPicture",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{formatPicture}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "function",
    "name": "formatElapsed",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~formatElapsed",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{formatElapsed}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "elapsed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "class",
    "name": "Progress",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Progress",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Progress}",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 417,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Progress#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "size",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#size",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "picture",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#picture",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "pixels",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#pixels",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "length",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#length",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "lineLength",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#lineLength",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "charType",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#charType",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "colours",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#colours",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "count",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#count",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "lastCount",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#lastCount",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "lastPixel",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#lastPixel",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "startTime",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#startTime",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "elapsed",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#elapsed",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "elapsedCol",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#elapsedCol",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "showElapsed",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#showElapsed",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "debugging",
    "memberof": "src/Badger.js~Progress",
    "static": false,
    "longname": "src/Badger.js~Progress#debugging",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "progress",
    "memberof": "src/Badger.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Progress#progress",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "remains",
    "memberof": "src/Badger.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Progress#remains",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "pictureSegment",
    "memberof": "src/Badger.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Progress#pictureSegment",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "printProgress",
    "memberof": "src/Badger.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Progress#printProgress",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "printRemains",
    "memberof": "src/Badger.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Progress#printRemains",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 443,
    "kind": "function",
    "name": "progress",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~progress",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{progress}",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 444,
    "kind": "function",
    "name": "prompt",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~prompt",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{prompt}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "question",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "function",
    "name": "confirm",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~confirm",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{confirm}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "question",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "function",
    "name": "select",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~select",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{select}",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "choices",
        "types": [
          "*"
        ]
      },
      {
        "name": "initial",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "variable",
    "name": "setup",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~setup",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{setup}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "function",
    "name": "runSetup",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~runSetup",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{runSetup}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "function",
    "name": "findFirstFile",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~findFirstFile",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{findFirstFile}",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "root",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "function",
    "name": "findProgram",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Badger.js~findProgram",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{findProgram}",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "class",
    "name": "Workspace",
    "memberof": "src/Badger.js",
    "static": true,
    "longname": "src/Badger.js~Workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{Workspace}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 452,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#constructor",
    "access": "public",
    "description": "Constructor for Workspace object.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "root directory for the workspace"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.config",
        "description": "configuration options for a {@link Config} object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.config.dir",
        "description": "configuration directory or directories relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.library",
        "description": "configuration options for a {@link Config} object"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.library.dir",
        "description": "library directory or directories relative to the workspace directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the Workspace object"
    }
  },
  {
    "__docId__": 453,
    "kind": "member",
    "name": "case",
    "memberof": "src/Badger.js~Workspace",
    "static": false,
    "longname": "src/Badger.js~Workspace#case",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "{...undefined: Object}"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "member",
    "name": "state",
    "memberof": "src/Badger.js~Workspace",
    "static": false,
    "longname": "src/Badger.js~Workspace#state",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "{\"rootDir\": *, \"config\": *, \"library\": *}"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "dir",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#dir",
    "access": "public",
    "description": "Fetch a new {@link Directory} object for a sub-directory of the workspace directory.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "directory path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object"
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "file",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#file",
    "access": "public",
    "description": "Fetch a new {@link File} object for a file in the workspace.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "file configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for the file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link File} object"
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "read",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#read",
    "access": "public",
    "description": "Read the content of a file in the workspace.",
    "examples": [
      "file('myfile.txt').read().then( text => console.log(text) );",
      "file('myfile.json', { codec: 'json' }).read().then( data => console.log(data) );",
      "file('myfile.json').read({ codec: 'json' }).then( data => console.log(data) );"
    ],
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for the file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file content"
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "write",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#write",
    "access": "public",
    "description": "Writes content to a file.  If a `codec` has been specified then the content will be encoded.",
    "examples": [
      "file('myfile.txt').write('Hello World');",
      "file('myfile.json', { codec: 'json' }).write({ message: 'Hello World' });",
      "file('myfile.json').write({ message: 'Hello World' }, { codec: 'json' });"
    ],
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "file path relative to the workspace directory"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding file data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "codec for encoding/decoding file data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills with the file object"
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "configDir",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#configDir",
    "access": "public",
    "description": "Fetch the configuration directory or a directory relative to it",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "file path relative to the configuration directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "directory configuration options"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.codec",
        "description": "codec for encoding/decoding data for files in the directory"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "utf8",
        "defaultRaw": "utf8",
        "name": "options.encoding",
        "description": "character encoding for files in the directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a {@link Directory} object"
    }
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "config",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Workspace#config",
    "access": "public",
    "description": "Fetches configuration data from a file in the configuration directory or returns the\n{@link Config} object itself if no file uri is specified.",
    "examples": [
      "workspace.config('myfile').then(\n  config => console.log(\"Loaded myfile config: \", config)\n);"
    ],
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "uri",
        "description": "file path relative to the configuration directory"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "default configuration options if file isn't found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the configuration data read from the file"
    }
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "library",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Workspace#library",
    "access": "public",
    "description": "Loads a Javscript library from the library directory or returns the\n{@link Library} object itself if no file uri is specified.",
    "examples": [
      "workspace.library('mylib').then(\n  exports => console.log(\"Loaded mylib exports: \", exports)\n);"
    ],
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "uri",
        "description": "file path relative to the library directory"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to the configuration data read from the file"
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "component",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Badger.js~Workspace#component",
    "access": "public",
    "description": "Loads a Javscript library from the library directory and instantiates a\ncomponent.",
    "examples": [
      "workspace.component('mycomp').then(\n  component => console.log(\"Created component: \", component)\n);"
    ],
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": "component base name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "props",
        "description": "optional configuration properties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "fulfills to a newly instantiated component"
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "convertCase",
    "memberof": "src/Badger.js~Workspace",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Badger.js~Workspace#convertCase",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "uri",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "function",
    "name": "workspace",
    "memberof": "src/Badger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Badger.js~workspace",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger",
    "importStyle": "{workspace}",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "dir",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# badger-js\n\nThis is an application toolkit for Javascript projects.  It provides a number of\nclasses and utility functions to make life easier.\n\nIt is loosely based around the [Badger](https://github.com/abw/Badger) toolkit for\nPerl and was written primarily to help migrate some old Perl projects to Javascript.\n\n## Installation\n\nInstall `badger` using your favourite package manager.\n\n### npm\n\n    npm install @abw/badger\n\n### pnpm\n\n    pnpm install @abw/badger\n\n### yarn\n\n    yarn add @abw/badger\n\n## Manual\n\nRead the [Manual](https://abw.github.io/badger-js/docs/manual/) for an introduction to the\ntoolkit and examples of use.\n## API Documentation\n\nRead the [API documentation](https://abw.github.io/badger-js/docs/) for further information\nabout the classes, methods and utility functions provided.\n\n## Author\n\nAndy Wardley <abw@wardley.org>",
    "longname": "/Users/abw/js/badger-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@abw/badger\",\n  \"version\": \"1.1.10\",\n  \"description\": \"Component based framework and utility modules\",\n  \"type\": \"module\",\n  \"main\": \"dist/badger.cjs.js\",\n  \"module\": \"dist/badger.esm.js\",\n  \"exports\": \"./dist/badger.esm.js\",\n  \"author\": \"Andy Wardley\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/abw/badger-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/abw/badger-js/issues\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"lint\": \"eslint 'src/**/*'\",\n    \"docs:build\": \"esdoc\",\n    \"docs:serve\": \"serve docs\",\n    \"test\": \"ava --serial\",\n    \"pretest\": \"pnpm run build\"\n  },\n  \"keywords\": [\n    \"badger\",\n    \"project\",\n    \"framework\",\n    \"utility\"\n  ],\n  \"devDependencies\": {\n    \"@itsjamie/esdoc-cli\": \"^0.5.0\",\n    \"@itsjamie/esdoc-core\": \"^0.5.0\",\n    \"@itsjamie/esdoc-importpath-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-inject-style-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-standard-plugin\": \"^0.5.0\",\n    \"@rollup/plugin-commonjs\": \"^24.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n    \"@rollup/plugin-terser\": \"^0.4.0\",\n    \"ava\": \"^5.2.0\",\n    \"eslint\": \"^8.35.0\",\n    \"rollup\": \"^3.18.0\"\n  },\n  \"dependencies\": {\n    \"@abw/badger-codecs\": \"^1.0.2\",\n    \"@abw/badger-filesystem\": \"^1.0.2\",\n    \"@abw/badger-timestamp\": \"^1.0.4\",\n    \"@abw/badger-utils\": \"^1.0.16\",\n    \"commander\": \"^9.5.0\",\n    \"dotenv\": \"^16.0.3\",\n    \"js-yaml\": \"^4.1.0\",\n    \"prompts\": \"^2.4.2\"\n  }\n}\n",
    "longname": "/Users/abw/js/badger-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# badger\n\n<img src=\"./manual/asset/badger2.svg\" width=\"300\"/>\n\nThis is the manual for the `badger` Javascript toolkit.\n\n* [Introduction](manual/introduction.html)\n* [Filesystem Utilities](manual/filesystem.html)\n* [Data Codecs](manual/codecs.html)\n* [Configuration Files](manual/config_files.html)\n* [Library Modules](manual/library_modules.html)\n* [Data Paths](manual/data_paths.html)\n* [Workspace](manual/workspace.html)\n* [User Input](manual/user_input.html)\n* [Project Setup](manual/setup.html)\n* [Miscellaneous Functions](manual/miscellaneous.html)\n\n# Author\n[Andy Wardley](https://github.com/abw)\n",
    "longname": "/Users/abw/js/badger-js/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/abw/js/badger-js/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/introduction.md",
    "name": "./manual/introduction.md",
    "content": "# Introduction\n\nThe `badger` toolkit provides a range of classes and utility\nfunctions for server-side Javascript using Node.js.\n\nThere is no particular rhyme or reason as to what's included\nor excluded from the toolkit.  It contains the kind of things\nthat I've found to be useful to help build and maintain\nnon-trivial software projects.\n\n## Warning\n\nPlease note that it is *opinionated* and *selfish* software.\n\nIt is *opiniated* because it (generally speaking) only implements one way\nto do something.  It's the way that I think is best (or least bad) and\naims to please one person (me) most of the time, rather than providing\ncountless configuration options to try and please all the people all\nthe time.\n\nIt is *selfish* because I wrote it to make my own life easier and to\nsimplify and expediate the process of writing software for myself and\nmy clients.  You're welcome to use it, but please be warned that after 25+\nyears of writing, maintaining and supporting Open Source software, I no\nlonger have the time or inclination to provide free support for other\npeople.\n\nIf you find a bug or have a suggestion for a way it can be improved\nthen please feel free to raise an issue and/or submit a pull request\nfor a patch to fix the problem or add a new feature.  But don't be\nsurprised if I don't jump to apply it if it doesn't provide something\nthat I personally find useful.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/filesystem.md",
    "name": "./manual/filesystem.md",
    "content": "# Filesystem Utilities\n\nThe filesystem utilities provide a simple and convenient way to\nhandle common  directory and file operations.\n\n**NOTE**: The filesystem utilities have been moved out to a separate\n[badger-filesystem](https://www.npmjs.com/package/@abw/badger-filesystem)\nmodule.\n\n- [Directories](#directories)\n- [Reading Files](#reading-files)\n- [Writing Files](#writing-files)\n- [Directory Object](#directory-object)\n- [File Object](#file-object)\n\n## Directories\n\nSay you've got a script in your project which needs to read a file\nfrom a different directory.\n\nLet's assume that the script is `bin/hello.js` and you want\nto read the contents of the file in `data/hello.txt`.\n\nThe [bin](function#static-function-bin) function returns a\n[Directory](class/src/Badger/Filesystem/Directory.js~Directory)\nrepresenting the directory of the script you're running (`process.argv[1]`).\nThis is useful when you want to access files relative to the script\nlocation, regardless of where you run the script from.  The function\nis so named because the traditional location for executable files in\nUnix systems is the `bin` directory.\n\n```js\nimport { bin } from '@abw/badger'\n\n// current directory where the main execution script is located\nconst thisDir = bin();\n```\n\nYou can also use it to access the directory of the current source file,\neven if it's not the main script you're running.  In this case pass\n`import.meta.url` as an argument.\n\n```js\nimport { bin } from '@abw/badger'\n\n// current directory where the current source file is located\nconst thisDir = bin(import.meta.url);\n```\n\nThe `parent()` method returns the parent directory and on that\nyou can call the `directory()` (or `dir()` for short) method to access a\ndirectory beneath that.  In this case, we're going for the `data`\ndirectory.\n\n```js\n// directory where the data file is located\nconst dataDir = thisDir.parent().dir('data');\n```\n\n## Reading Files\n\nOnce you have a directory object you can then access the `hello.txt` file in\nthat directory and read the file content using the `read()` method.  This\nreturns a Promise which will fulfull with the file content.  Add a\n`.then()` handler to do something with the content.\n\n```js\ndataDir.file('hello.txt').read().then(\n  text => console.log(text)\n)\n```\n\nYou can chain all those function/method calls together like so:\n\n```js\nimport { bin } from '@abw/badger'\n\nbin(import.meta.url)\n  .parent()\n  .dir('data')\n  .file('hello.txt')\n  .read()\n  .then( text => console.log(text) )\n```\n\n## Writing Files\nWriting files is just as easy:\n\n```js\nimport { bin } from '@abw/badger'\n\nbin(import.meta.url)\n  .parent()\n  .dir('data')\n  .file('goodbye.txt')\n  .write('K thx bye');\n```\n\nFor further information see the documentation for the\n[Directory](class/src/Badger/Filesystem/Directory.js~Directory) and\n[File](class/src/Badger/Filesystem/File.js~File) modules.\n\n## Directory Object\n\nYou can create a [Directory](class/src/Badger/Filesystem/Directory.js~Directory) object\ndirectly.\n\n```js\nimport { Directory } from '@abw/badger'\n\nconst dir = new Directory('data');\n\ndir\n  .file('goodbye.txt')\n  .write('K thx bye');\n```\n\nOr as a shortcut you can use the [dir](function#static-function-dir) function.\n\n```js\nimport { dir } from '@abw/badger'\n\ndir('data')\n  .file('goodbye.txt')\n  .write('K thx bye');\n```\n\n## File Objects\n\nYou can also create a [File](class/src/Badger/Filesystem/File.js~File) object directly.\n\n```js\nimport { File } from '@abw/badger'\n\nconst file = new File('data/goodbye.txt')\n\nfile\n  .write('K thx bye');\n```\n\nOr as a shortcut you can use the [file](function#static-function-file) function.\n\n```js\nimport { file } from '@abw/badger'\n\nfile('data/goodbye.txt')\n  .write('K thx bye');\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/codecs.md",
    "name": "./manual/codecs.md",
    "content": "# Data Codecs\n\nCodecs are used to encode and decode data to and from serialised text.\nThe badger toolkit comes with two built-in codecs for `json` and `yaml` files.\n\n**NOTE**: The codec utilities have been moved out to a separate\n[badger-codecs](https://www.npmjs.com/package/@abw/badger-codecs)\nmodule.\n\n- [Read Data File](#read-data-files)\n- [Write Data Files](#write-data-files)\n\n## Read Data Files\n\nSuppose that you have a `badger.yaml` file that you want to read.\n\n```yaml\nname:   Brian\nanimal: Badger\n```\n\nAll you have to do is add the `{ codec: 'yaml' }`\noption to the `file()` function.  The `read()`\nmethod will then automatically decode the YAML text.\n\n```js\nimport { file } from '@abw/badger'\n\nfile('badger.yaml', { codec: 'yaml' })\n  .read()\n  .then(\n    data => console.log(data.name, 'is a', data.animal)\n  )\n```\n\nThis prints the string \"Brian is a Badger\" to the console.\n\nYou can also do the same thing using the `file()` method on a directory\nobject.\n\n```js\nimport { dir } from '@abw/badger'\n\ndir('data')\n  .file('badger.yaml', { codec: 'yaml' })\n  .read()\n  .then(\n    data => console.log(data.name, 'is a', data.animal)\n  )\n```\n\n## Write Data Files\n\nThe `codec` option also works when writing data.\n\n```js\nimport { file } from '@abw/badger'\n\nfile('giraffe.yaml', { codec: 'yaml' })\n  .write({\n    name:   \"Gerald\",\n    animal: \"Giraffe\",\n  })\n```\n\nYou should now have a `giraffe.yaml` file containing the following:\n\n```yaml\nname: Gerald\nanimal: Giraffe\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/config_files.md",
    "name": "./manual/config_files.md",
    "content": "# Configuration Files\n\nWe all know (hopefully) that it's considered harmful to hard-code values in code\nthat might conceivably change at some point.  Furthermore, the DRY (Don't\nRepeat Yourself) principle tells us that _\"Every piece of knowledge must\nhave a single, unambiguous, authoritative representation within a system\"_.\n\nSo it's good practice to have a single location where configuration options for your\nproject can be stored.  For a smaller projects this might be a single configuration\nfile (e.g. consider how `package.json` is used for NPM modules). For larger projects\nyou may choose to have several configuration files to achieve a better separation\nof concerns and to make them easier to manage.\n\n- [Config Object](#config-object)\n- [Config Directory](#config-directory)\n- [Multiple Config Directories](#multiple-config-directories)\n- [Loading a Config File](#loading-a-config-file)\n- [Data Path](#data-path)\n- [Configuration Options](#configuration-options)\n- [Benefits](#benefits)\n\n## Config Object\n\nThe [Config](class/src/Badger/Config.js~Config) module simplifies the process\nof reading configuration files stored in a central location.  Tell it where your\nconfiguration files are stored and then it will take care of loading them for you.\n\n```js\nimport { Config } from '@abw/badger'\n\n// look for config files in a `config` directory\nconst configDir = new Config('config')\n\n// load the badger.(js|mjs|yaml|json) file\nconfigDir.config('badger').then(\n  config => console.log(\"loading the badger config: \", config)\n)\n```\n\n## Config Directory\n\nWhen you create a new `Config` object you should specify the name of the\nconfiguration directory relative to your current location.\n\n```js\nconst configDir = new Config('config')\n```\n\nYou can specify it as a string as shown above, or using a\n[Directory](class/src/Badger/Filesystem/Directory.js~Directory) object as\nshown in the earlier examples. For example, if you have a script in the `bin`\ndirectory and you want to load configuration files from the `config` directory\nlocated alongside it then you can do something like this:\n\n```js\nimport { bin, Config } from '@abw/badger'\n\nconst configDir = new Config(\n  bin().parent().dir('config')\n)\n```\n\nOr more succinctly like this:\n\n```js\nimport { bin, Config } from '@abw/badger'\n\nconst configDir = new Config(\n  bin().dir('../config')\n)\n```\n\n## Multiple Config Directories\n\nIf you have multiple locations that you want to read configuration files\nfrom then you can specify them as an array.  The values of the array can be\neither Directory objects or strings, or a mixture of the two.  For example if\nyou want to read configuration files from your project root directory and/or a\n`config` directory then you could do this:\n\n```js\nimport { bin, Config } from '@abw/badger'\n\nconst rootDir = bin().parent()\n\nconst configDir = new Config(\n  [rootDir, rootDir.dir('config')]\n)\n```\n\n## Loading a Config File\n\nThe `config()` method expects the basename (i.e. no file extension) of a file\nin your config directory (or one of them).\n\n```js\n// load the badger.(js|mjs|yaml|json) file\nconfigDir.config('badger').then(\n  config => console.log(\"loaded the badger config: \", config)\n)\n```\n\n### Javascript Files\n\nIt will first look for a Javascript file with a `.js` or `.mjs` extension.\nIf it finds such a file then it will import it and return a Promise that\nfulfills with the exports from that file.  For example, a `config/badger.js`\nfile might look like this:\n\n```js\nexport const name=\"Brian\";\nexport const animal=\"Badger\";\n```\n\n### YAML or JSON Files\n\nIf it doesn't find a Javascript file then it will look for a `yaml` or `json`\nfile.  For example, a `config/badger.yaml` might look like this:\n\n```yaml\nname:   Brian\nanimal: Badger\n```\n\nOr a `config/badger.json` might look like this:\n\n```json\n{\n  \"name\":   \"Brian\",\n  \"animal\": \"Badger\"\n}\n```\n\nIn all the above cases, the same data will be returned in the Promise.\n\n```js\nconfigDir.config('badger').then(\n  // prints \"Brian is a Badger\"\n  config => console.log(config.name, \"is a\", config.animal)\n)\n```\n\n## Data Path\n\nIf you want to access a particular piece of data from the loaded configuration\nthen you can specify it as a data path fragment following the file name.  Separate the\nfile name and data path fragment with a `#`.\n\n```js\n// load the default export from the badger.(js|mjs) file\nconfigDir.config('badger#name').then(\n  name => console.log(\"The badger is called\", name)\n)\n```\n\nSee the [Data Paths](./manual/data_paths) documentation for further information.\n\n## Configuration Options\n\nThe `jsExt` configuration option can be used to change the file extensions\nthat are recognised for Javascript files (`['js', 'mjs']` by default) and\nthe `codec` option can be used to specify which codecs can be used for\ndata files (`['yaml', 'json']` by default).  Note that the names of the\n`codec` correspond to the file extensions, e.g. a file must have a `.yaml`\nextension to be reconised and read using the `yaml` codec.\n\nFor example, if you only want to look for `.js` Javascript files and `.json`\ndata files then you would set the options like this:\n\n```js\nconst configDir = new Config(\n  rootDir.dir('config'),\n  {\n    jsExt: ['js'],\n    codec: ['json'],\n  };\n)\n```\n\nOr, given that you now only have one value for each of `jsExt` and `codecs` you\ncould do it like this:\n\n```js\nconst configDir = new Config(\n  rootDir.dir('config'),\n  {\n    jsExt: 'js',\n    codec: 'json',\n  };\n)\n```\n\n## Benefits\n\nIn case it's not immediately obvious, one key benefit of using the Config module to\nload configuration files is that it allows you to change the format that you're\nusing at any time.  You might start off with a simple `.json` JSON file then later decide\nthat you want to change to a `.yaml` YAML file so that you can add some comments and whitespace\nto make it more readable.  Further down the line you might need to perform some\ncomputation and switch it to a `.js` Javascript file.\n\nOf course you still need to re-write your configuration file but you don't need to worry about\nupdating any code that's loading it.  When you add a `badger.yaml` file to the configuration\ndirectory it will immediately take precedence over the `badger.json` file, or if you add a\n`badger.js` file it will take precedence over both the `badger.yaml` and `badger.json` files.\n\nThis is why you should **NOT** provide the file extension in the name you pass to the\n`config()` method.  Leave it up to the `config()` method to work that out for you\nand do the right thing.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/library_modules.md",
    "name": "./manual/library_modules.md",
    "content": "# Library Modules\n\nThe [Library](class/src/Badger/Library.js~Library) module is similar to the\n[Config](class/src/Badger/Config.js~Config) module except that it's designed to\nwork only with Javascript files.\n\n- [Library Object](#library-object)\n- [Library Directory](#library-directory)\n- [Multiple Library Directories](#multiple-library-directories)\n- [Loading a Library Module](#loading-a-library-module)\n- [Data Path](#data-path)\n- [Configuration Options](#configuration-options)\n\n## Library Object\n\nCreate a library directory specifying one or more directories where your code is located.\nThen call the `library()` method to load a `.js` or `.mjs` module from any of those\ndirectories.\n\n```js\nimport { Library } from '@abw/badger'\n\nconst library = new Library(\n  ['src', 'lib']\n)\n\n// load first of src/Example.js, src/Example.mjs, lib/Example.js or lib/Example.mjs\nlibrary.library('Example').then(\n  exports => {\n    // do something with your code exports here\n  }\n)\n```\n\nThe Promise returned fulfills to an object containing all the exports from your library\nmodule.\n\n## Library Directory\n\nWhen you create a new `Library` object you should specify the name of the\nlibrary directory or directories relative to your current location.\n\n```js\nconst library = new Library('library')\n```\n\nYou can specify it as a string as shown above, or using a\n[Directory](class/src/Badger/Filesystem/Directory.js~Directory) object as\nshown in the earlier examples. For example, if you have a script in the `bin`\ndirectory and you want to load configuration files from the `config` directory\nlocated alongside it then you can do something like this:\n\n```js\nimport { bin, Library } from '@abw/badger'\n\nconst library = new Library(\n  bin(import.meta.url).parent().dir('library')\n)\n```\n\nOr more succinctly like this:\n\n```js\nimport { bin, Library } from '@abw/badger'\n\nconst library = new Library(\n  bin(import.meta.url).dir('../library')\n)\n```\n## Multiple Library Directories\n\nIf you have multiple locations that you want to read library files\nfrom then you can specify them as an array.  The values of the array can be\neither Directory objects or strings, or a mixture of the two.  For example if\nyou want to load modules from the `src` and `lib` directories then you could do this:\n\n```js\nconst rootDir = bin(import.meta.url).parent()\n\nconst library = new Library(\n  [rootDir.dir('src'), rootDir.dir('lib')]\n)\n```\n\n## Loading a Library Module\n\nThe `library()` method expects the basename (i.e. no file extension) of a file\nin your library directory (or one of them).\n\n```js\n// load the badger.(js|mjs) file\nlibrary.library('badger').then(\n  badger => {\n    // do something with whatever badger exports here\n  }\n)\n```\n\nIt returns a Promise which fulfills with all the exports from your module.\n\n## Data Path\n\nIf you want to access a particular export then you can specify it as a data path\nfragment following the file name.  Separate the file name and data path fragment\nwith a `#`.\n\n```js\n// load the default export from the badger.(js|mjs) file\nlibrary.library('badger#default').then(\n  badger => {\n    // do something with the default badger export here\n  }\n)\n```\n\nSee the [Data Paths](./manual/data_paths) documentation for further information.\n\n## Configuration Options\n\nThe `jsExt` configuration option can be used to change the file extensions\nthat are recognised for Javascript files (`['js', 'mjs']` by default).\n\nFor example, if you only want to look for `.js` Javascript files and `.json`\ndata files then you would set the options like this:\n\n```js\nconst libary = new Library(\n  rootDir.dir('lib'),\n  {\n    jsExt:  ['js'],\n  };\n)\n```\n\nOr, given that you now only have one value for `jsExt` you\ncould do it like this:\n\n```js\nconst library = new Library(\n  rootDir.dir('lib'),\n  {\n    jsExt:  'js',\n  };\n)\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/data_paths.md",
    "name": "./manual/data_paths.md",
    "content": "# Data Paths\n\nBoth the [Config](class/src/Badger/Config.js~Config) and\n[Library](class/src/Badger/Library.js~Library) modules provide a\nconvenient way to drill down into the data returned to fetch a particular item.\n\nThis uses the [dataPath()](function#static-function-dataPath) function which\nnagivates data using a URL-like path.  The data path syntax is intentionally simple and\nlimited.  If you want to do anything more complicated then you should consider using JSON\nPath instead.\n\n- [Config Files](#config-files)\n- [Optional Items](#optional-items)\n- [Quoted Path Segments](#quoted-path-segments)\n- [Javascript Library Exports](#javascript-library-exports)\n- [Navigating Your Own Data](#navigating-your-own-data)\n\n## Config Files\n\nSuppose you have the following configuration file in `config/zoo.yaml`.\n\n```yaml\nanimals:\n  aardvark:\n    name: Alan\n  badger:\n    name: Brian\n  cat:\n    name: Colin\n```\n\nIf you have a Config object setup to read files from the `config` directory then\nyou can read the whole of the `zoo` data set like this:\n\n```js\nuse { Config } from '@abw/badger'\n\nconst configDir = new Config('config');\n\nconfigDir.config('zoo').then(\n  zoo => console.log(\"The badger is called \", zoo.animals.badger.name) // The badger is called Brian\n)\n```\n\nIf you're only looking for a particular item, in this case the name of the badger,\nthen you can add a data path fragment to the file name, like this:\n\n```js\nconfigDir.config('zoo#animals/badger/name').then(\n  name => console.log(\"The badger is called \", name) // The badger is called Brian\n)\n```\n\nEach element of the data path should be separated by a slash.  You can specify\ntext elements to access items in an object (as shown above) or numerical elements to\naccess items in an array.\n\nFor example, if you have some data that looks like this:\n\n```json\n{\n  \"numbers\": [\"zero\", \"one\", \"two\", \"forty-two\"],\n  \"friends\": [\n    { \"name\": \"Ford Prefect\" },\n    { \"name\": \"Zaphod Beeblebrox\" },\n    { \"name\": \"Trillian\" },\n  ]\n}\n```\n\nThen a data path of `numbers/3` would return \"forty-two\", or `friends/0/name` would return\n\"Ford Prefect\".\n\n## Optional Items\n\nIf an item specified in the path is `undefined` or `null` then an error is thrown.  Using the\nabove data this would happen if you tried to access `friends/12/name` or `friends/0/birthday`\n\nYou can add an question mark to the end of a path segment to make it silently return `undefined`\ninstead, e.g. `friends/12?/name` or `friends/0/birthday?`.  Note that the question mark can only\nappear at the end of a segment.  If it appears anywhere else then it is assumed to be the same\nthing as `?/`.  e.g. `foo?bar` is the same as `foo?/bar`.\n\n## Quoted Path Segments\n\nYou can enclose any segment in single or double quotes if you happen to have data keys that include\n`/` or `?` characters in them.  For example, `question/\"What is the answer?\"` to access the value\n\"42\" in the following data:\n\n```json\n{\n  \"question\": {\n    \"What is the answer?\": 42\n  }\n}\n```\n\nIf you want to make a quoted part optional then add the question mark after the closing quote, e.g.\n`question/\"What is the question?\"` would throw an error because it is not defined, but can be specified\nas `question/\"What is the question?\"?` to instead return `undefined`.\n\nNote that the usual Javascript rules for quoted strings apply.  e.g. use `\\n` to encode a newline,\n`\\\"` to escape a double quote inside a double quoted string, and so on.\n\n## Javascript Library Exports\n\nAll of the above applies to the data returned by the Config and Library modules when loaded\nJavascript files.  By default they will return an object containing all exported values from the\nJavascript file.  If you want to access the `default` export, for example, then you can add a `#default` suffix\nto the file basename when loading it.\n\n```js\nlibraryDir.library('Example#default').then(\n  default => {\n    // do something with the default export here\n  }\n)\n```\n\nAny other named export can be accessed in the same way.\n\n```js\nlibraryDir.library('Example#anotherExport').then(\n  anotherExport => {\n    // do something with anotherExport here\n  }\n)\n```\n\n## Navigating Your Own Data\n\nYou can use the `dataPath()` function to navigate your own data.\n\n```js\nimport { dataPath } from '@abw/badger'\n\nconst animals = {\n  aardvark: {\n    name: \"Alan\"\n  }\n  badger: {\n    name: \"Brian\"\n  },\n  cat: {\n    name: \"Colin\"\n  }\n}\n\nconst badgerName = dataPath(data, 'badger/name');\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/workspace.md",
    "name": "./manual/workspace.md",
    "content": "# Workspace\n\nThe [Workspace](class/src/Badger/Workspace.js~Workspace) module provides a\nconvenient \"hub\" for accessing directories, files, configuration files,\nlibraries and other resources for your project.\n\n- [Workspace Directory](#workspace-directory)\n- [Directories](#directories)\n- [Files](#files)\n- [Configuration Files](#configuration-files)\n- [Javscript Libraries](#javascript-libraries)\n- [Configuration Options](#configuration-options)\n\n## Workspace Directory\n\nCreate a new Workspace object and provide it with the workspace directory.\nThis is usually the top-level directory of your project.\n\n```js\nimport { Workspace } from '@abw/badger'\n\nconst workspace = new Workspace('/path/to/project')\n```\n\nYou can specify an absolute directory path, the path of a directory relative to\nyour current location, or a [Directory](class/src/Badger/Directory.js~Directory)\ndirectory object.  The [bin](function#static-function-bin) function can be used to\ndetermine the directory in which a script is located.\n\nFor example, if you have a `bin/myscript.js` file, you can create a workspace\nfor the parent directory like so:\n\n```js\nimport { bin, Workspace } from '@abw/badger'\n\nconst workspace = new Workspace(\n  bin().parent()\n)\n```\n\n## Directories\n\nThe [dir()](class/src/Badger.js~Workspace#instance-method-dir) method is a shortcut\nto fetch a [Directory](class/src/Badger/Filesystem/Directory.js~Directory) object for any\ndirectory relative to the workspace directory.\n\n```js\nconst tmpdir = workspace.dir('tmp');\n```\n\n## Files\n\nThe [file()](class/src/Badger.js~Workspace#instance-method-file) method is a shortcut\nto fetch a [File](class/src/Badger/Filesystem/File.js~File) object for any\nfile relative to the workspace directory.\n\n```js\nconst wibble = workspace.file('tmp/wibble.log');\n```\n\n## Configuration Files\n\nThe [config()](class/src/Badger.js~Workspace#instance-method-config) method is a shortcut\nto load data from a configuration file using the [Config](class/src/Badger/Config.js~Config)\nmodule.\n\nThe default location for configuration files is the `config` directory relative to the workspace\ndirectory.  See [configuration options](#config-options) below for details on how to change this.\n\n```js\nworkspace.config('animals').then(\n  data => console.log(\"Data from the config/animals(.js|.mjs|.yaml|.json) file\", data)\n)\n```\n\n## Javascript Libraries\n\nThe [library()](class/src/Badger.js~Workspace#instance-method-library) method is a shortcut\nto load a Javascript library from one of the library directories using the\n[Library](class/src/Badger/Library.js~Library) module.\n\nThe default search path for libary files is any of the `lib`, `library`, `src` or `components`\ndirectories relative to the workspace directory.  See [configuration options](#config-options)\nbelow for details on how to change this.\n\n```js\nworkspace.config('animals').then(\n  data => console.log(\"Data from the config/animals(.js|.mjs|.yaml|.json) file\", data)\n)\n```\n\n## Javascript Components\n\nThe [component(uri, props)](class/src/Badger.js~Workspace#instance-method-component) method can\nbe called to create a new component object.  The `uri` argument should be the base name of the\ncomponent.\n\nIf there is a configuration file matching the `uri` in the configuration directory\nthen it will be loaded (via the\n[config(uri)](class/src/Badger.js~Workspace#instance-method-config) method) and used as\nthe default configuration for the object.  The optional `props` can be defined\nto refine this configuration.\n\nThe corresponding library file will then be loaded from the library directory\n(via the [library(uri)](class/src/Badger.js~Workspace#instance-method-library) method).\nThis should have a default export which is the component class, implemented as a subclass\nof the [Component](class/src/Badger/Component.js~Component) base class.\n\nAn instance of the component class is then instantiated, passing a reference to the\nworkspace and the configuration options.\n\n```js\nworkspace.component('Hello').then(\n  hello => console.log('loaded hello component: ', hello)\n)\n```\n\nThe above example is roughly equivalent to:\n\n```js\nworkspace.config('Hello').then(\n  config => workspace.library('Hello')\n    .then( library => new library.default(workspace, config) )\n    .then( hello => console.log('loaded Hello component: ', hello) )\n)\n```\n\nThe default behaviour is to look for configuration and library files with\nthe same case as specified.  For example, requesting a component named\n`my/component` will look for a `my/component.(js|mjs|yaml|json)`\nconfiguration file and a `my/component.(js|mjs)` library file.\n\nThe `case` option can be used to provide functions for mapping `config` or\n`library` file names to a different case.  For example, if your\nconfiguration files use snake case but your library modules are defined\nin Pascal case (aka StudlyCaps), then you can map the `library` names using\nthe [snakeToStudly](https://abw.github.io/badger-utils/docs/manual/text.html#snaketostudly-snake-)\nfunction provided by [@abw/badger-utils](https://github.com/abw/badger-utils).\n\n```js\nimport { Workspace } from '@abw/badger'\nimport { snakeToStudly } from '@abw/badger-utils'\n\nconst workspace = new Workspace(\n  '/path/to/project',\n  case: {\n    library: snakeToStudly\n  }\n)\nworkspace.component('my/component').then(\n  // config file should be something like config/my/component.yaml\n  // library file should be something like lib/My/Component.js\n  // ...etc...\n)\n```\n\n## Configuration Options\n\nThe `config` option can be provided to configure the [Config](class/src/Badger/Config.js~Config)\nobject that the workspace used to load configuration files.\n\n```js\nconst workspace = new Workspace(\n  '/path/to/workspace',\n  {\n    config: {\n        dir:   'cfg',\n        codec: 'json',\n        jsExt: 'js',\n    }\n  }\n)\n```\n\nYou can specify multiple directories to search for configuration files.\n\n```js\nconst workspace = new Workspace(\n  '/path/to/workspace',\n  {\n    config: {\n      dir:   ['cfg', 'config'],\n    }\n  }\n)\n```\n\nThe `library` option can be provided to configure the [Library](class/src/Badger/Library.js~Library)\nobject that the workspace used to load Javascript libraries.\n\n```js\nconst workspace = new Workspace(\n  '/path/to/workspace',\n  {\n    library: {\n      dir:   'lib',\n      jsExt: 'js',\n    }\n  }\n)\n```\n\nYou can specify multiple directories to search for Javascript libraries.\n\n```js\nconst workspace = new Workspace(\n  '/path/to/workspace',\n  {\n    library: {\n      dir: ['src', 'lib'],\n    }\n  }\n)\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/user_input.md",
    "name": "./manual/user_input.md",
    "content": "# User Input\n\nThere are a number of function to help with processing command line arguments\nand getting input from users. Some of them are quick and easy functions of\nconvenience to make simple things simple.  At the other end of the scale the\n[options](function#static-function-options) function provides an integrated\nway to process command line arguments\n(using [commander](https://www.npmjs.com/package/commander))\nand prompt the user for any missing configuration options\n(using [prompts](https://www.npmjs.com/package/prompts)).\n\n- [User Input](#user-input)\n- [Command Line Arguments](#command-line-arguments)\n- [Simple Options Example](#simple-example)\n- [Special Options](#special-options)\n- [Commands](#commands)\n- [Sections](#sections)\n- [Generated Configuration](#generated-configuration)\n\n## User Input\n\nThe [prompt()](function#static-function-prompt) is a quick-and-easy way to\nask a user to enter some input.  It is implemented as a wrapper around the\n[prompt](https://www.npmjs.com/package/prompts) module.\n\nThe first argument is the question to ask the user.\n\n```js\nimport { prompt } from '@abw/badger'\n\nconst name = await prompt(\"What is your name?\");\nconsole.log('Hello ', name);\n```\n\nAn optional second argument can be the default answer:\n\n```js\nconst name = await prompt(\"What is your name?\", 'Mr Badger');\n```\n\nThis is a convenient short-hand for passing an object with a `default`\nproperty.\n\n```js\nconst name = await prompt(\"What is your name?\", { default: 'Mr Badger' });\n```\n\nThe [confirm()](function#static-function-confirm) function allows you to\nprompt the user to confirm an action by pressing `y` for `yes` or `n` for\n`no`.\n\n```js\nimport { confirm } from '@abw/badger'\n\nconst yes = await confirm(\"Are you sure?\");\nconsole.log('You said \"%s\"', yes ? 'YES' : 'NO');\n```\n\nThe default answer is `N`, returning a `false` value, but you can pass\n`true` as the second argument to make `Y` the default.\n\n```js\nconst yes = await confirm(\"Are you sure?\", true);\nconsole.log('You said \"%s\"', yes ? 'YES' : 'NO');\n```\n\nThe [select()](function#static-function-select) function is another wrapper\nof convenience for getting the user to select an option from a list.  Here\nthe second argument should be an array of options, with each as an object\ncontaining a `title` and `value`, or you can pass an object where each keys\nis a `value` mapped to a `title`.\n\n```js\nimport { select } from '@abw/badger'\n\nconst animal = await select(\n  'What is your favourite animal?',\n  {\n    aardvark: 'An amazing aardvark',\n    badger:   'A brilliant badger',\n    cat:      'A cool cat',\n    dog:      'A dapper dog'\n  },\n  1\n);\nconsole.log('You chose:', animal);  // aardvark, badger, cat or dog\n```\n\nThese are the three functions that I find myself using a lot.  For anything\nmore complicated you should probably cut out the middle-man and go straight\nto [prompts](https://www.npmjs.com/package/prompts).\n\n## Command Line Arguments\n\nIf you've got a script that expects a command line argument then the\n[cmdLineArg()](function#static-function-cmdLineArg) function is your friend.\nIt will return the first argument from the command line after your script\nname.\n\n```js\nimport { cmdLineArg } from '@abw/badger'\n\nconst arg = await cmdLineArg();\n```\n\nIf the script is run like so:\n\n```bash\n$ node your-script.js foo\n```\n\nThen the `arg` variable will be set to `foo`.  If you don't specify any\ncommand line arguments after the script name then it will be `undefined`.\nIf the program can't continue without the argument then you might want to\nuse the [quit()](function#static-function-quit) function to exit with a\nhelpful message.\n\n```js\nconst arg = await cmdLineArg();\n  || quit('No argument provided')\n```\n\nIf you pass a message prompt as an argument then the function will prompt\nthe user to enter a value if there isn't one provided on the command line.\n\n```js\nconst name = await cmdLineArg('What is your name?')\n  || quit('No name provided')\nconsole.log(`Hello ${name}`)\n```\n\nRunning the script would look something like this:\n\n```bash\n$ node your-script.js\n✔ What is your name? … Bobby Badger\nHello Bobby Badger\n```\n\nIf you want to process several command line arguments then you can use the\n[cmdLineArgs()](function#static-function-cmdLineArgs) function (note the extra\n\"s\" on the end).  Here the first argument should be an array of prompts for\neach argument.\n\n```js\nconst [forename, surname] = await cmdLineArgs(\n  ['What is your first name?', 'What is your surname']\n) || quit('No name provided')\n\nconsole.log(`Hello ${forename} ${surname}`);\n```\n\nIf you don't specify an prompts then it returns all arguments.\n\nNote that both of the above functions take a copy of the command line\narguments to work with (`process.argv.slice(2)`).  They don't modify the\noriginal list of argument so if you call either function multiple times then\nyou'll end up with the same arguments being returned, starting from\n`process.argv[2]` each time.\n\nIn this case you should take your own copy of the arguments and pass that as\nthe second option to the function(s).  You can use the `process.argv.slice(2)`\ntrick, or call the `cmdLine()` function to do it for you with less typing.\n\n```js\nimport { cmdLine, cmdLineArg, cmdLineArgs, quit } from '@abw/badger';\n\n// take a copy of the command line arguments to work with\nconst args = cmdLine();\n\nconst [forename, surname] = await cmdLineArgs(\n  ['What is your first name?', 'What is your surname'],\n  args\n) || quit('No name provided')\n\nconst age = await cmdLineArg(\n  `Hello ${forename} ${surname}, how old are you?`,\n  args\n) || quit('No age provided')\n\nconsole.log(`${age} is a fine age`);\n```\n\nYou can run this script with no arguments, one argument (forename), two\narguments (forename, surname) or three (forename, surname, age).  It will\nprompt you to enter any that you omitted.\n\nIf your script supports command line flags (e.g. `-v` or `--verbose`) then\nthe [cmdLineFlags()](function#static-function-cmdLineFlags) function can\nbe used to remove them from an argument list in advance.  This should only\nbe used in simple cases where you want to detect the presence of a boolean\nflag.  It doesn't support flags that expect an argument (although you can\nhandle this yourself with an `on` handlers, shown below).\n\n```js\nimport { cmdLineFlags } from '@abw/badger';\n\nconst { flags, args } = cmdLineFlags()\nconsole.log('flags:', flags);\nconsole.log('args:', args);\n```\n\nHere's an example of the script being run:\n\n```\n$ node flags-example.js -d --verbose foo -x bar\nflags: { d: true, verbose: true, x: true }\nargs: [ 'foo', 'bar' ]\n```\n\nThere are a number of configuration options you can pass to the function.\nThe `short` option allows you to map short options (e.g. `-v`) to longer\nequivalents (e.g. `--verbose`).\n\n```js\nconst { flags, args } = cmdLineFlags(\n  {\n    short: {\n      v: 'verbose',\n      d: 'debug',\n    }\n  },\n);\n```\n\nIn this case, the `-v` or `--verbose` option will result in `verbose` being\nset `true` in the returned `flags`.\n\nThe `options` option allows you to specify which options are valid.  You\ncan specify this as an object, where the valid options are the keys and\ncorresponding values should be `true`:\n\n```js\nconst { flags, args } = cmdLineFlags(\n  {\n    options: {\n      verbose: true,\n      debug:   true,\n    }\n  },\n);\n```\n\nOr you can use the short-hand form where you pass an array:\n\n```js\nconst { flags, args } = cmdLineFlags(\n  {\n    options: ['verbose', 'debug'],\n  },\n);\n```\n\nOr the even shorter-hand form where you pass a whitespace delimited string:\n\n```js\nconst { flags, args } = cmdLineFlags(\n  {\n    options: 'verbose debug',\n  },\n);\n```\n\nIf you provide the `options` option then any flags that aren't explicitly\nnamed will cause an error to be throw.\n\nYou can specify the `others` option to change this behaviour.  Set it to\n`keep` to keep the rogue flag in the argument list, `remove` to remove it\naltogether and pretend it never happened, or `collect` to accept it and\nreturn it in the flags.  The default value is `error`.\n\n```js\nconst { flags, args } = cmdLineFlags(\n  {\n    options: 'verbose debug',\n    others:  'keep',\n  },\n);\n```\n\nHere's an example of the earlier script being run with this configuration:\n\n```\n$ node flags-example.js --verbose foo -x bar\nflags: { verbose: true }\nargs: [ 'foo','-x', 'bar' ]\n```\n\nThe `on` option can be used to trigger a function when a flag is detected.\n\n```js\nconst { flags, args } = cmdLineFlags(\n  {\n    options: 'verbose debug',\n    on: {\n      help:    () => quit(\"Help message...\"),\n      version: () => quit(\"Version 1.2.3\"),\n      n:       (name, arg, args, flags) => {\n        // Handle something like: -n <number>\n        flags.number = args.shift();\n      }\n    }\n  },\n);\n```\n\nThe `on` handler will be passed four arguments.  The first is the argument\nname with the leading hyphens removed.  If it's a `short` option (e.g. `-v`)\nwhich is mapped to a longer name (e.g. `verbose`) then the longer name will\nbe passed.  The second argument is the flag as it was specified (e.g. `-v`\nor `--verbose`).  The third argument is the array of remaining arguments\nremaining after the current argument.  The fourth argument is an object\ncontaining the flags collected so far.  You can modify the arguments list\nor the flags if you want to.\n\nThe function should return `true` if it has handled the argument and no\nfurther processing needs to be done.  If it doesn't return a true value then\nprocessing of the flag continues as normal.\n\nOptions that have `on` handlers don't need to be explicitly listed in the\n`options` list.\n\n## Simple Options Example\n\nWhen you have multiple arguments and/or flags then\n[options](function#static-function-options) function may be a better choice.\nIt handles the logic of processing flags, arguments and prompting the user\nto enter any that are missing.\n\nThis simple example shows how options are specified.\n\n```js\nconst config = await options({\n  name: 'options.js',\n  version: '0.0.1',\n  description: 'Example showing command line options and prompting',\n  options: [\n    {\n      name:     'database',\n      short:    'd',\n      about:    'Database',\n      type:     'text',\n      prompt:   'What is the name of the database?',\n      required: true,\n    },\n    {\n      name:     'username',\n      short:    'u',\n      about:    'Username',\n      type:     'text',\n      prompt:   'What is the database username?',\n    },\n    {\n      name:     'password',\n      short:    'p',\n      about:    'Password',\n      type:     'password',\n      prompt:   'What is the database password?',\n    },\n  ]\n});\nconsole.log('config: ', config);\n```\n\nRun the script with the `-h` option to view the help.\n\n```sh\nUsage: options.js [options]\n\nExample showing command line options and prompting\n\nOptions:\n  -V, --version              output the version number\n  -d, --database &lt;text&gt;      Database\n  -u, --username &lt;text&gt;      Username\n  -p, --password &lt;password&gt;  Password\n  -h, --help                 display help for command\n```\n\nThe `name`, `version` and `description` are optional items that will be displayed in\nthe help.\n\nThe `options` array defines the valid options.  Each can have a `name` which is\naccessible as the \"long option\", e.g. `--database`, `--username` and `--password`,\nand a `short` option, e.g. `-d`, `-u` and `-p`.  The `about` item provides information\nabout the option.\n\nAfter processing the command line arguments, the function will prompt the user to\nconfirm any values specified as arguments, and enter any missing values.  The `prompt`\nitem is used to prompt the user.  If this is omitted then the user will not be prompted\nto enter a value.  The `type` can be set to one of the [types provided by the prompts\npackage](https://www.npmjs.com/package/prompts#-types).  The `required` option can be\nset `true` to force the user to enter a value.\n\n```sh\n$ node examples/options.js -d wibble\n✔ What is the name of the database? … wibble\n✔ What is the database username? …\n✔ What is the database password? …\n```\n\n## Special Options\n\nThe `yes` configuration item can be specified to have the `-y` / `--yes`\noptional automatically added.  When this is specifed on the command line the\nfunction will automatically accept the default answer.\n\nThe `verbose` configuration item can be specified to have the `-v` / `--verbose`\noptional automatically added.  When this is specifed on the command line the\nfunction will print additional output.\n\nThe `quiet` configuration item can be specified to have the `-q` / `--quiet`\noptional automatically added.  When this is specifed on the command line the\nfunction will suppress any optional output.\n\n```js\nconst config = await options({\n  name: 'options.js',\n  description: 'Example showing command line options and prompting',\n  version: '0.0.1',\n  yes: true,\n  verbose: true,\n  quiet: true,\n  options: [\n    ...\n  ]\n})\n```\n\n```sh\n$ node examples/options.js -h\nUsage: options.js [options]\n\nExample showing command line options and prompting\n\nOptions:\n  -V, --version              output the version number\n  -y, --yes                  Accept default answers\n  -v, --verbose              Verbose output\n  -q, --quiet                Quiet output\n  -d, --database &lt;text&gt;      Database\n  -u, --username &lt;text&gt;      Username\n  -p, --password &lt;password&gt;  Password\n  -h, --help                 display help for command\n```\n\n## Commands\n\nYou can also add `commands` to the configuration. For example, you might\nhave a script where you want to `start` or `stop` one or more services.\n\n```js\nconst config = await options({\n  name: 'commands.js',\n  description: 'Example showing command line commands',\n  version: '0.0.1',\n  verbose: true,\n  quiet: true,\n  commands: [\n    {\n      name:    'start',\n      pattern: '&lt;service&gt;',\n      about:   'Start a service'\n    },\n    {\n      name:     'stop',\n      pattern:  '&lt;service&gt;',\n      about:    'Stop a service'\n    },\n    {\n      name:     'status',\n      about:    'Show service status'\n    }\n  ]\n})\n```\n\nWhen run with the `-h` option the output will be:\n\n```sh\n$ node examples/commands.js -h\nUsage: commands.js [options] [command]\n\nExample showing command line commands.\n\nOptions:\n  -V, --version       output the version number\n  -v, --verbose       Verbose output\n  -q, --quiet         Quiet output\n  -h, --help          display help for command\n\nCommands:\n  start &lt;service&gt;  Start a service\n  stop &lt;service&gt;   Stop a service\n  status           Show service status\n  help [command]   display help for command\n```\n\nIf a command should accept multiple arguments then define the pattern\nusing ellipses.\n\n```js\nconst config = await options({\n  // ...etc...\n  commands: [\n    {\n      name:    'start',\n      pattern: '&lt;service...&gt;',\n      about:   'Start one or more services'\n    },\n    // ...etc...\n  ]\n})\n```\n\n## Sections\n\nIf you have lots of questions then you might want to break them up\ninto sections.  Add an item to the `options` array like the following\nto print a section title and information.  Both `title` and `info` are\noptional, so you can omit either one.\n\n```js\noptions: [\n  {\n    title: \"Configuration Options\",\n    info:  \"Please answer the following questions.\\nPress RETURN to accept defaults.\"\n  },\n  ...\n]\n```\n\nThis generates the following output:\n\n```sh\nConfiguration Options\n---------------------\n\nPlease answer the following questions.\nPress RETURN to accept defaults.\n```\n\n## Generated Configuration\n\nThe function returns a Promise which fulfills to an object containing the\nconfiguration values.  Each key will be the `name` of the option or command,\nand the corresponding value will be that read from the command line or by\nprompting the user.  In the case of [commands](#commands) with multiple values\nthey will be stored as an array.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/setup.md",
    "name": "./manual/setup.md",
    "content": "# Project Setup\n\nIt's considered good practice to define any sensitive information (e.g.\npasswords) in a `.env` environment file along with any other information that\nis specific to the machine it's running on or the deployment environment\n(e.g. development, staging, production, etc).\n\nThe [setup()](function#static-function-setup) function can help you automate\nthis process.  It allows you to create a setup script that users can run when\nthey first check out a project to a machine, or when configuration options\nchange.  It uses a configuration file to define the command line arguments\nthat the script will accept, and will prompt the user to enter any that\nhaven't been specified.  It will then generate the `.env` file.\n\n- [Setup Script](#setup-script)\n- [Configuration File](#configuration-file)\n- [Setup Options](#setup-options)\n\n## Setup Script\n\nYou should define a setup script for your project.  A good place for this\nis `bin/setup.js`.  It should look something like this:\n\n```js\n#!/usr/bin/env node\nimport { bin } from '@abw/badger-filesystem';\nimport { setup } from '@abw/badger'\n\nawait setup({\n  rootDir: bin().up(),\n  writeEnv: true,\n});\n```\n\nThe `rootDir` option specifies where the root directory for your project is.\nIt's usually not necessary as it defaults to the current working directory.\nIf you run the script from the project root then it will work as expected.\nBut it doesn't hurt to be explicit.  Here we're using the `bin()` function\nfrom `badger-filesystem` which returns a directory object for the directory\nin which the script is located (appropriately called `bin`).\n\nThe `up()` method returns the directory one level up.  If your\nscript is located in a lower level directory (e.g. `bin/project/setup.js`)\nthen you should go up another level (e.g. `bin().up(2)`).  If your script is\nalready in the top-level directory then `bin()` will suffice.\n\nThe benefit of being explicit is that you can then run this script from any\ndirectory and it will work correctly.\n\nThe `writeEnv` option tells it to write a `.env` file when it's done.\nThe `envFile` option can be used to specify the name for the file, relative\nto the `rootDir` directory.  The default is `.env`.\n\nYou'll need to define a setup configuration file to make it work.  We'll\ngo through that in the next section.  But first here's a sneak preview of\nwhat happens when you run the script with an example configuration.  This\nexample is in [examples/setup](https://github.com/abw/badger-js/blob/master/examples/setup)\nif you want to play along at home.\n\n```\n$ bin/setup.js\n\nProject Configuration\n---------------------\n\nPlease enter the following questions to setup the project.\n\n✔ Where is the project root directory on this machine? … /home/abw/my-project\n✔ What kind of deployment is this? › development\n\nDatabase Configuration\n----------------------\n\nEnter the connection details for the database.\n\n✔ Enter the name of the database … badger\n✔ Enter the name of the database host … localhost\n✔ Enter the port on which the database is running … 3306\n✔ Enter the username for connecting to the database … badger\n✔ Enter the password for connecting to the database … *********\n\nPrograms\n--------\n\nWe need to know the location of some programs on this machine.\n\n✔ Enter the full path to the gzip program … /usr/bin/gzip\n✔ Enter the full path to the gzcat (or zcat) program … /usr/bin/gzcat\n\n👍  All configuration options have been set\n```\n\nThe script will prompt you to confirm or enter values for each of the options\nin your configuration file.  It will then write a nicely formatted `.env` file\nand also a `.env.yaml` file containing the raw data.\n\nHere's what the `.env` file might look like:\n\n```\n#=============================================================================\n# WARNING: This file is generated automatically when the undefined\n# script is run.  Any changes made here may be lost.\n#\n# Generated: 2023-03-10 11:02:59\n#=============================================================================\n\n#-----------------------------------------------------------------------------\n# Project Configuration\n#-----------------------------------------------------------------------------\n\n# Project directory\nMYAPP_ROOT_DIR=/home/abw/my-project\n\n# Deployment type\nDEPLOYMENT=development\n\n\n#-----------------------------------------------------------------------------\n# Database Configuration\n#-----------------------------------------------------------------------------\n\n# Database name\nDB_NAME=badger\n\n# Database host\nDB_HOST=localhost\n\n# Database port\nDB_PORT=3306\n\n# Database user\nDB_USER=badger\n\n# Database password\nDB_PASS=TOP_SECRET\n\n\n#-----------------------------------------------------------------------------\n# Programs\n#-----------------------------------------------------------------------------\n\n# Path to gzip\nGZIP=/usr/bin/gzip\n\n# Path to gzcat (or zcat)\nGZCAT=/usr/bin/gzcat\n```\n\nThe `-v` or `--verbose` options can be added to get some extra messages\ngenerated.  The `-h` or `--help` options can be used to view the help for the\nscript:\n\n```\n$ bin/setup.js -h\nUsage: bin/setup.js [options]\n\nProject setup script.\n\nOptions:\n  -y, --yes              Accept default answers\n  -v, --verbose          Verbose output\n  -q, --quiet            Quiet output\n  --root &lt;dir&gt;           Project directory (default: \"/home/abw/my-project\")\n  --deployment &lt;type&gt;    Deployment type (default: \"development\")\n  --db_name &lt;dbname&gt;     Database name (default: \"badger\")\n  --db_host &lt;hostname&gt;   Database host (default: \"localhost\")\n  --db_port &lt;port&gt;       Database port (default: 3306)\n  --db_user &lt;username&gt;   Database user (default: \"badger\")\n  --db_pass &lt;password&gt;   Database password\n  --gzip &lt;path&gt;          Path to gzip (default: \"/usr/bin/gzip\")\n  --gzcat &lt;path&gt;         Path to gzcat (or zcat) (default: \"/usr/bin/gzcat\")\n  -h, --help             display help for command\n```\n\nIn this example the options from `--deployment` down to `--gzcat` are specific\nto the configuration file and everything else comes as standard.\n\nIf you need to change an option you can go through the questions over again\n(it will remember the answers you previously gave by looking at the generated\n`.env` and/or `.env.yaml` files), or you can use a command line option to\nset the relevant value along with `-y` or `--yes` to automatically accept all\nthe other value.  The `-q` or `--quiet` option can be used to supress any\nother output.\n\nFor example, to update the database password:\n\n```\n$ bin/setup.js --db_pass NEWPASSWORD -y -q\n```\n\nThe `.env` file will then be re-generated with the new value for `DB_PASS`.\n\n## Configuration file\n\nYou need to define a configuration file to tell the script what data you\nneed to capture.  It can be in any one of the standard locations, relative\nto your project root:\n\n* `config/setup.yaml`\n* `config/setup.json`\n* `setup.yaml`\n* `setup.json`\n* `.setup.yaml`\n* `.setup.json`\n\nYou can use the `configFile` option to specify a different location if you\ndon't like the look of any of those.\n\nHere's the configuration file used in the earlier example.\n\n```yaml\n# standard options\nyes:            true\nverbose:        true\nquiet:          true\n\n# custom project options\noptions:\n  #---------------------------------------------------------------------------\n  # Project\n  #---------------------------------------------------------------------------\n  -\n    title:      Project Configuration\n    info:       Please answer the following questions to setup the project.\n  -\n    name:       root\n    about:      Project directory\n    prompt:     Where is the project root directory on this machine?\n    pattern:    &lt;dir&gt;\n    required:   true\n    envvar:     MYAPP_ROOT_DIR\n  -\n    name:       deployment\n    about:      Deployment type\n    prompt:     What kind of deployment is this?\n    type:       select\n    pattern:    &lt;type&gt;\n    required:   true\n    default:    development\n    choices:\n      -\n        title:  development\n        value:  development\n      -\n        title:  staging\n        value:  staging\n      -\n        title:  production\n        value:  production\n\n  #---------------------------------------------------------------------------\n  # Database\n  #---------------------------------------------------------------------------\n  -\n    title:      Database Configuration\n    info:       Enter the connection details for the database.\n  -\n    name:       db_name\n    about:      Database name\n    prompt:     Enter the name of the database\n    pattern:    &lt;dbname&gt;\n    required:   true\n    default:    badger\n  -\n    name:       db_host\n    about:      Database host\n    prompt:     Enter the name of the database host\n    pattern:    &lt;hostname&gt;\n    required:   true\n    default:    localhost\n  -\n    name:       db_port\n    about:      Database port\n    prompt:     Enter the port on which the database is running\n    pattern:    &lt;port&gt;\n    required:   true\n    default:    3306\n  -\n    name:       db_user\n    about:      Database user\n    prompt:     Enter the username for connecting to the database\n    pattern:    &lt;username&gt;\n    required:   true\n    default:    badger\n  -\n    name:       db_pass\n    about:      Database password\n    prompt:     Enter the password for connecting to the database\n    pattern:    &lt;password&gt;\n    type:       password\n    required:   true\n\n  #---------------------------------------------------------------------------\n  # Programs\n  #---------------------------------------------------------------------------\n  -\n    title:      Programs\n    info:       We need to know the location of some programs on this machine.\n  -\n    name:       gzip\n    about:      Path to gzip\n    program:    gzip\n    prompt:     Enter the full path to the gzip program\n    mandatory:  true\n  -\n    name:       gzcat\n    about:      Path to gzcat (or zcat)\n    program:    gzcat zcat\n    prompt:     Enter the full path to the gzcat (or zcat) program\n    mandatory:  true\n```\n\nThe first section contains the standard options that enable the `-y` / `--yes`,\n`-v` / `--verbose` and `-q` / `--quiet` options.\n\n```yaml\n# standard options\nyes:            true\nverbose:        true\nquiet:          true\n```\n\nFollowing that we have the `options` section.  Each option must contain a\n`name` and can have various other parameters.\n\n```yaml\noptions:\n  -\n    name:       root\n    envvar:     MYAPP_ROOT_DIR\n    about:      Project directory\n    prompt:     Where is the project root directory on this machine?\n    required:   true\n    pattern:    &lt;dir&gt;\n  # ...etc.\n```\n\nThe `name` is used as the command line option for the script, e.g. `--root`.\nIf an `envvar` is defined then this will be the name used for the environment\nvariable in the `.env` file (`MYAPP_ROOT_DIR` in this example).  Otherwise it\ndefaults to an upper can version of the `name` (e.g. `ROOT`).\n\nIf you don't want an answer to be saved either in the `.env` file or in the\ncached answers file then set the `save` property to `false`.\n\n```yaml\n    save:       false\n```\n\nThe `about` property is displayed in the help text.  It will also be added as\na comment to the `.env` file.  The `prompt` is the prompt used to request user\ninput.  If this is not defined then the user will not be prompted to enter a\nvalue for it.  The `pattern` is displayed against the option in the help text,\ne.g.\n\n```\n   --root &lt;dir&gt;           Project directory (default: ...)\n```\n\nIf you don't specify it then it defaults to `<text>` (or `<path>` for program\noptions)\n\nThe `required` flag indicates that a value must be provided.\n\nThe default input type is `text`, but you can explicitly set it to `password`\nwhere appropriate:\n\n```yaml\n  -\n    name:       db_pass\n    about:      Database password\n    prompt:     Enter the password for connecting to the database\n    pattern:    &lt;password&gt;\n    type:       password\n    required:   true\n```\n\nThe `select` type can be be used to provide a list of values to select from:\n\n```yaml\n  -\n    name:       deployment\n    about:      Deployment type\n    prompt:     What kind of deployment is this?\n    type:       select\n    pattern:    &lt;type&gt;\n    required:   true\n    default:    development\n    choices:\n      -\n        title:  development\n        value:  development\n      -\n        title:  staging\n        value:  staging\n      -\n        title:  production\n        value:  production\n```\n\nThe `program` option provides some extra magic.  It will look for the named\nprogram in your `PATH` and set the default value to be the first location\nit finds.\n\n```yaml\n  -\n    name:       gzip\n    about:      Path to gzip\n    program:    gzip\n    prompt:     Enter the full path to the gzip program\n    mandatory:  true\n```\n\nIf you don't set the `pattern` for a `program` option then it defaults to\n`<path>`.  If there are different names for acceptable programs then you\ncan specify multiple values to the `program` option.  For example, `gzcat`\nand `zcat` both do the same thing.\n\n```yaml\n    program:    gzcat zcat\n```\n\nLots of questions can be a bit overwhelming to a user.  You can break them\nup into sections to relieve the monotony by defining a `title` option.\n\n```yaml\n  -\n    title:      Programs\n    info:       We need to know the location of some programs on this machine.\n```\n\n## Setup Options\n\nHere's a summary of the options that you can pass to the `setup()`\nfunction.\n\n|Option|Description|Default|\n|-|-|-|\n|rootDir|Your project root directory|Current working directory|\n|description|A description for the help text|Project setup script.|\n|version|The version number for the help text||\n|configFile|The path to your setup configuration file, relative to `rootDir`|`config/setup.yaml`, `config/setup.json`, `setup.yaml`, `setup.json`, `.setup.yaml` or `.setup.json`|\n|envFile|The name of your environment file, relative to `rootDir`|`.env`|\n|writeEnv|Should it automatically write the `envFile` file?|`false`|\n|envExtra|Additional file to append to `envFile`, e.g. `.env.extra`||\n|envSections|Add section block comments to `envFile`|`true`|\n|envComments|Add item comments to `envFile`|`true`|\n|compact|Don't add blank spacing lines in `envFile`|`false`|\n|dataFile|JSON or YAML file for caching answers|`.env.yaml`|\n|writeData|Should it automatically write the `dataFile` file?|`true`|\n|cancelled|Text to display when script is cancelled (by hitting escape or Ctrl-C)|`Setup cancelled`|\n|allDone|Text to display when all questions have been answered|`All configuration options have been set`|\n|warning|Warning text to add to top of `envFile`|(WARNING text block)|\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-js/manual/miscellaneous.md",
    "name": "./manual/miscellaneous.md",
    "content": "# Miscellaneous Functions\n\n- [ANSI Colors](#ansi-colors)\n- [Debugging](#debugging)\n- [Exit](#exit)\n- [App Status](#app-status)\n- [Progress](#progress)\n\n## ANSI Colors\n\nThe [color()](function#static-function-color) function provides a simple way\nto use ANSI escape codes to generate colored text.\n\nIt is super-simple and only exists in here from a time in the past when\n[chalk](https://www.npmjs.com/package/chalk) didn't play nicely with ESM\nmodules.  It looks like it does now, so if you want anything more than the\nbasic 16 ANSI colours, with `bright` and/or `bold` options then you should\nuse [chalk](https://www.npmjs.com/package/chalk).\n\n*My apologies to the Europeans, Canadians and others who know that the\ncorrect spelling is \"colour\", but I have reluctantly come to accept that\nthe \"programming\" spelling used in CSS, etc., is \"color\".**\n\nThere are functions defined for the basic colors:\n\n* `black()`\n* `red()`\n* `green()`\n* `yellow()`\n* `blue()`\n* `magenta()`\n* `cyan()`\n* `grey()`\n* `white()`\n\nAnd also for the \"bright\" variants:\n\n* `brightBlack()`\n* `brightRed()`\n* `brightGreen()`\n* `brightYellow()`\n* `brightBlue()`\n* `brightMagenta()`\n* `brightCyan()`\n* `brightGrey()`\n* `brightWhite()`\n\nAnd the \"dark\" variants:\n\n* `darkBlack()`\n* `darkRed()`\n* `darkGreen()`\n* `darkYellow()`\n* `darkBlue()`\n* `darkMagenta()`\n* `darkCyan()`\n* `darkGrey()`\n* `darkWhite()`\n\n```js\nimport { red } from '@abw/badger'\n\nconsole.log(red('some red text'));\n```\n\nThese are all implemented in terms of the [color()](function#static-function-color)\nfunction which accepts a string containing the color name along with an optional\n`bright` or `dark` prefix.\n\n```js\nimport { color } from '@abw/badger'\n\nconst brightRed = color('bright red');\n\nconsole.log(brightRed('some bright red text'));\n```\n\nYou can also pass an option containing separate colors for the foreground\n(`fg`) and background (`bg`).\n\n```js\nconst whiteOnRed = color({ bg: 'red', fg: 'white' });\nconsole.log(whiteOnRed('some white text on a red background'));\n```\n\n## Debugging\n\nThe [Debugger()](function#static-function-Debugger) function returns a\ndebugging function.  The first argument is a flag which determines if\ndebugging is enabled.  If this is `true` then the function will act as a\nwrapper around `console.log`.  If it is false then it is an alias for the\n[doNothing()](function#static-function-doNothing) function which, as the\nname suggests, does nothing.\n\n```js\nimport { Debugger } from '@abw/badger'\n\nconst debugOn  = Debugger(true);\nconst debugOff = Debugger(false);\n\ndebugOn('This message will be displayed: %s', 'Hello World!');\ndebugOff('This message will be NOT be displayed: %s', 'Hello World!');\n```\n\nThe second argument is an optional prefix for debugging messages.\n\n```js\nconst debugPrefix = Debugger(true, 'DEBUG > ');\ndebugPrefix('This message will have a prefix');\n```\n\nThe message will be displayed as:\n\n```\nDEBUG > This message will have a prefix\n```\n\nThe third option is a color.  This can be any of the color options supported\nby the [color()](function#static-function-color) described above.\n\n```js\nconst debugColor = Debugger(true, 'DEBUG > ', 'bright cyan');\ndebugColor('This message will have a bright cyan prefix');\n```\n\nThe [addDebug()](function#static-function-addDebug) function takes an object\nreference as the first argument, followed by the same three options as for\nthe [Debugger()](function#static-function-Debugger) function.\nIt adds the debugging function as the `debug` method in the object.\n\nIt can be used in the constructor method for an object like this:\n\n```js\nimport { addDebug } from '@abw/badger'\n\nclass MyClass {\n  constructor(options={}) {\n    addDebug(this, options.debug, options.debugPrefix, options.debugColor);\n  }\n  someMethod() {\n    this.debug('Hello World!')\n  }\n}\n```\n\nNow you can enable debugging message in your class by passing a `debug` flag,\nand optionally, a `debugPrefix` or `debugColor` parameter, to the constructor.\n\n```js\nconst myObj = new MyClass({ debug: true, debugPrefix: 'MyClass > ' });\nmyObj.someMethod();\n```\n\nWith this configuration a debugging message will be printed:\n\n```\nMyClass > Hello World!\n```\n\n## Exit\n\nThe [exit()](function#static-function-exit) function exits the current\nprocess.  It is a trivial wrapper around `process.exit()`.\n\nThe first argument is an exit code (0 for a sucessful exit,\nany other value to indicate an exceptional condition).  The second\noptional argument can be a message to display before exiting.\n\n```js\nimport { exit } from '@abw/badger'\n\nexit(0, 'Goodbye')\n```\n\nThe [quit()](function#static-function-quit) function is a wrapper around\nthe [exit()](function#static-function-exit) function that sets the exit code\nto 0 to indicate successful termination.\n\n```js\nimport { quit } from '@abw/badger'\n\nquit('Goodbye')\n```\n\nThe [abort()](function#static-function-abort) function is a wrapper around\nthe [exit()](function#static-function-exit) function that sets the exit\ncode to 1 to indicate an error condition.\n\n```js\nimport { abort } from '@abw/badger'\n\nabort('Big plate of failed')\n```\n\n## App Status\n\nThe [appStatus()](function#static-function-appStatus) function is a simple\nwrapper around a function to either print a success message, or catch any\nerrors thrown and display the error message.\n\n```js\nimport { prompt, appStatus } from '../src/Badger.js';\n\nconst app = appStatus(\n  async () => {\n    const n = await prompt('Enter an even number');\n    if (n % 2) {\n      throw `${n} is not an even number`\n    }\n    return `You entered ${n}`;\n  }\n)\n\napp();\n```\n\nIf the function is successful it should return a message which will be\ndisplayed to the user (in bright green, although you can't see that here).\n\n```\n✔ Enter an even number … 2\n✓ You entered 2\n```\n\nIf an error is thrown then the error message will be displayed in bright\nred.\n\n```\n✔ Enter an even number … 3\n✗ 3 is not an even number\n```\n\n## Progress\n\nThe [progress()](function#static-function-progress) function returns an\nobject which can be used to give a visual display of the progress of a long\nrunning process.  It is intended to be used in cases where you know in advance\nhow many actions you need to complete (e.g. importing 1000 records into a\ndatabase).\n\n```js\nimport { progress } from '@abw/badger'\n\nconst records = [\n  // lots of records\n]\nconst p = progress(records.length);\n\nfor (record of records) {\n  // do something with record\n  p.printProgress();\n}\n```\n\nThe `printProgress()` method accepts an argument which is the number of\nitems you have processed in that loop (i.e. it's the delta, not the total\nnumber processed so far).  It defaults to 1.\n\nAs the method is called it will print a few more \"pixels\" to the screen to\ndisplay a nice colourful image of an hourglass.\n\n![Progress](manual/asset/progress.png)\n\nYou can change the colours or use your own picture.  See the\n[examples/progress.js](https://github.com/abw/badger-js/blob/master/examples/progress.js)\nfile for examples.\n\n",
    "static": true,
    "access": "public"
  }
]